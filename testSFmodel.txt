# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from salesforce import models


class AcceptedEventRelation(models.Model):
    relation = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='acceptedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='acceptedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AcceptedEventRelation'
        verbose_name = 'Accepted Event Relation'
        verbose_name_plural = 'Accepted Event Relations'
        # keyPrefix = 'None'



class Account(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='account_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Account Name')
    type = models.CharField(max_length=40, verbose_name='Account Type', choices=[('Prospect', 'Prospect'), ('Customer - Direct', 'Customer - Direct'), ('Customer - Channel', 'Customer - Channel'), ('Channel Partner / Reseller', 'Channel Partner / Reseller'), ('Installation Partner', 'Installation Partner'), ('Technology Partner', 'Technology Partner'), ('Other', 'Other')], blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='account_parent_set', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Account Fax', blank=True, null=True)
    account_number = models.CharField(max_length=40, blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic = models.CharField(max_length=20, verbose_name='SIC Code', blank=True, null=True)
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Other', 'Other')], blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    ownership = models.CharField(max_length=40, choices=[('Public', 'Public'), ('Private', 'Private'), ('Subsidiary', 'Subsidiary'), ('Other', 'Other')], blank=True, null=True)
    ticker_symbol = models.CharField(max_length=20, blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', blank=True, null=True)
    rating = models.CharField(max_length=40, verbose_name='Account Rating', choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True, null=True)
    site = models.CharField(max_length=80, verbose_name='Account Site', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='account_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    clean_status = models.CharField(max_length=40, choices=[('Matched', 'In Sync'), ('Different', 'Different'), ('Acknowledged', 'Reviewed'), ('NotFound', 'Not Found'), ('Inactive', 'Inactive'), ('Pending', 'Not Compared'), ('SelectMatch', 'Select Match'), ('Skipped', 'Skipped')], blank=True, null=True)
    account_source = models.CharField(max_length=40, choices=[('Web', 'Web'), ('Phone Inquiry', 'Phone Inquiry'), ('Partner Referral', 'Partner Referral'), ('Purchased List', 'Purchased List'), ('Other', 'Other')], blank=True, null=True)
    duns_number = models.CharField(max_length=9, verbose_name='D-U-N-S Number', blank=True, null=True)
    tradestyle = models.CharField(max_length=255, blank=True, null=True)
    naics_code = models.CharField(max_length=8, verbose_name='NAICS Code', blank=True, null=True)
    naics_desc = models.CharField(max_length=120, verbose_name='NAICS Description', blank=True, null=True)
    year_started = models.CharField(max_length=4, blank=True, null=True)
    sic_desc = models.CharField(max_length=80, verbose_name='SIC Description', blank=True, null=True)
    dandb_company = models.ForeignKey('DandBcompany', models.DO_NOTHING, blank=True, null=True)
    customer_priority = models.CharField(custom=True, max_length=255, choices=[('High', 'High'), ('Low', 'Low'), ('Medium', 'Medium')], blank=True, null=True)
    sla = models.CharField(custom=True, db_column='SLA__c', max_length=255, verbose_name='SLA', choices=[('Gold', 'Gold'), ('Silver', 'Silver'), ('Platinum', 'Platinum'), ('Bronze', 'Bronze')], blank=True, null=True)
    active = models.CharField(custom=True, max_length=255, choices=[('No', 'No'), ('Yes', 'Yes')], blank=True, null=True)
    numberof_locations = models.DecimalField(custom=True, max_digits=3, decimal_places=0, verbose_name='Number of Locations', blank=True, null=True)
    upsell_opportunity = models.CharField(custom=True, max_length=255, choices=[('Maybe', 'Maybe'), ('No', 'No'), ('Yes', 'Yes')], blank=True, null=True)
    slaserial_number = models.CharField(custom=True, db_column='SLASerialNumber__c', max_length=10, verbose_name='SLA Serial Number', blank=True, null=True)
    slaexpiration_date = models.DateField(custom=True, db_column='SLAExpirationDate__c', verbose_name='SLA Expiration Date', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'



class AccountCleanInfo(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Account Clean Info Name', sf_read_only=models.NOT_CREATEABLE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcleaninfo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcleaninfo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_matched_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_status_changed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_status_changed_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcleaninfo_laststatuschangedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_inactive = models.BooleanField(verbose_name='Company Status in Salesforce', sf_read_only=models.NOT_CREATEABLE, default=False)
    company_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    website = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    ticker_symbol = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Number of Employees', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Other', 'Other')], blank=True, null=True)
    ownership = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Public', 'Public'), ('Private', 'Private'), ('Subsidiary', 'Subsidiary'), ('Other', 'Other')], blank=True, null=True)
    duns_number = models.CharField(max_length=9, verbose_name='D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic = models.CharField(max_length=20, verbose_name='SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic_description = models.CharField(max_length=80, verbose_name='SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    naics_code = models.CharField(max_length=8, verbose_name='NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    naics_description = models.CharField(max_length=120, verbose_name='NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    year_started = models.CharField(max_length=12, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account_site = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    tradestyle = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    dand_bcompany_duns_number = models.CharField(db_column='DandBCompanyDunsNumber', max_length=9, verbose_name='D&B Company D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duns_right_match_grade = models.CharField(max_length=255, verbose_name='DUNSRight™ Match Grade', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duns_right_match_confidence = models.IntegerField(verbose_name='DUNSRight™ Match Confidence', sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_status_data_dot_com = models.CharField(max_length=255, verbose_name='Company Status per Data.com', sf_read_only=models.READ_ONLY, choices=[('IsActiveCompanyDataDotCom', 'Company is In Business per Data.com'), ('IsInactiveCompanyDataDotCom', 'Company is Out of Business per Data.com')], blank=True, null=True)
    is_reviewed_company_name = models.BooleanField(verbose_name='Company Name is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_phone = models.BooleanField(verbose_name='Phone is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_address = models.BooleanField(verbose_name='Address is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_website = models.BooleanField(verbose_name='Website is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_ticker_symbol = models.BooleanField(verbose_name='Ticker Symbol is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_annual_revenue = models.BooleanField(verbose_name='Annual Revenue is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_number_of_employees = models.BooleanField(verbose_name='Number of Employees is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_industry = models.BooleanField(verbose_name='Industry is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_ownership = models.BooleanField(verbose_name='Ownership is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_duns_number = models.BooleanField(verbose_name='D-U-N-S Number is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_sic = models.BooleanField(verbose_name='SIC Code is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_sic_description = models.BooleanField(verbose_name='SIC Description is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_naics_code = models.BooleanField(verbose_name='NAICS Code is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_naics_description = models.BooleanField(verbose_name='NAICS Description is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_year_started = models.BooleanField(verbose_name='Year Started is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_fax = models.BooleanField(verbose_name='Fax is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_account_site = models.BooleanField(verbose_name='Account Site is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_description = models.BooleanField(verbose_name='Description is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_tradestyle = models.BooleanField(verbose_name='Tradestyle is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_dand_bcompany_duns_number = models.BooleanField(db_column='IsReviewedDandBCompanyDunsNumber', verbose_name='D&B Company D-U-N-S Number is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_different_company_name = models.BooleanField(verbose_name='Company Name is Different', sf_read_only=models.READ_ONLY)
    is_different_phone = models.BooleanField(verbose_name='Phone is Different', sf_read_only=models.READ_ONLY)
    is_different_street = models.BooleanField(verbose_name='Street is Different', sf_read_only=models.READ_ONLY)
    is_different_city = models.BooleanField(verbose_name='City is Different', sf_read_only=models.READ_ONLY)
    is_different_state = models.BooleanField(verbose_name='State is Different', sf_read_only=models.READ_ONLY)
    is_different_postal_code = models.BooleanField(verbose_name='ZIP is Different', sf_read_only=models.READ_ONLY)
    is_different_country = models.BooleanField(verbose_name='Country is Different', sf_read_only=models.READ_ONLY)
    is_different_website = models.BooleanField(verbose_name='Website is Different', sf_read_only=models.READ_ONLY)
    is_different_ticker_symbol = models.BooleanField(verbose_name='Ticker Symbol is Different', sf_read_only=models.READ_ONLY)
    is_different_annual_revenue = models.BooleanField(verbose_name='Annual Revenue is Different', sf_read_only=models.READ_ONLY)
    is_different_number_of_employees = models.BooleanField(verbose_name='Number of Employees is Different', sf_read_only=models.READ_ONLY)
    is_different_industry = models.BooleanField(verbose_name='Industry is Different', sf_read_only=models.READ_ONLY)
    is_different_ownership = models.BooleanField(verbose_name='Ownership is Different', sf_read_only=models.READ_ONLY)
    is_different_duns_number = models.BooleanField(verbose_name='D-U-N-S Number is Different', sf_read_only=models.READ_ONLY)
    is_different_sic = models.BooleanField(verbose_name='SIC Code is Different', sf_read_only=models.READ_ONLY)
    is_different_sic_description = models.BooleanField(verbose_name='SIC Description is Different', sf_read_only=models.READ_ONLY)
    is_different_naics_code = models.BooleanField(verbose_name='NAICS Code is Different', sf_read_only=models.READ_ONLY)
    is_different_naics_description = models.BooleanField(verbose_name='NAICS Description is Different', sf_read_only=models.READ_ONLY)
    is_different_year_started = models.BooleanField(verbose_name='Year Started is Different', sf_read_only=models.READ_ONLY)
    is_different_fax = models.BooleanField(verbose_name='Fax is Different', sf_read_only=models.READ_ONLY)
    is_different_account_site = models.BooleanField(verbose_name='Account Site is Different', sf_read_only=models.READ_ONLY)
    is_different_description = models.BooleanField(verbose_name='Description is Different', sf_read_only=models.READ_ONLY)
    is_different_tradestyle = models.BooleanField(verbose_name='Tradestyle is Different', sf_read_only=models.READ_ONLY)
    is_different_dand_bcompany_duns_number = models.BooleanField(db_column='IsDifferentDandBCompanyDunsNumber', verbose_name='D&B Company D-U-N-S Number is Different', sf_read_only=models.READ_ONLY)
    is_different_state_code = models.BooleanField(verbose_name='State Code is Different', sf_read_only=models.READ_ONLY)
    is_different_country_code = models.BooleanField(verbose_name='Country Code is Different', sf_read_only=models.READ_ONLY)
    cleaned_by_job = models.BooleanField(verbose_name='Cleaned by Job', sf_read_only=models.READ_ONLY)
    cleaned_by_user = models.BooleanField(verbose_name='Cleaned by User', sf_read_only=models.READ_ONLY)
    is_flagged_wrong_company_name = models.BooleanField(verbose_name='Company Name is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_phone = models.BooleanField(verbose_name='Phone is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_address = models.BooleanField(verbose_name='Address is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_website = models.BooleanField(verbose_name='Website is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_ticker_symbol = models.BooleanField(verbose_name='Ticker Symbol is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_annual_revenue = models.BooleanField(verbose_name='Annual Revenue is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_number_of_employees = models.BooleanField(verbose_name='Number of Employees is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_industry = models.BooleanField(verbose_name='Industry is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_ownership = models.BooleanField(verbose_name='Ownership is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_duns_number = models.BooleanField(verbose_name='D-U-N-S Number is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_sic = models.BooleanField(verbose_name='SIC Code is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_sic_description = models.BooleanField(verbose_name='SIC Description is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_naics_code = models.BooleanField(verbose_name='NAICS Code is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_naics_description = models.BooleanField(verbose_name='NAICS Description is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_year_started = models.BooleanField(verbose_name='Year Started is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_fax = models.BooleanField(verbose_name='Fax is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_account_site = models.BooleanField(verbose_name='Account Site is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_description = models.BooleanField(verbose_name='Description is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_tradestyle = models.BooleanField(verbose_name='Tradestyle is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    data_dot_com_id = models.CharField(max_length=20, verbose_name='Data.com ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountCleanInfo'
        verbose_name = 'Account Clean Info'
        verbose_name_plural = 'Account Clean Info'
        # keyPrefix = '1CA'



class AccountContactRole(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRole'
        verbose_name = 'Account Contact Role'
        verbose_name_plural = 'Account Contact Roles'
        # keyPrefix = '02Z'



class AccountFeed(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountFeed'
        verbose_name = 'Account Feed'
        verbose_name_plural = 'Account Feed'
        # keyPrefix = 'None'



class AccountHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('accountMerged', 'Account Merged'), ('Name', 'Account Name'), ('TextName', 'Account Name'), ('AccountNumber', 'Account Number'), ('Owner', 'Account Owner'), ('Site', 'Account Site'), ('AccountSource', 'Account Source'), ('Active__c', 'Active'), ('AnnualRevenue', 'Annual Revenue'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('CleanStatus', 'Clean Status'), ('created', 'Created.'), ('accountCreatedFromLead', 'Created by lead convert'), ('CustomerPriority__c', 'Customer Priority'), ('DandbCompany', 'D&B Company'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('DunsNumber', 'D-U-N-S Number'), ('NumberOfEmployees', 'Employees'), ('Fax', 'Fax'), ('feedEvent', 'Feed event'), ('Industry', 'Industry'), ('accountUpdatedByLead', 'Lead converted to Account'), ('personAccountUpdatedByLead', 'Lead converted to Person Account'), ('NaicsCode', 'NAICS Code'), ('NaicsDesc', 'NAICS Description'), ('NumberofLocations__c', 'Number of Locations'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Ownership', 'Ownership'), ('Parent', 'Parent Account'), ('Phone', 'Phone'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('Sic', 'SIC Code'), ('SicDesc', 'SIC Description'), ('SLA__c', 'SLA'), ('SLAExpirationDate__c', 'SLA Expiration Date'), ('SLASerialNumber__c', 'SLA Serial Number'), ('TickerSymbol', 'Ticker Symbol'), ('Tradestyle', 'Tradestyle'), ('Type', 'Type'), ('UpsellOpportunity__c', 'Upsell Opportunity'), ('Website', 'Website'), ('YearStarted', 'Year Started')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountHistory'
        verbose_name = 'Account History'
        verbose_name_plural = 'Account History'
        # keyPrefix = 'None'



class AccountPartner(models.Model):
    account_from = models.ForeignKey(Account, models.DO_NOTHING, related_name='accountpartner_accountfrom_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, related_name='accountpartner_accountto_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountpartner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountpartner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountPartner'
        verbose_name = 'Account Partner'
        verbose_name_plural = 'Account Partner'
        # keyPrefix = 'None'



class AccountShare(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    account_access_level = models.CharField(max_length=40, verbose_name='Account Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    opportunity_access_level = models.CharField(max_length=40, verbose_name='Opportunity Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_level = models.CharField(max_length=40, verbose_name='Case Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    contact_access_level = models.CharField(max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AccountShare'
        verbose_name = 'Account Share'
        verbose_name_plural = 'Account Share'
        # keyPrefix = '00r'



class ActionLinkGroupTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80)
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinkgrouptemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinkgrouptemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    executions_allowed = models.CharField(max_length=255, choices=[('Once', 'Once'), ('OncePerUser', 'Once per User'), ('Unlimited', 'Unlimited')])
    hours_until_expiration = models.IntegerField(verbose_name='Hours until Expiration', blank=True, null=True)
    category = models.CharField(max_length=255, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')])
    is_published = models.BooleanField(verbose_name='Published', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkGroupTemplate'
        verbose_name = 'Action Link Group Template'
        verbose_name_plural = 'Action Link Group Templates'
        # keyPrefix = '07g'



class ActionLinkTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinktemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinktemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    action_link_group_template = models.ForeignKey(ActionLinkGroupTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label_key = models.CharField(max_length=128)
    method = models.CharField(max_length=255, verbose_name='HTTP Method', choices=[('HttpDelete', 'DELETE'), ('HttpHead', 'HEAD'), ('HttpGet', 'GET'), ('HttpPatch', 'PATCH'), ('HttpPost', 'POST'), ('HttpPut', 'PUT')])
    link_type = models.CharField(max_length=255, verbose_name='Action Type', choices=[('API', 'API'), ('APIAsync', 'API Async'), ('Download', 'Download'), ('UI', 'UI')])
    position = models.IntegerField()
    is_confirmation_required = models.BooleanField(verbose_name='Confirmation Required', default=models.DEFAULTED_ON_CREATE)
    is_group_default = models.BooleanField(verbose_name='Default Link in Group', default=models.DEFAULTED_ON_CREATE)
    user_visibility = models.CharField(max_length=255, choices=[('Creator', 'Only creator can see'), ('Everyone', 'Everyone can see'), ('EveryoneButCreator', 'Everyone but creator can see'), ('Manager', "Only creator's manager can see"), ('CustomUser', 'Only custom user can see'), ('CustomExcludedUser', 'Everyone but custom user can see')])
    user_alias = models.CharField(max_length=128, verbose_name='Custom User Alias', blank=True, null=True)
    label = models.CharField(max_length=255, blank=True, null=True)
    action_url = models.TextField(verbose_name='Action URL')
    request_body = models.TextField(verbose_name='HTTP Request Body', blank=True, null=True)
    headers = models.TextField(verbose_name='HTTP Headers', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkTemplate'
        verbose_name = 'Action Link Template'
        verbose_name_plural = 'Action Link Templates'
        # keyPrefix = '07l'



class ActivityHistory(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Not Started', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey('EmailMessage', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActivityHistory'
        verbose_name = 'Activity History'
        verbose_name_plural = 'Activity History'
        # keyPrefix = 'None'



class AdditionalNumber(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    call_center = models.ForeignKey('CallCenter', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=80)
    description = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='additionalnumber_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='additionalnumber_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AdditionalNumber'
        verbose_name = 'Additional Directory Number'
        verbose_name_plural = 'Additional Directory Numbers'
        # keyPrefix = '04m'



class AggregateResult(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'AggregateResult'
        verbose_name = 'Aggregate Result'
        verbose_name_plural = 'Aggregate Result'
        # keyPrefix = 'None'



class Announcement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='announcement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='announcement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    feed_item = models.ForeignKey('FeedItem', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    expiration_date = models.DateTimeField()
    send_emails = models.BooleanField(verbose_name='Send Emails on Announcement', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(verbose_name='Is Announcement Archived', sf_read_only=models.NOT_CREATEABLE, default=False)
    parent = models.ForeignKey('CollaborationGroup', models.DO_NOTHING, related_name='announcement_parent_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Announcement'
        verbose_name = 'Announcement'
        verbose_name_plural = 'Announcements'
        # keyPrefix = '0Bt'



class ApexClass(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    status = models.CharField(max_length=40, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    is_valid = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    body_crc = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Body CRC', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    length_without_comments = models.IntegerField(verbose_name='Size Without Comments')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexclass_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexclass_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexClass'
        verbose_name = 'Apex Class'
        verbose_name_plural = 'Apex Classes'
        # keyPrefix = '01p'



class ApexComponent(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    description = models.TextField(blank=True, null=True)
    controller_type = models.CharField(max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(max_length=255, blank=True, null=True)
    markup = models.TextField()
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexcomponent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexcomponent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexComponent'
        verbose_name = 'Visualforce Component'
        verbose_name_plural = 'Visualforce Components'
        # keyPrefix = '099'



class ApexEmailNotification(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_user_set', blank=True, null=True)  # Master Detail Relationship *
    email = models.CharField(max_length=255, verbose_name='email', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexEmailNotification'
        verbose_name = 'Apex Email Notification'
        verbose_name_plural = 'Apex Email Notifications'
        # keyPrefix = '06j'



class ApexLog(models.Model):
    log_user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    log_length = models.IntegerField(verbose_name='Log Size (bytes)', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Date', sf_read_only=models.READ_ONLY)
    request = models.CharField(max_length=16, verbose_name='Request Type', sf_read_only=models.READ_ONLY)
    operation = models.CharField(max_length=128, sf_read_only=models.READ_ONLY)
    application = models.CharField(max_length=64, sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    duration_milliseconds = models.IntegerField(verbose_name='Duration (ms)', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    start_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    location = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Monitoring', None), ('Profiling', None), ('SystemLog', None), ('HeapDump', None), ('Preserved', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexLog'
        verbose_name = 'Apex Debug Log'
        verbose_name_plural = 'Apex Debug Log'
        # keyPrefix = '07L'



class ApexPage(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    description = models.TextField(blank=True, null=True)
    controller_type = models.CharField(max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(max_length=255, blank=True, null=True)
    is_available_in_touch = models.BooleanField(verbose_name='Available for Lightning Experience, Lightning Communities, and the mobile app', default=models.DEFAULTED_ON_CREATE)
    is_confirmation_token_required = models.BooleanField(verbose_name='Require CSRF protection on GET requests', default=models.DEFAULTED_ON_CREATE)
    markup = models.TextField()
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexpage_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexpage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexPage'
        verbose_name = 'Visualforce Page'
        verbose_name_plural = 'Visualforce Pages'
        # keyPrefix = '066'



class ApexPageInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apex_page_id = models.CharField(max_length=18, verbose_name='Apex Page ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    name_space_prefix = models.CharField(max_length=512, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_available_in_touch = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    master_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexPageInfo'
        verbose_name = 'Apex Page Info'
        verbose_name_plural = 'Apex Pages Info'
        # keyPrefix = '4ve'



class ApexTestQueueItem(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    status = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    extended_status = models.CharField(max_length=1000, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    test_run_result = models.ForeignKey('ApexTestRunResult', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ApexTestQueueItem'
        verbose_name = 'Apex Test Queue Item'
        verbose_name_plural = 'Apex Test Queue Items'
        # keyPrefix = '709'



class ApexTestResult(models.Model):
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    test_timestamp = models.DateTimeField(verbose_name='Time Started')
    outcome = models.CharField(max_length=40, verbose_name='Pass/Fail', choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('CompileFail', 'CompileFail'), ('Skip', 'Skip')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING)
    method_name = models.CharField(max_length=255, blank=True, null=True)
    message = models.CharField(max_length=4000, verbose_name='Error Message', blank=True, null=True)
    stack_trace = models.CharField(max_length=4000, blank=True, null=True)
    async_apex_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, blank=True, null=True)
    queue_item = models.ForeignKey(ApexTestQueueItem, models.DO_NOTHING, blank=True, null=True)
    apex_log = models.ForeignKey(ApexLog, models.DO_NOTHING, blank=True, null=True)
    apex_test_run_result = models.ForeignKey('ApexTestRunResult', models.DO_NOTHING, blank=True, null=True)
    run_time = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResult'
        verbose_name = 'Apex Test Result'
        verbose_name_plural = 'Apex Test Results'
        # keyPrefix = '07M'



class ApexTestResultLimits(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestresultlimits_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestresultlimits_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_test_result = models.ForeignKey(ApexTestResult, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    soql = models.IntegerField(verbose_name='Total number of SOQL queries issued')
    query_rows = models.IntegerField(verbose_name='Total number of records retrieved by SOQL queries')
    sosl = models.IntegerField(verbose_name='Total number of SOSL queries issued')
    dml = models.IntegerField(verbose_name='Total number of DML statements issued')
    dml_rows = models.IntegerField(verbose_name='Total number of records processed as a result of DML statements')
    cpu = models.IntegerField(verbose_name='Maximum CPU time on the Salesforce servers')
    callouts = models.IntegerField(verbose_name='Total number of callouts')
    email = models.IntegerField(verbose_name='Total number of sendEmail methods allowed')
    async_calls = models.IntegerField(verbose_name='Total number of async calls')
    mobile_push = models.IntegerField(verbose_name='Maximum number of push notification method calls allowed per Apex transaction')
    limit_context = models.CharField(max_length=255, verbose_name='LimitContext', blank=True, null=True)
    limit_exceptions = models.CharField(max_length=255, verbose_name='LimitExceptions', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResultLimits'
        verbose_name = 'Apex Test Result Limit'
        verbose_name_plural = 'Apex Test Result Limit'
        # keyPrefix = '05n'



class ApexTestRunResult(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    async_apex_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_user_set', blank=True, null=True)
    job_name = models.CharField(max_length=255, verbose_name='Name of the job', blank=True, null=True)
    is_all_tests = models.BooleanField(verbose_name='allTests', default=models.DEFAULTED_ON_CREATE)
    source = models.CharField(max_length=255, verbose_name='Client that kicked off the test run', blank=True, null=True)
    start_time = models.DateTimeField(verbose_name='Start time of the test run')
    end_time = models.DateTimeField(verbose_name='End time of the test run', blank=True, null=True)
    test_time = models.IntegerField(verbose_name='Time(ms) actually spent running tests', blank=True, null=True)
    status = models.CharField(max_length=255, verbose_name='Status of the test run', choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    classes_enqueued = models.IntegerField(verbose_name='Number of classes enqueued in this test run')
    classes_completed = models.IntegerField(verbose_name='Number of classes completed in this test run', blank=True, null=True)
    methods_enqueued = models.IntegerField(verbose_name='Number of methods enqueued in this test run', blank=True, null=True)
    methods_completed = models.IntegerField(verbose_name='Number of methods completed in this test run', blank=True, null=True)
    methods_failed = models.IntegerField(verbose_name='Number of methods failed in this test run', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestRunResult'
        verbose_name = 'Apex Test Run Result'
        verbose_name_plural = 'Apex Test Run Result'
        # keyPrefix = '05m'



class ApexTestSuite(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestsuite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestsuite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    test_suite_name = models.CharField(max_length=255)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestSuite'
        verbose_name = 'Apex Test Suite'
        verbose_name_plural = 'Apex Test Suites'
        # keyPrefix = '05F'



class ApexTrigger(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('AccountChangeEvent', None), ('AccountContactRoleChangeEvent', None), ('Asset', None), ('AssetChangeEvent', None), ('AssetRelationship', None), ('AssetTokenEvent', None), ('AssistantRecommendation', None), ('Attachment', None), ('BatchApexErrorEvent', None), ('Campaign', None), ('CampaignChangeEvent', None), ('CampaignMember', None), ('Case', None), ('CaseChangeEvent', None), ('CaseComment', None), ('ChatterActivity', None), ('ChatterMessage', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupRecord', None), ('Contact', None), ('ContactChangeEvent', None), ('ContentDistribution', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentVersion', None), ('Contract', None), ('DandBCompany', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('EngagementEvent', None), ('EngagementHistoryRollup', None), ('Event', None), ('EventChangeEvent', None), ('EventRelationChangeEvent', None), ('FeedComment', None), ('FeedItem', None), ('Goal', None), ('GoalLink', None), ('HammerResultStatus', None), ('Idea', None), ('IdeaComment', None), ('Lead', None), ('LeadChangeEvent', None), ('ListEmailChangeEvent', None), ('ListEmailSentResult', None), ('Macro', None), ('Metric', None), ('MetricDataLink', None), ('Note', None), ('Opportunity', None), ('OpportunityChangeEvent', None), ('OpportunityContactRoleChangeEvent', None), ('OpportunityLineItem', None), ('Order', None), ('OrderChangeEvent', None), ('OrderItem', None), ('OrderItemChangeEvent', None), ('OrgDeleteRequest', None), ('OrgLifecycleNotification', None), ('Partner', None), ('PersonalizationResource', None), ('Pricebook2', None), ('Product2', None), ('Product2ChangeEvent', None), ('QuickText', None), ('RecordAction', None), ('RecordOrigin', None), ('SocialPersona', None), ('Solution', None), ('StreamingChannel', None), ('Task', None), ('TaskChangeEvent', None), ('TaskRelationChangeEvent', None), ('Topic', None), ('TopicAssignment', None), ('User', None), ('UserChangeEvent', None), ('UserNavItem', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPerformanceCycle', None)], blank=True, null=True)
    usage_before_insert = models.BooleanField(verbose_name='BeforeInsert')
    usage_after_insert = models.BooleanField(verbose_name='AfterInsert')
    usage_before_update = models.BooleanField(verbose_name='BeforeUpdate')
    usage_after_update = models.BooleanField(verbose_name='AfterUpdate')
    usage_before_delete = models.BooleanField(verbose_name='BeforeDelete')
    usage_after_delete = models.BooleanField(verbose_name='AfterDelete')
    usage_is_bulk = models.BooleanField(verbose_name='IsBulk')
    usage_after_undelete = models.BooleanField(verbose_name='AfterUndelete')
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    status = models.CharField(max_length=40, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    is_valid = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    body_crc = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Body CRC', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    length_without_comments = models.IntegerField(verbose_name='Size Without Comments')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextrigger_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextrigger_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexTrigger'
        verbose_name = 'Apex Trigger'
        verbose_name_plural = 'Apex Triggers'
        # keyPrefix = '01q'



class AppMenuItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appmenuitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appmenuitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_using_admin_authorization = models.BooleanField(verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    mobile_platform = models.CharField(max_length=255, verbose_name='Mobile device OS platform', sf_read_only=models.READ_ONLY, choices=[('ios', 'iOS'), ('android', 'Android')], blank=True, null=True)
    mobile_min_os_ver = models.CharField(max_length=255, verbose_name='Minimum required mobile device OS version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_device_type = models.CharField(max_length=255, verbose_name='Type of mobile device', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_registered_device_only = models.BooleanField(verbose_name='App requires a registered mobile device', sf_read_only=models.READ_ONLY, default=False)
    mobile_app_ver = models.CharField(max_length=255, verbose_name='Version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_date = models.DateTimeField(verbose_name='Date the mobile app was most recently installed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_version = models.CharField(max_length=255, verbose_name='Most recently installed version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_binary_id = models.CharField(max_length=255, verbose_name='ID for the related mobile app binary', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_install_url = models.URLField(verbose_name='URL to install the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_enabled = models.BooleanField(verbose_name='Is this a canvas-enabled application', sf_read_only=models.READ_ONLY, default=False)
    canvas_reference_id = models.CharField(max_length=18, verbose_name='The identifier used to render the canvas application.', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_url = models.URLField(verbose_name='The canvas url for the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_access_method = models.CharField(max_length=255, verbose_name='The configured access method for the canvas application', sf_read_only=models.READ_ONLY, default='Post', choices=[('Get', 'OAuth Webflow (GET)'), ('Post', 'Signed Request (POST)')], blank=True, null=True)
    canvas_selected_locations = models.CharField(max_length=255, verbose_name='The selected/supported locations of the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_options = models.CharField(max_length=255, verbose_name='The options to hide publisher header or publisher share button', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    application_id = models.CharField(max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    user_sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    is_accessible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AppMenuItem'
        verbose_name = 'AppMenuItem'
        verbose_name_plural = 'AppMenuItems'
        # keyPrefix = '0DS'



class Asset(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='asset_parent_set', blank=True, null=True)
    root_asset = models.ForeignKey('self', models.DO_NOTHING, related_name='asset_rootasset_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, blank=True, null=True)
    is_competitor_product = models.BooleanField(verbose_name='Competitor Asset', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Asset Name')
    serial_number = models.CharField(max_length=80, blank=True, null=True)
    install_date = models.DateField(blank=True, null=True)
    purchase_date = models.DateField(blank=True, null=True)
    usage_end_date = models.DateField(blank=True, null=True)
    status = models.CharField(max_length=40, choices=[('Shipped', 'Shipped'), ('Installed', 'Installed'), ('Registered', 'Registered'), ('Obsolete', 'Obsolete'), ('Purchased', 'Purchased')], blank=True, null=True)
    price = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_owner_set')
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Asset'
        verbose_name = 'Asset'
        verbose_name_plural = 'Assets'
        # keyPrefix = '02i'



class AssetFeed(models.Model):
    parent = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetFeed'
        verbose_name = 'Asset Feed'
        verbose_name_plural = 'Asset Feed'
        # keyPrefix = 'None'



class AssetHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('AssetLevel', 'Asset Level'), ('Name', 'Asset Name'), ('Owner', 'Asset Owner'), ('AssetProvidedBy', 'Asset Provided By'), ('AssetServicedBy', 'Asset Serviced By'), ('IsCompetitorProduct', 'Competitor Asset'), ('Contact', 'Contact'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('InstallDate', 'Install Date'), ('IsInternal', 'Internal Asset'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Asset'), ('Price', 'Price'), ('Product2', 'Product'), ('PurchaseDate', 'Purchase Date'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootAsset', 'Root Asset'), ('SerialNumber', 'Serial Number'), ('Status', 'Status'), ('UsageEndDate', 'Usage End Date')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetHistory'
        verbose_name = 'Asset History'
        verbose_name_plural = 'Asset History'
        # keyPrefix = 'None'



class AssetShare(models.Model):
    asset = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    asset_access_level = models.CharField(max_length=40, verbose_name='Asset Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AssetShare'
        verbose_name = 'Asset Share'
        verbose_name_plural = 'Asset Share'
        # keyPrefix = '70a'



class AssignmentRule(models.Model):
    name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='SObject Type', sf_read_only=models.READ_ONLY, choices=[('Case', None), ('Lead', None)], blank=True, null=True)
    active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assignmentrule_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assignmentrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AssignmentRule'
        verbose_name = 'Assignment Rule'
        verbose_name_plural = 'Assignment Rules'
        # keyPrefix = '01Q'



class AssistantRecommendation(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assistantrecommendation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assistantrecommendation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    record = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Contact, Lead, Opportunity] Master Detail Relationship *
    base_score = models.DecimalField(max_digits=18, decimal_places=0)
    recommendation_type = models.CharField(max_length=255, verbose_name='Assistant Recommendation Type', choices=[('LEAD_TODAY', None), ('OPPORTUNITY_ALL_UPCOMING', None), ('OPPORTUNITY_OVERDUE', None), ('OPPORTUNITY_WITH_NO_OPEN_ACTIVITY', None), ('OPPORTUNITY_WITH_NO_RECENT_ACTIVITY', None), ('OPPORTUNITY_WITH_OVERDUE_TASK', None)])
    start_time = models.DateTimeField(default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    end_time = models.DateTimeField(default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    reason = models.TextField(blank=True, null=True)
    action_prepopulation_values = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssistantRecommendation'
        verbose_name = 'Assistant Recommendation'
        verbose_name_plural = 'Assistant Recommendations'
        # keyPrefix = '05q'



class AssistantRecommendationShare(models.Model):
    parent = models.ForeignKey(AssistantRecommendation, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AssistantRecommendationShare'
        verbose_name = 'Assistant Recommendation Share'
        verbose_name_plural = 'Assistant Recommendation Share'
        # keyPrefix = 'None'



class AsyncApexJob(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    job_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token'), ('Queueable', 'Queueable')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    job_items_processed = models.IntegerField(verbose_name='Batches Processed', sf_read_only=models.READ_ONLY)
    total_job_items = models.IntegerField(verbose_name='Total Batches', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_errors = models.IntegerField(verbose_name='Failures', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completed_date = models.DateTimeField(verbose_name='Completion Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    method_name = models.CharField(max_length=255, verbose_name='Apex Method', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extended_status = models.CharField(max_length=255, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_job = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_processed = models.CharField(max_length=15, verbose_name='Last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_processed_offset = models.IntegerField(verbose_name='Offset of last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AsyncApexJob'
        verbose_name = 'Apex Job'
        verbose_name_plural = 'Apex Jobs'
        # keyPrefix = '707'



class AttachedContentDocument(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Event, Lead, Opportunity, Order, OrderItem, Organization, Product2, Report, Site, Solution, Task, User, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datacloud', None), ('Datajourney', None), ('Identity', None), ('OData', None), ('OData4', None), ('OpenSearch', None), ('outgoingemail', None), ('SfdcOrg', None), ('SimpleURL', None), ('Wrapper', None)], blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentDocument'
        verbose_name = 'Attached Content Document'
        verbose_name_plural = 'Attached Content Documents'
        # keyPrefix = 'None'



class Attachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, Contact, Contract, EmailMessage, EmailTemplate, Event, Lead, Opportunity, Order, Product2, Solution, Task, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    name = models.CharField(max_length=255, verbose_name='File Name')
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    content_type = models.CharField(max_length=120, blank=True, null=True)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField()
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Attachment'
        verbose_name = 'Attachment'
        verbose_name_plural = 'Attachments'
        # keyPrefix = '00P'



class AuraDefinition(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    aura_definition_bundle = models.ForeignKey('AuraDefinitionBundle', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    def_type = models.CharField(max_length=255, verbose_name='Definition Type', choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15'), ('MODULE', '16')])
    format = models.CharField(max_length=255, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField()
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinition'
        verbose_name = 'Lightning Component Definition'
        verbose_name_plural = 'Lightning Component Definitions'
        # keyPrefix = '0Ad'



class AuraDefinitionBundle(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinitionbundle_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinitionbundle_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    description = models.TextField()
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundle'
        verbose_name = 'Aura Component Bundle'
        verbose_name_plural = 'Aura Component Bundles'
        # keyPrefix = '0Ab'



class AuraDefinitionBundleInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_id = models.CharField(max_length=18, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundleInfo'
        verbose_name = 'AuraDefinitionBundle Info'
        verbose_name_plural = 'AuraDefinitionBundle Infos'
        # keyPrefix = '0ab'



class AuraDefinitionInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_info_id = models.CharField(max_length=100, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_id = models.CharField(max_length=18, verbose_name='Lightning Definition ID', sf_read_only=models.READ_ONLY)
    def_type = models.CharField(max_length=255, verbose_name='Definition Type', sf_read_only=models.READ_ONLY, choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15'), ('MODULE', '16')])
    format = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionInfo'
        verbose_name = 'AuraDefinition Info'
        verbose_name_plural = 'AuraDefinition Infos'
        # keyPrefix = '0ad'



class AuthConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url = models.CharField(max_length=240, verbose_name='URL', sf_read_only=models.READ_ONLY)
    auth_options_username_password = models.BooleanField(verbose_name='UsernamePassword', sf_read_only=models.READ_ONLY)
    auth_options_saml = models.BooleanField(verbose_name='Saml', sf_read_only=models.READ_ONLY)
    auth_options_auth_provider = models.BooleanField(verbose_name='AuthProvider', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=255, verbose_name='Authentication Configuration Type', sf_read_only=models.READ_ONLY, choices=[('Org', 'Org'), ('Community', 'Community'), ('Site', 'Site'), ('Portal', 'Portal')])
    class Meta(models.Model.Meta):
        db_table = 'AuthConfig'
        verbose_name = 'Authentication Configuration'
        verbose_name_plural = 'Authentication Configurations'
        # keyPrefix = '07T'



class AuthConfigProviders(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfigproviders_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfigproviders_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    auth_config = models.ForeignKey(AuthConfig, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    auth_provider = models.ForeignKey('AuthProvider', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AuthProvider, SamlSsoConfig] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'AuthConfigProviders'
        verbose_name = 'Authentication Configuration Auth. Provider'
        verbose_name_plural = 'Authentication Configuration Auth. Providers'
        # keyPrefix = '07U'



class AuthProvider(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    provider_type = models.CharField(max_length=40, choices=[('Facebook', 'Facebook'), ('Janrain', 'Janrain'), ('Salesforce', 'Salesforce'), ('OpenIdConnect', 'Open ID Connect'), ('MicrosoftACS', 'Microsoft Access Control Service'), ('LinkedIn', 'LinkedIn'), ('Twitter', 'Twitter'), ('Google', 'Google'), ('GitHub', 'GitHub'), ('Custom', 'Custom')])
    friendly_name = models.CharField(max_length=32, verbose_name='Name')
    developer_name = models.CharField(max_length=32, verbose_name='URL Suffix')
    registration_handler = models.ForeignKey(ApexClass, models.DO_NOTHING, related_name='authprovider_registrationhandler_set', blank=True, null=True)
    execution_user = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    consumer_key = models.CharField(max_length=256, blank=True, null=True)
    consumer_secret = models.CharField(max_length=100, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    error_url = models.CharField(max_length=500, verbose_name='Custom Error URL', blank=True, null=True)
    authorize_url = models.URLField(verbose_name='Authorize Endpoint URL', blank=True, null=True)
    token_url = models.URLField(verbose_name='Token Endpoint URL', blank=True, null=True)
    user_info_url = models.URLField(verbose_name='User Info Endpoint URL', blank=True, null=True)
    default_scopes = models.CharField(max_length=256, blank=True, null=True)
    id_token_issuer = models.CharField(max_length=1024, verbose_name='Token Issuer', blank=True, null=True)
    options_send_access_token_in_header = models.BooleanField(verbose_name='Send access token in header')
    options_send_client_credentials_in_header = models.BooleanField(verbose_name='Send client credentials in header')
    options_include_org_id_in_id = models.BooleanField(verbose_name="Include identity organization's organization ID for third-party account linkage")
    icon_url = models.URLField(verbose_name='Icon URL', blank=True, null=True)
    logout_url = models.URLField(verbose_name='Custom Logout URL', blank=True, null=True)
    plugin = models.ForeignKey(ApexClass, models.DO_NOTHING, related_name='authprovider_plugin_set', blank=True, null=True)
    custom_metadata_type_record = models.CharField(max_length=15, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuthProvider'
        verbose_name = 'Auth. Provider'
        verbose_name_plural = 'Auth. Providers'
        # keyPrefix = '0SO'



class AuthSession(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Updated', sf_read_only=models.READ_ONLY)
    num_seconds_valid = models.IntegerField(verbose_name='Valid For', sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')])
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_type = models.CharField(max_length=40, verbose_name='Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_security_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('LOW', None), ('STANDARD', None), ('HIGH_ASSURANCE', None)], blank=True, null=True)
    logout_url = models.CharField(max_length=1500, verbose_name='Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_history = models.ForeignKey('LoginHistory', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_geo = models.ForeignKey('LoginGeo', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_current = models.BooleanField(verbose_name='Current Session', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AuthSession'
        verbose_name = 'Auth Session'
        verbose_name_plural = 'Auth Sessions'
        # keyPrefix = '0Ak'



class BackgroundOperation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Background Operation Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='backgroundoperation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='backgroundoperation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    submitted_at = models.DateTimeField(verbose_name='Submitted', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', None), ('Scheduled', None), ('Canceled', None), ('Merged', None), ('Waiting', None), ('Running', None), ('Error', None), ('Complete', None)], blank=True, null=True)
    execution_group = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_group = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_number = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_leader = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    started_at = models.DateTimeField(verbose_name='Started', sf_read_only=models.READ_ONLY, blank=True, null=True)
    finished_at = models.DateTimeField(verbose_name='Finished', sf_read_only=models.READ_ONLY, blank=True, null=True)
    worker_uri = models.CharField(max_length=255, verbose_name='Worker URI', sf_read_only=models.READ_ONLY, blank=True, null=True)
    timeout = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    expires_at = models.DateTimeField(verbose_name='ExpiresAt', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_followers = models.IntegerField(verbose_name='NumFollowers', sf_read_only=models.READ_ONLY, blank=True, null=True)
    process_after = models.DateTimeField(verbose_name='ProcessAfter', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_key = models.CharField(max_length=255, verbose_name='ParentKey', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_limit = models.IntegerField(verbose_name='RetryLimit', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_count = models.IntegerField(verbose_name='RetryCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_backoff = models.IntegerField(verbose_name='RetryBackoff', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BackgroundOperation'
        verbose_name = 'Background Operation'
        verbose_name_plural = 'Background Operations'
        # keyPrefix = '08P'



class BrandTemplate(models.Model):
    name = models.CharField(max_length=255, verbose_name='Brand Template Name')
    developer_name = models.CharField(max_length=80, verbose_name='Letterhead Unique Name', default=models.DEFAULTED_ON_CREATE)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.CharField(max_length=1000, blank=True, null=True)
    value = models.TextField()
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BrandTemplate'
        verbose_name = 'Letterhead'
        verbose_name_plural = 'Letterheads'
        # keyPrefix = '016'



class BusinessHours(models.Model):
    name = models.CharField(max_length=80, verbose_name='Business Hours Name')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    is_default = models.BooleanField(verbose_name='Default Business Hours', default=models.DEFAULTED_ON_CREATE)
    sunday_start_time = models.TimeField(verbose_name='Sunday Start', blank=True, null=True)
    sunday_end_time = models.TimeField(verbose_name='Sunday End', blank=True, null=True)
    monday_start_time = models.TimeField(verbose_name='Monday Start', blank=True, null=True)
    monday_end_time = models.TimeField(verbose_name='Monday End', blank=True, null=True)
    tuesday_start_time = models.TimeField(verbose_name='Tuesday Start', blank=True, null=True)
    tuesday_end_time = models.TimeField(verbose_name='Tuesday End', blank=True, null=True)
    wednesday_start_time = models.TimeField(verbose_name='Wednesday Start', blank=True, null=True)
    wednesday_end_time = models.TimeField(verbose_name='Wednesday End', blank=True, null=True)
    thursday_start_time = models.TimeField(verbose_name='Thursday Start', blank=True, null=True)
    thursday_end_time = models.TimeField(verbose_name='Thursday End', blank=True, null=True)
    friday_start_time = models.TimeField(verbose_name='Friday Start', blank=True, null=True)
    friday_end_time = models.TimeField(verbose_name='Friday End', blank=True, null=True)
    saturday_start_time = models.TimeField(verbose_name='Saturday Start', blank=True, null=True)
    saturday_end_time = models.TimeField(verbose_name='Saturday End', blank=True, null=True)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Fiji', '(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (New South Wales) (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (South Australia) (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Asia/Tehran', '(GMT+03:30) Iran Standard Time (Asia/Tehran)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Time (Africa/Casablanca)'), ('Europe/Amsterdam', '(GMT+01:00) Central European Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) Eastern Greenland Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('America/Sao_Paulo', '(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/St_Johns', '(GMT-03:30) Newfoundland Standard Time (America/St_Johns)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Halifax', '(GMT-04:00) Atlantic Standard Time (America/Halifax)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('Atlantic/Bermuda', '(GMT-04:00) Atlantic Standard Time (Atlantic/Bermuda)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Indiana/Indianapolis', '(GMT-05:00) Eastern Standard Time (America/Indiana/Indianapolis)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/New_York', '(GMT-05:00) Eastern Standard Time (America/New_York)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Chicago', '(GMT-06:00) Central Standard Time (America/Chicago)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Denver', '(GMT-07:00) Mountain Standard Time (America/Denver)'), ('America/Mazatlan', '(GMT-07:00) Mountain Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Los_Angeles', '(GMT-08:00) Pacific Standard Time (America/Los_Angeles)'), ('America/Tijuana', '(GMT-08:00) Pacific Standard Time (America/Tijuana)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Anchorage', '(GMT-09:00) Alaska Standard Time (America/Anchorage)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('America/Adak', '(GMT-10:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businesshours_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businesshours_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BusinessHours'
        verbose_name = 'Business Hours'
        verbose_name_plural = 'Business Hours'
        # keyPrefix = '01m'



class BusinessProcess(models.Model):
    name = models.CharField(max_length=80)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Entity Enumeration Or ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('Lead', None), ('Opportunity', None), ('Solution', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businessprocess_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businessprocess_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'



class CallCenter(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    internal_name = models.CharField(max_length=240, sf_read_only=models.NOT_UPDATEABLE)
    version = models.DecimalField(max_digits=18, decimal_places=3, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    adapter_url = models.CharField(max_length=2000, verbose_name='CTI Adapter URL', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    custom_settings = models.CharField(max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='callcenter_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='callcenter_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'



class Campaign(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    type = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Conference', 'Conference'), ('Webinar', 'Webinar'), ('Trade Show', 'Trade Show'), ('Public Relations', 'Public Relations'), ('Partners', 'Partners'), ('Referral Program', 'Referral Program'), ('Advertisement', 'Advertisement'), ('Banner Ads', 'Banner Ads'), ('Direct Mail', 'Direct Mail'), ('Email', 'Email'), ('Telemarketing', 'Telemarketing'), ('Other', 'Other')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Planned', 'Planned'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Aborted', 'Aborted')], blank=True, null=True)
    start_date = models.DateField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Expected Revenue in Campaign', blank=True, null=True)
    budgeted_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Budgeted Cost in Campaign', blank=True, null=True)
    actual_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Actual Cost in Campaign', blank=True, null=True)
    expected_response = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Expected Response (%)', blank=True, null=True)
    number_sent = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Num Sent in Campaign', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.TextField(blank=True, null=True)
    number_of_leads = models.IntegerField(verbose_name='Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_converted_leads = models.IntegerField(verbose_name='Converted Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_contacts = models.IntegerField(verbose_name='Contacts in Campaign', sf_read_only=models.READ_ONLY)
    number_of_responses = models.IntegerField(verbose_name='Responses in Campaign', sf_read_only=models.READ_ONLY)
    number_of_opportunities = models.IntegerField(verbose_name='Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    number_of_won_opportunities = models.IntegerField(verbose_name='Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_all_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_won_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign_member_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Campaign'
        verbose_name = 'Campaign'
        verbose_name_plural = 'Campaigns'
        # keyPrefix = '701'



class CampaignFeed(models.Model):
    parent = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignFeed'
        verbose_name = 'Campaign Feed'
        verbose_name_plural = 'Campaign Feed'
        # keyPrefix = 'None'



class CampaignHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('ActualCost', 'Actual Cost in Campaign'), ('BudgetedCost', 'Budgeted Cost in Campaign'), ('CampaignMemberRecordType', 'Campaign Member Type'), ('Name', 'Campaign Name'), ('Owner', 'Campaign Owner'), ('created', 'Created.'), ('Description', 'Description'), ('EndDate', 'End Date'), ('ExpectedResponse', 'Expected Response (%)'), ('ExpectedRevenue', 'Expected Revenue in Campaign'), ('feedEvent', 'Feed event'), ('NumberSent', 'Num Sent in Campaign'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Campaign'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignHistory'
        verbose_name = 'Campaign Field History'
        verbose_name_plural = 'Campaign Field History'
        # keyPrefix = 'None'



class CampaignMember(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    lead = models.ForeignKey('Lead', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, related_name='campaignmember_contact_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    status = models.CharField(max_length=40, choices=[('Planned', 'Planned'), ('Received', 'Received'), ('Responded', 'Responded'), ('Sent', 'Sent')], blank=True, null=True)
    has_responded = models.BooleanField(verbose_name='Responded', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    first_responded_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=40, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    do_not_call = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_email = models.BooleanField(verbose_name='Email Opt Out', sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_fax = models.BooleanField(verbose_name='Fax Opt Out', sf_read_only=models.READ_ONLY, default=False)
    lead_source = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Web', 'Web'), ('Phone Inquiry', 'Phone Inquiry'), ('Partner Referral', 'Partner Referral'), ('Purchased List', 'Purchased List'), ('Other', 'Other')], blank=True, null=True)
    company_or_account = models.CharField(max_length=255, verbose_name='Company (Account)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_or_contact = models.ForeignKey('Contact', models.DO_NOTHING, related_name='campaignmember_leadorcontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    lead_or_contact_owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    class Meta(models.Model.Meta):
        db_table = 'CampaignMember'
        verbose_name = 'Campaign Member'
        verbose_name_plural = 'Campaign Members'
        # keyPrefix = '00v'



class CampaignMemberStatus(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label = models.CharField(max_length=765, verbose_name='Member Status')
    sort_order = models.IntegerField(blank=True, null=True)
    is_default = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    has_responded = models.BooleanField(verbose_name='Responded', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmemberstatus_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmemberstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CampaignMemberStatus'
        verbose_name = 'Campaign Member Status'
        verbose_name_plural = 'Campaign Member Statuses'
        # keyPrefix = '01Y'



class CampaignShare(models.Model):
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    campaign_access_level = models.CharField(max_length=40, verbose_name='Campaign Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CampaignShare'
        verbose_name = 'Campaign Share'
        verbose_name_plural = 'Campaign Share'
        # keyPrefix = '08s'



class Case(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    supplied_name = models.CharField(max_length=80, verbose_name='Name', blank=True, null=True)
    supplied_email = models.EmailField(verbose_name='Email Address', blank=True, null=True)
    supplied_phone = models.CharField(max_length=40, verbose_name='Phone', blank=True, null=True)
    supplied_company = models.CharField(max_length=80, verbose_name='Company', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Case Type', choices=[('Mechanical', 'Mechanical'), ('Electrical', 'Electrical'), ('Electronic', 'Electronic'), ('Structural', 'Structural'), ('Other', 'Other')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('New', 'New'), ('Working', 'Working'), ('Escalated', 'Escalated'), ('Closed', 'Closed')], blank=True, null=True)
    reason = models.CharField(max_length=40, verbose_name='Case Reason', choices=[('Installation', 'Installation'), ('Equipment Complexity', 'Equipment Complexity'), ('Performance', 'Performance'), ('Breakdown', 'Breakdown'), ('Equipment Design', 'Equipment Design'), ('Feedback', 'Feedback'), ('Other', 'Other')], blank=True, null=True)
    origin = models.CharField(max_length=40, verbose_name='Case Origin', choices=[('Phone', 'Phone'), ('Email', 'Email'), ('Web', 'Web')], blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    closed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_escalated = models.BooleanField(verbose_name='Escalated', default=models.DEFAULTED_ON_CREATE)
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='case_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='case_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    contact_phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_mobile = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    engineering_req_number = models.CharField(custom=True, max_length=12, blank=True, null=True)
    slaviolation = models.CharField(custom=True, db_column='SLAViolation__c', max_length=255, verbose_name='SLA Violation', choices=[('No', 'No'), ('Yes', 'Yes')], blank=True, null=True)
    product = models.CharField(custom=True, max_length=255, choices=[('GC1040', 'GC1040'), ('GC1060', 'GC1060'), ('GC3020', 'GC3020'), ('GC3040', 'GC3040'), ('GC3060', 'GC3060'), ('GC5020', 'GC5020'), ('GC5040', 'GC5040'), ('GC5060', 'GC5060'), ('GC1020', 'GC1020')], blank=True, null=True)
    potential_liability = models.CharField(custom=True, max_length=255, choices=[('No', 'No'), ('Yes', 'Yes')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Case'
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'
        # keyPrefix = '500'



class CaseComment(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_published = models.BooleanField(verbose_name='Published', default=models.DEFAULTED_ON_CREATE)
    comment_body = models.TextField(verbose_name='Body', blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecomment_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecomment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseComment'
        verbose_name = 'Case Comment'
        verbose_name_plural = 'Case Comments'
        # keyPrefix = '00a'



class CaseContactRole(models.Model):
    cases = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Technical Contact', 'Technical Contact'), ('Business Contact', 'Business Contact'), ('Decision Maker', 'Decision Maker'), ('Other', 'Other')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseContactRole'
        verbose_name = 'Case Contact Role'
        verbose_name_plural = 'Case Contact Role'
        # keyPrefix = '03j'



class CaseFeed(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseFeed'
        verbose_name = 'Case Feed'
        verbose_name_plural = 'Case Feed'
        # keyPrefix = 'None'



class CaseHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Asset', 'Asset'), ('BusinessHours', 'Business Hours'), ('Origin', 'Case Origin'), ('Owner', 'Case Owner'), ('Reason', 'Case Reason'), ('closed', 'Closed.'), ('IsClosedOnCreate', 'Closed When Created'), ('Contact', 'Contact Name'), ('created', 'Created.'), ('Description', 'Description'), ('EngineeringReqNumber__c', 'Engineering Req Number'), ('IsEscalated', 'Escalated'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ownerEscalated', 'Owner (Escalation)'), ('Parent', 'Parent Case'), ('PotentialLiability__c', 'Potential Liability'), ('Priority', 'Priority'), ('Product__c', 'Product'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SLAViolation__c', 'SLA Violation'), ('Status', 'Status'), ('Subject', 'Subject'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseHistory'
        verbose_name = 'Case History'
        verbose_name_plural = 'Case History'
        # keyPrefix = 'None'



class CaseShare(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    case_access_level = models.CharField(max_length=40, verbose_name='Case Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseShare'
        verbose_name = 'Case Share'
        verbose_name_plural = 'Case Share'
        # keyPrefix = '01n'



class CaseSolution(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    solution = models.ForeignKey('Solution', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseSolution'
        verbose_name = 'Case Solution'
        verbose_name_plural = 'Case Solution'
        # keyPrefix = '010'



class CaseStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casestatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casestatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseStatus'
        verbose_name = 'Case Status Value'
        verbose_name_plural = 'Case Status Value'
        # keyPrefix = 'None'



class CaseTeamMember(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, User] Master Detail Relationship *
    team_template_member = models.ForeignKey('CaseTeamTemplateMember', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    team_role = models.ForeignKey('CaseTeamRole', models.DO_NOTHING)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteammember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteammember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamMember'
        verbose_name = 'Case Team Member'
        verbose_name_plural = 'Case Team Member'
        # keyPrefix = 'None'



class CaseTeamRole(models.Model):
    name = models.CharField(max_length=80)
    access_level = models.CharField(max_length=40, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    preferences_visible_in_csp = models.BooleanField(db_column='PreferencesVisibleInCSP', verbose_name='Visible in Customer Portal')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamRole'
        verbose_name = 'Case Team Member Role'
        verbose_name_plural = 'Case Team Member Role'
        # keyPrefix = 'None'



class CaseTeamTemplate(models.Model):
    name = models.CharField(max_length=80)
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplate'
        verbose_name = 'Predefined Case Team'
        verbose_name_plural = 'Predefined Case Team'
        # keyPrefix = 'None'



class CaseTeamTemplateMember(models.Model):
    team_template = models.ForeignKey(CaseTeamTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    member = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, User] Master Detail Relationship *
    team_role = models.ForeignKey(CaseTeamRole, models.DO_NOTHING, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplatemember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplatemember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateMember'
        verbose_name = 'Predefined Case Team Member'
        verbose_name_plural = 'Predefined Case Team Member'
        # keyPrefix = 'None'



class CaseTeamTemplateRecord(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    team_template = models.ForeignKey(CaseTeamTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateRecord'
        verbose_name = 'Predefined Case Team Record'
        verbose_name_plural = 'Predefined Case Team Record'
        # keyPrefix = 'None'



class CategoryData(models.Model):
    category_node = models.ForeignKey('CategoryNode', models.DO_NOTHING)  # Master Detail Relationship *
    related_sobject = models.ForeignKey('Solution', models.DO_NOTHING)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorydata_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorydata_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryData'
        verbose_name = 'Category Data'
        verbose_name_plural = 'Category Data'
        # keyPrefix = '02o'



class CategoryNode(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    master_label = models.CharField(max_length=40, verbose_name='Name')
    sort_order = models.IntegerField(blank=True, null=True)
    sort_style = models.CharField(max_length=40, verbose_name='Subcategory Sort Style', choices=[('custom', 'Custom Order'), ('alphabetical', 'Alphabetical Order')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynode_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynode_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryNode'
        verbose_name = 'Category Node'
        verbose_name_plural = 'Category Nodes'
        # keyPrefix = '02n'



class ChatterActivity(models.Model):
    parent = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    post_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    comment_received_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_received_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    influence_raw_rank = models.IntegerField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ChatterActivity'
        verbose_name = 'Chatter Activity'
        verbose_name_plural = 'Chatter Activity'
        # keyPrefix = '0ca'



class ClientBrowser(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    full_user_agent = models.CharField(max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    proxy_info = models.CharField(max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_update = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ClientBrowser'
        verbose_name = 'Client Browser'
        verbose_name_plural = 'Client Browser'
        # keyPrefix = '713'



class CollaborationGroup(models.Model):
    name = models.CharField(max_length=40)
    member_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_owner_set')
    collaboration_type = models.CharField(max_length=40, verbose_name='Access Type', choices=[('Public', 'Public'), ('Private', 'Private')])
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_feed_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    information_title = models.CharField(max_length=30, blank=True, null=True)
    information_body = models.TextField(verbose_name='Information', blank=True, null=True)
    has_private_fields_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    can_have_guests = models.BooleanField(verbose_name='Allow customers', default=models.DEFAULTED_ON_CREATE)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_archived = models.BooleanField(verbose_name='Archive', default=models.DEFAULTED_ON_CREATE)
    is_auto_archive_disabled = models.BooleanField(verbose_name='Disable automatic archiving', default=models.DEFAULTED_ON_CREATE)
    announcement = models.ForeignKey(Announcement, models.DO_NOTHING, blank=True, null=True)
    group_email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_broadcast = models.BooleanField(verbose_name='Broadcast Only', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroup'
        verbose_name = 'Group'
        verbose_name_plural = 'Groups'
        # keyPrefix = '0F9'



class CollaborationGroupFeed(models.Model):
    parent = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupFeed'
        verbose_name = 'Group Feed'
        verbose_name_plural = 'Group Feed'
        # keyPrefix = 'None'



class CollaborationGroupMember(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_member_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    collaboration_role = models.CharField(max_length=40, verbose_name='Group Member Role', choices=[('Admin', 'Manager'), ('Standard', 'Member')], blank=True, null=True)
    notification_frequency = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_feed_access_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = '0FB'



class CollaborationGroupMemberRequest(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    requester = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_requester_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    response_message = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Pending', None), ('Accepted', None), ('Declined', None)])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMemberRequest'
        verbose_name = 'Group Member Request'
        verbose_name_plural = 'Group Member Requests'
        # keyPrefix = '0I5'



class CollaborationGroupRecord(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgrouprecord_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgrouprecord_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Campaign, Case, Contact, Contract, Lead, Opportunity] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupRecord'
        verbose_name = 'Group Record'
        verbose_name_plural = 'Group Records'
        # keyPrefix = '0Aa'



class CollaborationInvitation(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shared_entity = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [CollaborationGroup, User] Master Detail Relationship *
    inviter = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_inviter_set', sf_read_only=models.READ_ONLY)
    invited_user_email = models.CharField(max_length=240, verbose_name='Invited Email', sf_read_only=models.NOT_UPDATEABLE)
    invited_user_email_normalized = models.EmailField(verbose_name='Invited Email (Normalized)', sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, verbose_name='Invitation Status', sf_read_only=models.READ_ONLY, choices=[('Sent', None), ('Accepted', None), ('Canceled', None)])
    optional_message = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationInvitation'
        verbose_name = 'Chatter Invitation'
        verbose_name_plural = 'Chatter Invitations'
        # keyPrefix = '0H1'



class CombinedAttachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Event, Lead, Opportunity, Order, OrderItem, Organization, Product2, Report, Site, Solution, Task, User, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    record_type = models.CharField(max_length=30, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='combinedattachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='combinedattachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datacloud', None), ('Datajourney', None), ('Identity', None), ('OData', None), ('OData4', None), ('OpenSearch', None), ('outgoingemail', None), ('SfdcOrg', None), ('SimpleURL', None), ('Wrapper', None)], blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CombinedAttachment'
        verbose_name = 'Note, Attachment, Google Doc And File'
        verbose_name_plural = 'Notes, Attachments, Google Docs And Files'
        # keyPrefix = 'None'



class Community(models.Model):
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='community_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='community_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    is_published = models.BooleanField(verbose_name='Show In Portal', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Community'
        verbose_name = 'Zone'
        verbose_name_plural = 'Zones'
        # keyPrefix = '09a'



class ConnectedApplication(models.Model):
    name = models.CharField(max_length=80, verbose_name='Connected App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='connectedapplication_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='connectedapplication_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    options_allow_admin_approved_users_only = models.BooleanField(verbose_name='AllowAdminApprovedUsersOnly', sf_read_only=models.READ_ONLY)
    options_refresh_token_validity_metric = models.BooleanField(verbose_name='RefreshTokenValidityMetric', sf_read_only=models.READ_ONLY)
    options_has_session_level_policy = models.BooleanField(verbose_name='HasSessionLevelPolicy', sf_read_only=models.READ_ONLY)
    options_is_internal = models.BooleanField(verbose_name='isInternal', sf_read_only=models.READ_ONLY)
    mobile_session_timeout = models.CharField(max_length=40, verbose_name='Require PIN after:', sf_read_only=models.READ_ONLY, default='10', choices=[('1', '1 minute'), ('5', '5 minutes'), ('10', '10 minutes'), ('30', '30 minutes'), ('60', '60 minutes'), ('120', '120 minutes'), ('180', '180 minutes'), ('240', '240 minutes')], blank=True, null=True)
    pin_length = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], blank=True, null=True)
    start_url = models.URLField(verbose_name='Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(verbose_name='Mobile Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    refresh_token_validity_period = models.IntegerField(verbose_name='Refresh Token Policy:', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ConnectedApplication'
        verbose_name = 'Connected App'
        verbose_name_plural = 'Connected Apps'
        # keyPrefix = '0H4'



class Contact(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    other_street = models.TextField(blank=True, null=True)
    other_city = models.CharField(max_length=40, blank=True, null=True)
    other_state = models.CharField(max_length=80, verbose_name='Other State/Province', blank=True, null=True)
    other_postal_code = models.CharField(max_length=20, verbose_name='Other Zip/Postal Code', blank=True, null=True)
    other_country = models.CharField(max_length=80, blank=True, null=True)
    other_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    other_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    mailing_street = models.TextField(blank=True, null=True)
    mailing_city = models.CharField(max_length=40, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, verbose_name='Mailing State/Province', blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True, null=True)
    mailing_country = models.CharField(max_length=80, blank=True, null=True)
    mailing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Business Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Business Fax', blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    home_phone = models.CharField(max_length=40, blank=True, null=True)
    other_phone = models.CharField(max_length=40, blank=True, null=True)
    assistant_phone = models.CharField(max_length=40, verbose_name='Asst. Phone', blank=True, null=True)
    reports_to = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_reportsto_set', blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    title = models.CharField(max_length=128, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    assistant_name = models.CharField(max_length=40, verbose_name="Assistant's Name", blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Web', 'Web'), ('Phone Inquiry', 'Phone Inquiry'), ('Partner Referral', 'Partner Referral'), ('Purchased List', 'Purchased List'), ('Other', 'Other')], blank=True, null=True)
    birthdate = models.DateField(blank=True, null=True)
    description = models.TextField(verbose_name='Contact Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_curequest_date = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(blank=True, null=True)
    is_email_bounced = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    clean_status = models.CharField(max_length=40, choices=[('Matched', 'In Sync'), ('Different', 'Different'), ('Acknowledged', 'Reviewed'), ('NotFound', 'Not Found'), ('Inactive', 'Inactive'), ('Pending', 'Not Compared'), ('SelectMatch', 'Select Match'), ('Skipped', 'Skipped')], blank=True, null=True)
    level = models.CharField(custom=True, max_length=255, choices=[('Secondary', 'Secondary'), ('Tertiary', 'Tertiary'), ('Primary', 'Primary')], blank=True, null=True)
    languages = models.CharField(custom=True, max_length=100, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'



class ContactCleanInfo(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Contact Clean Info Name', sf_read_only=models.NOT_CREATEABLE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactcleaninfo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactcleaninfo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_matched_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_status_changed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_status_changed_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactcleaninfo_laststatuschangedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_inactive = models.BooleanField(verbose_name='Contact Status in Salesforce', sf_read_only=models.NOT_CREATEABLE, default=False)
    first_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_status_data_dot_com = models.CharField(max_length=255, verbose_name='Contact Status per Data.com', sf_read_only=models.READ_ONLY, choices=[('IsActiveContactDataDotCom', 'Contact is Active per Data.com'), ('WrongPhoneDataDotCom', 'Phone is Wrong per Data.com'), ('WrongEmailDataDotCom', 'Email is Wrong per Data.com'), ('WrongPhoneAndEmailDataDotCom', 'Phone and Email are Wrong per Data.com'), ('NotAtCompanyContactDataDotCom', 'Contact Not at Company per Data.com'), ('InactiveDataDotCom', 'Contact is Inactive per Data.com'), ('CompanyOutOfBusinessDataDotCom', 'Company this contact belongs to is out of business per Data.com'), ('CompanyNeverExistedDataDotCom', 'Company this contact belongs to never existed per Data.com'), ('DeadEmailDomainDataDotCom', 'Email address is invalid per Data.com')], blank=True, null=True)
    is_reviewed_name = models.BooleanField(verbose_name='Name is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_email = models.BooleanField(verbose_name='Email is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_phone = models.BooleanField(verbose_name='Phone is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_address = models.BooleanField(verbose_name='Address is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_title = models.BooleanField(verbose_name='Title is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_different_first_name = models.BooleanField(verbose_name='First Name is Different', sf_read_only=models.READ_ONLY)
    is_different_last_name = models.BooleanField(verbose_name='Last Name is Different', sf_read_only=models.READ_ONLY)
    is_different_email = models.BooleanField(verbose_name='Email is Different', sf_read_only=models.READ_ONLY)
    is_different_phone = models.BooleanField(verbose_name='Phone is Different', sf_read_only=models.READ_ONLY)
    is_different_street = models.BooleanField(verbose_name='Street is Different', sf_read_only=models.READ_ONLY)
    is_different_city = models.BooleanField(verbose_name='City is Different', sf_read_only=models.READ_ONLY)
    is_different_state = models.BooleanField(verbose_name='State is Different', sf_read_only=models.READ_ONLY)
    is_different_postal_code = models.BooleanField(verbose_name='ZIP is Different', sf_read_only=models.READ_ONLY)
    is_different_country = models.BooleanField(verbose_name='Country is Different', sf_read_only=models.READ_ONLY)
    is_different_title = models.BooleanField(verbose_name='Title is Different', sf_read_only=models.READ_ONLY)
    is_different_state_code = models.BooleanField(verbose_name='State Code is Different', sf_read_only=models.READ_ONLY)
    is_different_country_code = models.BooleanField(verbose_name='Country Code is Different', sf_read_only=models.READ_ONLY)
    cleaned_by_job = models.BooleanField(verbose_name='Cleaned by Job', sf_read_only=models.READ_ONLY)
    cleaned_by_user = models.BooleanField(verbose_name='Cleaned by User', sf_read_only=models.READ_ONLY)
    is_flagged_wrong_name = models.BooleanField(verbose_name='Name is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_email = models.BooleanField(verbose_name='Email is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_phone = models.BooleanField(verbose_name='Phone is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_address = models.BooleanField(verbose_name='Address is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_title = models.BooleanField(verbose_name='Title is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    data_dot_com_id = models.CharField(max_length=20, verbose_name='Data.com ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactCleanInfo'
        verbose_name = 'Contact Clean Info'
        verbose_name_plural = 'Contact Clean Info'
        # keyPrefix = '1CC'



class ContactFeed(models.Model):
    parent = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactFeed'
        verbose_name = 'Contact Feed'
        verbose_name_plural = 'Contact Feed'
        # keyPrefix = 'None'



class ContactHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('AssistantName', 'Assistant'), ('AssistantPhone', 'Asst. Phone'), ('Birthdate', 'Birthdate'), ('CleanStatus', 'Clean Status'), ('contactMerged', 'Contact Merged'), ('Owner', 'Contact Owner'), ('RecordType', 'Contact Record Type'), ('created', 'Created.'), ('contactCreatedFromLead', 'Created by lead convert'), ('Jigsaw', 'Data.com Key'), ('Department', 'Department'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('HomePhone', 'Home Phone'), ('Languages__c', 'Languages'), ('LastName', 'Last Name'), ('contactUpdatedByLead', 'Lead converted to Contact'), ('LeadSource', 'Lead Source'), ('Level__c', 'Level'), ('MailingAddress', 'Mailing Address'), ('MailingCity', 'Mailing City'), ('MailingCountry', 'Mailing Country'), ('MailingGeocodeAccuracy', 'Mailing Geocode Accuracy'), ('MailingLatitude', 'Mailing Latitude'), ('MailingLongitude', 'Mailing Longitude'), ('MailingState', 'Mailing State/Province'), ('MailingStreet', 'Mailing Street'), ('MailingPostalCode', 'Mailing Zip/Postal Code'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('OtherAddress', 'Other Address'), ('OtherCity', 'Other City'), ('OtherCountry', 'Other Country'), ('OtherGeocodeAccuracy', 'Other Geocode Accuracy'), ('OtherLatitude', 'Other Latitude'), ('OtherLongitude', 'Other Longitude'), ('OtherPhone', 'Other Phone'), ('OtherState', 'Other State/Province'), ('OtherStreet', 'Other Street'), ('OtherPostalCode', 'Other Zip/Postal Code'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', 'Phone'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ReportsTo', 'Reports To'), ('Salutation', 'Salutation'), ('Title', 'Title')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactHistory'
        verbose_name = 'Contact History'
        verbose_name_plural = 'Contact History'
        # keyPrefix = 'None'



class ContactShare(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    contact_access_level = models.CharField(max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContactShare'
        verbose_name = 'Contact Share'
        verbose_name_plural = 'Contact Share'
        # keyPrefix = '03s'



class ContentAsset(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentasset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentasset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, related_name='contentasset_contentdocument_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentAsset'
        verbose_name = 'Asset File'
        verbose_name_plural = 'Asset Files'
        # keyPrefix = '03S'



class ContentDistribution(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_createdby_set', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_owner_set')  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=100, verbose_name='Content Delivery Name')
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Account, Campaign, Case, Contact, EmailMessage, Lead, Opportunity] Master Detail Relationship *
    preferences_allow_pdfdownload = models.BooleanField(db_column='PreferencesAllowPDFDownload', verbose_name='Allow Download as PDF')
    preferences_allow_original_download = models.BooleanField(verbose_name='Allow Download in Original Format')
    preferences_password_required = models.BooleanField(verbose_name='Require Password to Access Content')
    preferences_notify_on_visit = models.BooleanField(verbose_name='Notify Me of First View or Download')
    preferences_link_latest_version = models.BooleanField(verbose_name='Content Delivery Opens Latest Version')
    preferences_allow_view_in_browser = models.BooleanField(verbose_name='Allow View in the Browser')
    preferences_expires = models.BooleanField(verbose_name='Content Delivery Expires')
    preferences_notify_rndtn_complete = models.BooleanField(verbose_name='Email when Preview Images are Ready')
    expiry_date = models.DateTimeField(verbose_name='Expiration Date', blank=True, null=True)
    password = models.CharField(max_length=36, sf_read_only=models.READ_ONLY, blank=True, null=True)
    view_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_view_date = models.DateTimeField(verbose_name='First Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_view_date = models.DateTimeField(verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    distribution_public_url = models.CharField(max_length=256, verbose_name='External Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistribution'
        verbose_name = 'Content Delivery'
        verbose_name_plural = 'Content Deliveries'
        # keyPrefix = '05D'



class ContentDistributionView(models.Model):
    distribution = models.ForeignKey(ContentDistribution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    parent_view = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='View Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_internal = models.BooleanField(verbose_name='Internal View', sf_read_only=models.READ_ONLY, default=False)
    is_download = models.BooleanField(verbose_name='File Downloaded', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistributionView'
        verbose_name = 'Content Delivery View'
        verbose_name_plural = 'Content Delivery Views'
        # keyPrefix = '05H'



class ContentDocument(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    archived_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_archivedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    archived_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_owner_set', sf_read_only=models.NOT_CREATEABLE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE)
    publish_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    latest_published_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, related_name='contentdocument_latestpublishedversion_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)  # Master Detail Relationship *
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.NOT_CREATEABLE, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    content_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_asset = models.ForeignKey(ContentAsset, models.DO_NOTHING, related_name='contentdocument_contentasset_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocument'
        verbose_name = 'Content Document'
        verbose_name_plural = 'Content Documents'
        # keyPrefix = '069'



class ContentDocumentFeed(models.Model):
    parent = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocumentfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocumentfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentFeed'
        verbose_name = 'ContentDocument Feed'
        verbose_name_plural = 'ContentDocument Feed'
        # keyPrefix = 'None'



class ContentDocumentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ArchivedBy', 'Archived By'), ('ArchivedDate', 'Archived Date'), ('ContentAsset', 'Asset File Details'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('DeletedDate', 'Deleted Date'), ('contentDocPublished', 'Document Added To Library'), ('contentDocFeatured', 'Document Featured'), ('contentDocRepublished', 'Document Re-added To Library'), ('contentDocUnpublished', 'Document Removed From Library'), ('contentDocSubscribed', 'Document Subscribed to'), ('contentDocUnsubscribed', 'Document Unsubscribed to'), ('feedEvent', 'Feed event'), ('IsArchived', 'Is Archived'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('PublishStatus', 'Publish Status'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentHistory'
        verbose_name = 'Content Document History'
        verbose_name_plural = 'Content Document History'
        # keyPrefix = 'None'



class ContentDocumentLink(models.Model):
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Event, Lead, Opportunity, Order, OrderItem, Organization, OutgoingEmail, Product2, Report, Site, Solution, Task, Topic, User, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    share_type = models.CharField(max_length=40, choices=[('V', 'Viewer'), ('C', 'Collaborator'), ('I', 'Inferred')], blank=True, null=True)
    visibility = models.CharField(max_length=40, choices=[('AllUsers', 'All Users'), ('InternalUsers', 'Standard Users'), ('SharedUsers', 'Shared Users')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentLink'
        verbose_name = 'Content Document Link'
        verbose_name_plural = 'Content Document Link'
        # keyPrefix = '06A'



class ContentFolder(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentFolder'
        verbose_name = 'Content Folder'
        verbose_name_plural = 'Content Folders'
        # keyPrefix = '07H'



class ContentFolderItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_folder = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolderitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolderitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderItem'
        verbose_name = 'Content Folder Item'
        verbose_name_plural = 'Content Folder Items'
        # keyPrefix = 'None'



class ContentFolderLink(models.Model):
    parent_entity = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    enable_folder_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('S', 'Started'), ('C', 'Completed'), ('F', 'Failed')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderLink'
        verbose_name = 'Content Folder Link'
        verbose_name_plural = 'Content Folder Links'
        # keyPrefix = '07v'



class ContentFolderMember(models.Model):
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE)
    child_record = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfoldermember_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfoldermember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderMember'
        verbose_name = 'Content Folder Member'
        verbose_name_plural = 'Content Folder Members'
        # keyPrefix = '07I'



class ContentVersion(models.Model):
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_latest = models.BooleanField(sf_read_only=models.READ_ONLY)
    content_url = models.URLField(verbose_name='Content URL', blank=True, null=True)
    version_number = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    reason_for_change = models.CharField(max_length=1000, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', default=models.DEFAULTED_ON_CREATE, choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')])
    path_on_client = models.CharField(max_length=500, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    content_modified_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    content_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_contentmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    positive_rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    negative_rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_boost = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_owner_set')
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    tag_csv = models.TextField(verbose_name='Tags', blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY)
    publish_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    version_data = models.TextField(blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_publish_location = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Event, Lead, Opportunity, Order, OrderItem, Organization, OutgoingEmail, Product2, Report, Site, Solution, Task, Topic, User, WorkOrder, WorkOrderLineItem]
    origin = models.CharField(max_length=40, verbose_name='Content Origin', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('C', 'Content'), ('H', 'Chatter')])
    content_location = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('S', 'Salesforce'), ('E', 'External'), ('L', 'Social Customer Service')])
    text_preview = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_document_info1 = models.CharField(max_length=1000, blank=True, null=True)
    external_document_info2 = models.CharField(max_length=1000, blank=True, null=True)
    external_data_source = models.ForeignKey('ExternalDataSource', models.DO_NOTHING, blank=True, null=True)
    checksum = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_major_version = models.BooleanField(verbose_name='Major Version', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_asset_enabled = models.BooleanField(verbose_name='Asset File Enabled', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersion'
        verbose_name = 'Content Version'
        verbose_name_plural = 'Content Versions'
        # keyPrefix = '068'



class ContentVersionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ContentUrl', 'Content URL'), ('created', 'Created.'), ('Description', 'Description'), ('ExternalDataSource', 'External Data Source'), ('ExternalDocumentInfo1', 'External Document Info1'), ('ExternalDocumentInfo2', 'External Document Info2'), ('feedEvent', 'Feed event'), ('SharingPrivacy', 'File Privacy on Records'), ('Language', 'Language'), ('IsMajorVersion', 'Major Version'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('SharingOption', 'Prevent others from sharing and unsharing'), ('ReasonForChange', 'Reason For Change'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title'), ('contentVersionCommented', 'Version Commented'), ('contentVersionCreated', 'Version Created'), ('contentVersionDataReplaced', 'Version Data Replaced'), ('contentVersionDeleted', 'Version Deleted'), ('contentVersionDownloaded', 'Version Downloaded'), ('contentVersionRated', 'Version Rated'), ('contentVersionUpdated', 'Version Updated'), ('contentVersionViewed', 'Version Viewed')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionHistory'
        verbose_name = 'Content Version History'
        verbose_name_plural = 'Content Version History'
        # keyPrefix = 'None'



class ContentWorkspace(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    tag_model = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Unrestricted'), ('G', 'Guided'), ('R', 'Restricted')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspace_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspace_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    default_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_restrict_content_types = models.BooleanField(verbose_name='Restrict Record Types', sf_read_only=models.READ_ONLY, default=False)
    is_restrict_linked_content_types = models.BooleanField(verbose_name='Restrict Linked Record Types', sf_read_only=models.READ_ONLY, default=False)
    workspace_type = models.CharField(max_length=40, verbose_name='Library Type', sf_read_only=models.READ_ONLY, default='R', choices=[('R', 'Regular'), ('B', 'Asset System')], blank=True, null=True)
    last_workspace_activity_date = models.DateTimeField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    root_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspace'
        verbose_name = 'Library'
        verbose_name_plural = 'Libraries'
        # keyPrefix = '058'



class ContentWorkspaceDoc(models.Model):
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_owner = models.BooleanField(verbose_name='Is Owning Library', sf_read_only=models.READ_ONLY, default=False)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceDoc'
        verbose_name = 'Library Document'
        verbose_name_plural = 'Library Documents'
        # keyPrefix = '059'



class Contract(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING)  # Master Detail Relationship *
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    owner_expiration_notice = models.CharField(max_length=40, choices=[('15', '15 Days'), ('30', '30 Days'), ('45', '45 Days'), ('60', '60 Days'), ('90', '90 Days'), ('120', '120 Days')], blank=True, null=True)
    start_date = models.DateField(verbose_name='Contract Start Date', blank=True, null=True)
    end_date = models.DateField(verbose_name='Contract End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    contract_term = models.IntegerField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_owner_set')
    status = models.CharField(max_length=40, choices=[('In Approval Process', 'In Approval Process'), ('Activated', 'Activated'), ('Draft', 'Draft')], default=models.DEFAULTED_ON_CREATE)
    company_signed = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_companysigned_set', blank=True, null=True)
    company_signed_date = models.DateField(blank=True, null=True)
    customer_signed = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    customer_signed_title = models.CharField(max_length=40, blank=True, null=True)
    customer_signed_date = models.DateField(blank=True, null=True)
    special_terms = models.TextField(blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_activatedby_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')])
    description = models.TextField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    last_approved_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contract'
        verbose_name = 'Contract'
        verbose_name_plural = 'Contracts'
        # keyPrefix = '800'



class ContractContactRole(models.Model):
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractcontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractcontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContractContactRole'
        verbose_name = 'Contract Contact Role'
        verbose_name_plural = 'Contract Contact Role'
        # keyPrefix = '02a'



class ContractFeed(models.Model):
    parent = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractFeed'
        verbose_name = 'Contract Feed'
        verbose_name_plural = 'Contract Feed'
        # keyPrefix = 'None'



class ContractHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('CompanySigned', 'Company Signed By'), ('CompanySignedDate', 'Company Signed Date'), ('contractActivation', 'Contract Activated.'), ('contractConversion', 'Contract Converted.'), ('contractDraft', 'Contract Draft.'), ('EndDate', 'Contract End Date'), ('contractExpiration', 'Contract Expired.'), ('contractApproval', 'Contract in Approval.'), ('Name', 'Contract Name'), ('Owner', 'Contract Owner'), ('StartDate', 'Contract Start Date'), ('ContractTerm', 'Contract Term (months)'), ('contractTermination', 'Contract Terminated.'), ('created', 'Created.'), ('CustomerSigned', 'Customer Signed By'), ('CustomerSignedDate', 'Customer Signed Date'), ('CustomerSignedTitle', 'Customer Signed Title'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('OwnerExpirationNotice', 'Owner Expiration Notice'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('SpecialTerms', 'Special Terms'), ('Status', 'Status')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractHistory'
        verbose_name = 'Contract History'
        verbose_name_plural = 'Contract History'
        # keyPrefix = 'None'



class ContractStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContractStatus'
        verbose_name = 'Contract Status Value'
        verbose_name_plural = 'Contract Status Value'
        # keyPrefix = 'None'



class CorsWhitelistEntry(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='corswhitelistentry_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='corswhitelistentry_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url_pattern = models.CharField(max_length=255, verbose_name='Origin URL Pattern')
    class Meta(models.Model.Meta):
        db_table = 'CorsWhitelistEntry'
        verbose_name = 'CORS Whitelist Origin'
        verbose_name_plural = 'CORS Whitelist Origins'
        # keyPrefix = '074'



class CronJobDetail(models.Model):
    name = models.CharField(max_length=255, verbose_name='Job Name', sf_read_only=models.READ_ONLY)
    job_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('1', 'Data Export'), ('3', 'Dashboard Refresh'), ('4', 'Reporting Snapshot'), ('7', 'Scheduled Apex'), ('8', 'Report Run'), ('9', 'Batch Job'), ('A', 'Reporting Notification')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CronJobDetail'
        verbose_name = 'Cron Job'
        verbose_name_plural = 'Cron Job'
        # keyPrefix = '08a'



class CronTrigger(models.Model):
    cron_job_detail = models.ForeignKey(CronJobDetail, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    next_fire_time = models.DateTimeField(verbose_name='Next Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    previous_fire_time = models.DateTimeField(verbose_name='Previous Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=16, verbose_name='Job State', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    cron_expression = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Java Time Zone Id', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Fiji', '(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (New South Wales) (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (South Australia) (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Asia/Tehran', '(GMT+03:30) Iran Standard Time (Asia/Tehran)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Time (Africa/Casablanca)'), ('Europe/Amsterdam', '(GMT+01:00) Central European Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) Eastern Greenland Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('America/Sao_Paulo', '(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/St_Johns', '(GMT-03:30) Newfoundland Standard Time (America/St_Johns)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Halifax', '(GMT-04:00) Atlantic Standard Time (America/Halifax)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('Atlantic/Bermuda', '(GMT-04:00) Atlantic Standard Time (Atlantic/Bermuda)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Indiana/Indianapolis', '(GMT-05:00) Eastern Standard Time (America/Indiana/Indianapolis)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/New_York', '(GMT-05:00) Eastern Standard Time (America/New_York)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Chicago', '(GMT-06:00) Central Standard Time (America/Chicago)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Denver', '(GMT-07:00) Mountain Standard Time (America/Denver)'), ('America/Mazatlan', '(GMT-07:00) Mountain Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Los_Angeles', '(GMT-08:00) Pacific Standard Time (America/Los_Angeles)'), ('America/Tijuana', '(GMT-08:00) Pacific Standard Time (America/Tijuana)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Anchorage', '(GMT-09:00) Alaska Standard Time (America/Anchorage)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('America/Adak', '(GMT-10:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    times_triggered = models.IntegerField(verbose_name='Job Fired Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CronTrigger'
        verbose_name = 'Scheduled Jobs'
        verbose_name_plural = 'Scheduled Jobs'
        # keyPrefix = '08e'



class CspTrustedSite(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Trusted Site Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='csptrustedsite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='csptrustedsite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    endpoint_url = models.CharField(max_length=255, verbose_name='Trusted Site URL')
    description = models.TextField(blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'CspTrustedSite'
        verbose_name = 'Content Security Policy Trusted Site'
        verbose_name_plural = 'Content Security Policy Trusted Sites'
        # keyPrefix = '08y'



class CustomBrand(models.Model):
    parent = models.ForeignKey('Organization', models.DO_NOTHING)  # Reference to tables [Organization, Stamp, Topic] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrand_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrand_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrand'
        verbose_name = 'Custom Brand'
        verbose_name_plural = 'Custom Brand'
        # keyPrefix = '07W'



class CustomBrandAsset(models.Model):
    custom_brand = models.ForeignKey(CustomBrand, models.DO_NOTHING)  # Master Detail Relationship *
    asset_category = models.CharField(max_length=40, choices=[('MotifZeronaryColor', 'Zeronary motif color'), ('MotifPrimaryColor', 'Primary motif color'), ('MotifSecondaryColor', 'Secondary motif color'), ('MotifTertiaryColor', 'Tertiary motif color'), ('MotifQuaternaryColor', 'Quaternary motif color'), ('MotifZeronaryComplementColor', 'Zeronary motif colors compelement color'), ('MotifPrimaryComplementColor', 'Primary motif colors compelement color'), ('MotifTertiaryComplementColor', 'Tertiary motif colors compelement color'), ('MotifQuaternaryComplementColor', 'Quaternary motif colors complement color'), ('PageHeader', 'Page Header'), ('PageFooter', 'Page Footer'), ('LoginFooterText', 'Footer text displayed on the login page'), ('LoginLogoImageId', 'Logo image displayed on the login page'), ('LargeLogoImageId', 'Large logo image'), ('MediumLogoImageId', 'Medium logo image'), ('SmallLogoImageId', 'Small logo image')])
    text_asset = models.CharField(max_length=333, blank=True, null=True)
    foreign_key_asset = models.ForeignKey('Document', models.DO_NOTHING, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrandasset_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrandasset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrandAsset'
        verbose_name = 'Custom Brand Asset'
        verbose_name_plural = 'Custom Brand Asset'
        # keyPrefix = '07X'



class CustomObjectUserLicenseMetrics(models.Model):
    metrics_date = models.DateField(sf_read_only=models.READ_ONLY)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_object_id = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    custom_object_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Enterprise', 'Enterprise'), ('Light', 'Light')], blank=True, null=True)
    custom_object_name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    object_count = models.IntegerField(verbose_name='Count of Objects assigned', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomObjectUserLicenseMetrics'
        verbose_name = 'Custom Object Usage By User License Metric'
        verbose_name_plural = 'Custom Object Usage By User License Metrics'
        # keyPrefix = '3NA'



class CustomPermission(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_protected = models.BooleanField(verbose_name='Protected Component', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermission_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermission_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomPermission'
        verbose_name = 'Custom Permission'
        verbose_name_plural = 'Custom Permissions'
        # keyPrefix = '0CP'



class CustomPermissionDependency(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermissiondependency_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermissiondependency_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, related_name='custompermissiondependency_custompermission_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    required_custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, related_name='custompermissiondependency_requiredcustompermission_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CustomPermissionDependency'
        verbose_name = 'Custom Permission Dependency'
        verbose_name_plural = 'Custom Permission Dependencies'
        # keyPrefix = '0PD'



class DandBcompany(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Primary Business Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dandbcompany_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dandbcompany_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    duns_number = models.CharField(max_length=9, verbose_name='D-U-N-S Number')
    street = models.TextField(verbose_name='Street Address', blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, blank=True, null=True)
    postal_code = models.CharField(max_length=20, blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    geocode_accuracy_standard = models.CharField(max_length=255, verbose_name='Geocode Accuracy', choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(verbose_name='Primary Address', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Telephone Number', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Facsimile Number', blank=True, null=True)
    country_access_code = models.CharField(max_length=4, verbose_name='International Dialing Code', blank=True, null=True)
    public_indicator = models.CharField(max_length=255, verbose_name='Ownership Type Indicator', choices=[('Y', 'Public'), ('N', 'Private')], blank=True, null=True)
    stock_symbol = models.CharField(max_length=6, verbose_name='Ticker Symbol', blank=True, null=True)
    stock_exchange = models.CharField(max_length=16, blank=True, null=True)
    sales_volume = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Annual Sales Volume', blank=True, null=True)
    url = models.URLField(db_column='URL', verbose_name='URL', blank=True, null=True)
    out_of_business = models.CharField(max_length=255, verbose_name='Out Of Business Indicator', choices=[('Y', 'Out of Business'), ('N', 'Not Out of Business')], blank=True, null=True)
    employees_total = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Employees - Total', blank=True, null=True)
    fips_msa_code = models.CharField(max_length=5, verbose_name='FIPS MSA Code', blank=True, null=True)
    fips_msa_desc = models.CharField(max_length=255, verbose_name='FIPS MSA Code Description', blank=True, null=True)
    trade_style1 = models.CharField(max_length=255, verbose_name='Primary Tradestyle', blank=True, null=True)
    year_started = models.CharField(max_length=4, blank=True, null=True)
    mailing_street = models.TextField(verbose_name='Mailing Street Address', blank=True, null=True)
    mailing_city = models.CharField(max_length=40, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, blank=True, null=True)
    mailing_country = models.CharField(max_length=80, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    latitude = models.CharField(max_length=11, blank=True, null=True)
    longitude = models.CharField(max_length=11, blank=True, null=True)
    primary_sic = models.CharField(max_length=4, verbose_name='Primary SIC Code', blank=True, null=True)
    primary_sic_desc = models.CharField(max_length=80, verbose_name='Primary SIC Description', blank=True, null=True)
    second_sic = models.CharField(max_length=4, verbose_name='Second SIC Code', blank=True, null=True)
    second_sic_desc = models.CharField(max_length=80, verbose_name='Second SIC Description', blank=True, null=True)
    third_sic = models.CharField(max_length=4, verbose_name='Third SIC Code', blank=True, null=True)
    third_sic_desc = models.CharField(max_length=80, verbose_name='Third SIC Description', blank=True, null=True)
    fourth_sic = models.CharField(max_length=4, verbose_name='Fourth SIC Code', blank=True, null=True)
    fourth_sic_desc = models.CharField(max_length=80, verbose_name='Fourth SIC Description', blank=True, null=True)
    fifth_sic = models.CharField(max_length=4, verbose_name='Fifth SIC Code', blank=True, null=True)
    fifth_sic_desc = models.CharField(max_length=80, verbose_name='Fifth SIC Description', blank=True, null=True)
    sixth_sic = models.CharField(max_length=4, verbose_name='Sixth SIC Code', blank=True, null=True)
    sixth_sic_desc = models.CharField(max_length=80, verbose_name='Sixth SIC Description', blank=True, null=True)
    primary_naics = models.CharField(max_length=6, verbose_name='Primary NAICS Code', blank=True, null=True)
    primary_naics_desc = models.CharField(max_length=120, verbose_name='Primary NAICS Description', blank=True, null=True)
    second_naics = models.CharField(max_length=6, verbose_name='Second NAICS Code', blank=True, null=True)
    second_naics_desc = models.CharField(max_length=120, verbose_name='Second NAICS Description', blank=True, null=True)
    third_naics = models.CharField(max_length=6, verbose_name='Third NAICS Code', blank=True, null=True)
    third_naics_desc = models.CharField(max_length=120, verbose_name='Third NAICS Description', blank=True, null=True)
    fourth_naics = models.CharField(max_length=6, verbose_name='Fourth NAICS Code', blank=True, null=True)
    fourth_naics_desc = models.CharField(max_length=120, verbose_name='Fourth NAICS Description', blank=True, null=True)
    fifth_naics = models.CharField(max_length=6, verbose_name='Fifth NAICS Code', blank=True, null=True)
    fifth_naics_desc = models.CharField(max_length=120, verbose_name='Fifth NAICS Description', blank=True, null=True)
    sixth_naics = models.CharField(max_length=6, verbose_name='Sixth NAICS Code', blank=True, null=True)
    sixth_naics_desc = models.CharField(max_length=120, verbose_name='Sixth NAICS Description', blank=True, null=True)
    own_or_rent = models.CharField(max_length=255, verbose_name='Location Ownership Indicator', choices=[('0', 'Unknown or Not Applicable'), ('1', 'Owns'), ('2', 'Rents')], blank=True, null=True)
    employees_here = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Employees - Location', blank=True, null=True)
    employees_here_reliability = models.CharField(max_length=255, verbose_name='Number of Employees - Location Indicator', choices=[('0', 'Actual number'), ('1', 'Low'), ('2', 'Estimated (for all records)'), ('3', 'Modeled (for non-US records)')], blank=True, null=True)
    sales_volume_reliability = models.CharField(max_length=255, verbose_name='Annual Sales Volume Indicator', choices=[('0', 'Actual number'), ('1', 'Low'), ('2', 'Estimated (for all records)'), ('3', 'Modeled (for non-US records)')], blank=True, null=True)
    currency_code = models.CharField(max_length=255, verbose_name='Local Currency Code', choices=[('0010', 'Canadian Dollar'), ('0020', 'U.S. Dollar'), ('0030', 'Argentine Peso'), ('0040', 'Aruban Florin'), ('0050', 'Australian Dollar'), ('0070', 'Barbados Dollar'), ('0075', 'St Helena Pound'), ('0090', 'Bermudian Dollar'), ('0095', 'Denar'), ('0100', 'Brazilian Cruzeiro (old)'), ('0105', 'Bosnia-Herzegovina Convertible Mark'), ('0110', 'Chinese Yuan Renminbi'), ('0120', 'Danish Krone'), ('0140', 'Eastern Caribbean Dollar'), ('0150', 'Egyptian Pound'), ('0155', 'Eritrean Nakfa'), ('0160', 'Pound Sterling'), ('0190', 'CFP Franc'), ('0220', 'Hong Kong Dollar'), ('0230', 'Indian Rupee'), ('0250', 'Israeli Sheqel (new)'), ('0270', 'Jamaican Dollar'), ('0280', 'Yen'), ('0290', 'Kenyan Shilling'), ('0305', 'Mongolian Tugrik'), ('0310', 'Moroccan Dirham'), ('0320', 'New Zealand Dollar'), ('0330', 'Norwegian Krone'), ('0370', 'Swedish Krona'), ('0380', 'Swiss Franc'), ('0390', 'New Taiwanese Dollar'), ('0400', 'Baht'), ('0410', 'Afghani'), ('0420', 'Algerian Dinar'), ('0430', 'Bangladeshi Taka'), ('0440', 'Bahraini Dinar'), ('0450', 'Bahamian Dollar'), ('0460', 'Belize Dollar'), ('0470', 'Bolivian Boliviano'), ('0480', 'Botswani Pula'), ('0490', 'Brunei Dollar'), ('0500', 'Bulgarian Lev'), ('0520', 'Burundi Franc'), ('0530', 'Cape Verde Escudo'), ('0540', 'Cayman Islands Dollar'), ('0550', 'CFA Franc BCEAO'), ('0552', 'CFA Franc (BEAC)'), ('0560', 'Chilean Peso'), ('0580', 'Colombian Peso'), ('0585', 'Comoro Franc'), ('0590', 'Costa Rican Colon'), ('0595', 'Croatian Dinar (Old)'), ('0600', 'Cuban Peso'), ('0605', 'Cuban Peso Convertible'), ('0620', 'Czech Koruna'), ('0630', 'Djibouti Franc'), ('0640', 'Dominican Peso'), ('0650', 'Netherlands Antillean Guilder'), ('0690', 'Ethiopian Bir'), ('0700', 'Fiji Dollar'), ('0710', 'Dalasi'), ('0720', 'Ghana Cedi'), ('0730', 'Gibraltar Pound'), ('0750', 'Guinean Franc'), ('0760', 'Guyana Dollar'), ('0770', 'Gourde'), ('0780', 'Lempira'), ('0790', 'Forint'), ('0800', 'Icelandic Krona'), ('0820', 'Rupiah'), ('0830', 'Iraqi Dinar'), ('0840', 'Iranian Rial'), ('0860', 'Jordanian Dinar'), ('0870', 'Kuwaiti Dinar'), ('0880', 'Kip'), ('0890', 'Lebanese Pound'), ('0900', 'Loti'), ('0910', 'Liberian Dollar'), ('0920', 'Libyan Dinar'), ('0940', 'Malagasy Ariary'), ('0960', 'Kwacha'), ('0970', 'Malaysian Ringgit'), ('1000', 'Ouguiya'), ('1010', 'Mauritius Rupee'), ('1020', 'Mozambique Metical'), ('1030', 'Nepalese Rupee'), ('1040', 'Cordoba Oro'), ('1060', 'Rial Omani'), ('1070', 'Pakistan Rupee'), ('1080', 'Balboa'), ('1090', 'Kina'), ('2000', 'Guarani'), ('2010', 'Neuvo Sol'), ('2020', 'Philippine Peso'), ('2040', 'Qatari Riyal'), ('2060', 'Rwanda Franc'), ('2070', 'Dobra'), ('2080', 'Saudi Riyal'), ('2090', 'Seychelles Rupee'), ('3000', 'Singapore Dollar'), ('3010', 'Solomon Islands Dollar'), ('3020', 'Somali Shilling'), ('3030', 'Rand'), ('3040', 'Won'), ('3060', 'Sri Lanka Rupee'), ('3070', 'Sudanese Pound'), ('3075', 'South Sudanese Pound'), ('3085', 'Surinam Dollar'), ('3090', 'Lilangeni'), ('4000', 'Syrian Pound'), ('4010', 'Tanzanian Shilling'), ('4020', "Pa'anga"), ('4030', 'Trinidad & Tobago Dollar'), ('4040', 'Tunisian Dinar'), ('4060', 'UAE Dirham'), ('4070', 'Uganda Shilling'), ('4090', 'Vatu'), ('5005', 'Bolivar Fuerte'), ('5010', 'Dong'), ('5020', 'Yemenese Rial'), ('5030', 'Tala'), ('5040', 'Serbian Dinar'), ('5080', 'Euro'), ('5090', 'Angolan Kwanza'), ('6000', 'Leone'), ('6030', 'Congolese Franc'), ('6040', 'Peso Uruguayo'), ('6050', 'Lari'), ('6060', 'Hryvnia'), ('6100', 'Bhutan Ngultrum'), ('6200', 'Quetzal'), ('6300', 'Cambodian Riel'), ('6400', 'North Korean Won'), ('6500', 'Rufiyaa'), ('6600', 'Naira'), ('6800', 'Croatian Kuna'), ('6900', 'Falkland Islands Pound'), ('7200', 'Pataca'), ('7500', 'Mexican Peso (new)'), ('7600', 'Albanian Lek'), ('8000', 'Estonian Kroon'), ('8100', 'Belarussian Ruble'), ('8300', 'Moldovan Leu'), ('8500', 'Armenian Dram'), ('8700', 'Tenge'), ('8800', 'Turkmenistan Manat'), ('8900', 'Som'), ('9000', 'Uzbekistan Sum'), ('9100', 'Russian Ruble'), ('9300', 'Brazilian Real'), ('9410', 'Polish New Zloty'), ('9430', 'Myanmar Kyat'), ('9440', 'Turkish Lira (new)'), ('9450', 'Romanian Leu (new)'), ('9460', 'Azerbaijanian Manat (new)'), ('9470', 'Namibia Dollar')], blank=True, null=True)
    legal_status = models.CharField(max_length=255, verbose_name='Legal Structure', choices=[('100', 'Cooperative'), ('101', 'Nonprofit organization'), ('118', 'Local government body'), ('012', 'Partnership of unknown type'), ('120', 'Foreign company'), ('013', 'Proprietorship'), ('003', 'Corporation'), ('050', 'Government body'), ('008', 'Joint venture'), ('000', 'Not available'), ('009', 'Master limited partnership'), ('010', 'General partnership'), ('011', 'Limited partnership'), ('014', 'Limited liability'), ('015', 'Friendly society'), ('030', 'Trust'), ('070', 'Crown corporation'), ('080', 'Institution'), ('090', 'Estate'), ('099', 'Industry cooperative'), ('102', 'Private limited company'), ('103', 'Partnership partially limited by shares'), ('104', 'Temporary association'), ('105', 'Registered proprietorship'), ('106', 'Limited partnership with shares'), ('107', 'Unregistered proprietorship'), ('108', 'Community of goods'), ('109', 'Reciprocal guarantee company'), ('110', 'Cooperative society with limited liability'), ('111', 'Civil company'), ('112', 'De facto partnership'), ('113', 'Foundation'), ('114', 'Association'), ('115', 'Public company'), ('116', 'Civil law partnership'), ('117', 'Incorporated by act of Parliament'), ('119', 'Private unlimited company'), ('121', 'Private company limited by guarantee'), ('122', 'Civil partnership'), ('125', 'Public limited company'), ('126', 'Registered partnership'), ('127', 'Society'), ('128', 'Government-owned company'), ('129', 'Government institute'), ('130', 'Public institute'), ('131', 'Plant'), ('132', 'Hotel'), ('133', 'Division'), ('140', 'Joint shipping company'), ('142', 'Limited-liability corporation'), ('143', 'Branch'), ('144', 'Concern address'), ('145', 'Insurance company'), ('146', 'Private foundation'), ('147', 'County institution'), ('148', 'Municipal institution'), ('149', 'Vestry'), ('150', 'Public undertaking'), ('151', 'Faeroese company'), ('152', 'Greenland limited'), ('153', 'Greenland private limited'), ('154', 'Sole proprietorship'), ('155', 'Sole proprietorship or partnership'), ('160', 'Unregistered partnership'), ('161', 'Civil association'), ('162', 'Association in participation'), ('163', 'Mutual insurance association'), ('164', 'Stock company with variable capital'), ('166', 'Cooperative production society'), ('167', 'Joint stock company'), ('168', 'Limited responsibility cooperative society'), ('169', 'National credit society'), ('170', 'Offene erwerbsgesellschaft'), ('171', 'Limited liability company with variable cap'), ('180', 'Kommandit erwerbsgesellschaft'), ('185', 'Public credit institution'), ('186', 'Working group'), ('190', 'Union'), ('200', 'Personal partnership'), ('202', 'Unlimited liability rural production company'), ('204', 'Named collective company with variable capital'), ('206', 'Individual with business activity'), ('208', 'Association with shares in the stock market'), ('210', 'Real estate partnership'), ('212', 'Association with shares in the stock market with variable capital'), ('214', 'Association with shares with variable capital (investment company)'), ('216', 'Association with shares with variable capital (investment company with debt instruments)'), ('218', 'Association with shares with variable capital investment company with variable rent)'), ('220', 'Agricultural collective interest company'), ('222', 'Association with shares with variable capital (financial company with limited object)'), ('224', 'Association with shares with variable capital (financial company with multiple objects non-regulated entity)'), ('226', 'Association with shares with variable capital (financial company with multiple objects regulated entity)'), ('228', 'Association with shares investment promotor'), ('230', 'Defacto business organization'), ('232', 'Association with shares in the stock market (investment promotor)'), ('234', 'Association with shares in the stock market (investment promotor with variable capital)'), ('236', 'Association with shares with variable capital (investment promotor) '), ('238', 'Association with shares (capital investment company)'), ('240', 'Government/municipal establishment'), ('242', 'Association with shares (investment company with debt instruments)'), ('244', 'Association with shares (investment company with variable rent)'), ('246', 'Association with shares (financial company with limited object)'), ('248', 'Association with shares (financial company with multiple objects non-regulated entity)'), ('250', 'Housing company'), ('252', 'Association with shares (financial company with multiple objects regulated entity)'), ('254', 'Cooperative production society of variable capital of limited Responsibility'), ('256', 'Limited liability rural production company'), ('260', 'Voluntary association'), ('270', 'Mortgage association'), ('280', 'Cooperative society'), ('290', 'Cooperative bank'), ('300', 'Savings bank'), ('301', 'Small individual business'), ('302', 'Private company'), ('304', 'Unregistered'), ('306', 'Government department/city council'), ('308', 'State government'), ('310', 'Economic association'), ('312', 'Class order'), ('314', 'Business name'), ('316', 'Sole trader'), ('318', 'Trustee company'), ('320', 'Insurance limited company'), ('322', 'Listed public company (limited)'), ('324', 'Unlisted public company'), ('326', 'limited by guarantee'), ('328', 'Listed public company (no liability) '), ('330', 'Government authority'), ('332', 'Professional organization/association'), ('334', 'Registered Australian body'), ('336', 'Corporate partnership'), ('338', 'Industrial and provident societies'), ('340', 'Group'), ('342', 'Charitable trust'), ('344', 'Overseas company'), ('346', 'Proprietary company'), ('350', 'Housing cooperative society'), ('360', 'Mutual assistance business organization'), ('370', 'Provident business organization'), ('380', 'Limited company'), ('390', 'Simple partnership'), ('400', 'Mixed company'), ('410', 'Commercial collective company'), ('420', 'Commercial company'), ('430', 'Representative office'), ('440', 'Bank'), ('450', 'Industry and equity company'), ('451', 'Trading society'), ('452', 'Government institution'), ('460', 'Open stock corporation'), ('470', 'Trusteeship'), ('480', 'Private business'), ('490', 'Decentralized public organization'), ('500', 'Stock company'), ('502', "Tenant owner's society"), ('510', 'Civil society'), ('520', 'Society for capitalization of savings'), ('530', 'Limited cooperative company'), ('540', 'Mutual insurance society'), ('550', 'Simple limited partnership'), ('560', 'Named collective company'), ('570', 'Non-profit association'), ('580', 'Corporation with variable capital'), ('590', 'Joint corporation'), ('600', 'Consortium'), ('610', 'Personal firm'), ('620', 'Corporation with authorized capital'), ('630', 'Corporation with open capital'), ('640', 'Bank for capitalization of savings'), ('650', 'Closed stock corporation'), ('660', 'Commercial and industrial corporation'), ('670', 'Commercial corporation'), ('680', 'Industrial corporation'), ('690', 'Financial institution'), ('700', 'Contract mining company'), ('710', 'Contracting company'), ('720', 'Non-profit international organization'), ('730', 'International organization'), ('740', 'Limited co auth capital-regd co open cap'), ('750', 'Organization'), ('755', 'Unlimited company'), ('760', "Farmer's association"), ('770', "Economic assoc/tenant owners' society"), ('780', 'Mining company'), ('790', 'Shipping company'), ('800', 'Simple company'), ('810', 'Private firm'), ('820', 'Family foundation'), ('830', 'County'), ('840', 'County association'), ('850', 'County council'), ('860', 'Regional social insurance office'), ('870', 'Unit within the Swedish church'), ('880', 'Public corporation/institution'), ('881', 'Statutory body'), ('890', 'Mortgage/security association'), ('891', 'Government agency'), ('892', 'Mutual company'), ('893', 'Special corporation'), ('894', 'Central bank for agriculture & forestry'), ('895', 'Austrian legal entity'), ('896', 'Establishment'), ('900', 'Supporting association'), ('905', 'Administration'), ('910', 'Unemployment office'), ('915', 'Liaison office'), ('920', 'Foreign legal person'), ('925', 'Cooperative union with guaranteed liab'), ('930', 'Swedish legal person'), ('935', 'Cooperative union with limited liability'), ('940', 'Unlimited partnership'), ('945', 'Cooperative society with unlimited liability'), ('950', 'Foreign branch'), ('955', 'Cooperative society with guaranteed liability'), ('960', 'Incorporated foundation'), ('965', 'Business not formally registered'), ('970', 'Incorporated non-profit association'), ('971', 'State-owned enterprise'), ('972', 'Free trade zone entp. proc. prvd. smpl.'), ('973', 'Limited holding company'), ('974', 'Government department or non-profit organization'), ('975', 'Government department'), ('976', 'Collectively owned enterprise'), ('977', 'Domestic and foreign joint venture'), ('978', 'Domestic and foreign cooperative venture'), ('980', 'Educational foundation'), ('985', 'Unlimited company ltd. liab. shareholder'), ('990', 'Medical corporation'), ('991', 'Private limited liability company'), ('992', 'Public limited liability company'), ('993', 'Exempt limited liability company'), ('994', 'Deemed public limited company'), ('995', 'Private company limited by shares'), ('999', 'Securities fund')], blank=True, null=True)
    global_ultimate_total_employees = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Employees - Global', blank=True, null=True)
    employees_total_reliability = models.CharField(max_length=255, verbose_name='Number of Employees - Total Indicator', choices=[('0', 'Actual number'), ('1', 'Low'), ('2', 'Estimated (for all records)'), ('3', 'Modeled (for non-US records)')], blank=True, null=True)
    minority_owned = models.CharField(max_length=255, verbose_name='Minority-Owned Indicator', choices=[('Y', 'Minority-owned'), ('N', 'Not minority-owned')], blank=True, null=True)
    women_owned = models.CharField(max_length=255, verbose_name='Woman-Owned Indicator', choices=[('Y', 'Owned by a woman'), ('N', 'Not owned by a woman or unknown')], blank=True, null=True)
    small_business = models.CharField(max_length=255, verbose_name='Small Business Indicator', choices=[('Y', 'Small business site'), ('N', 'Not small business site')], blank=True, null=True)
    marketing_segmentation_cluster = models.CharField(max_length=255, choices=[('1', 'High-Tension Branches of Insurance/Utility Industries'), ('2', 'Bustling Manufacturers & Business Services'), ('3', 'The Withering Branch Company'), ('4', 'Rapid-Growth Large Businesses'), ('5', 'Sunny Branches of Insurance/Utility Industries'), ('6', 'Labor-Intensive Giants'), ('7', 'Entrepreneur & Co.'), ('8', 'Frugal & Associates'), ('9', 'Spartans'), ('10', 'Struggling Startups'), ('11', 'The Hectic Venture Company'), ('12', 'The Established Shingle Company'), ('13', 'Industry, Inc.'), ('14', 'Landmark Business Services'), ('15', 'The Test Of Time Company'), ('16', 'Powerhouse 6000'), ('17', 'In Good Hands'), ('18', 'Sudden-Growth Giants'), ('19', 'Active Traders'), ('20', 'Old Core Proprietors'), ('21', 'Solid & Sons'), ('22', 'Main Street USA')], blank=True, null=True)
    import_export_agent = models.CharField(max_length=255, verbose_name='Import/Export', choices=[('A', 'Importer/Exporter/Agent'), ('B', 'Importer/Exporter'), ('C', 'Importer'), ('D', 'Importer/Agent'), ('E', 'Exporter/Agent'), ('F', 'Agent. Keeps no inventory and does not take title goods'), ('G', 'None or Data Not Available'), ('H', 'Exporter')], blank=True, null=True)
    subsidiary = models.CharField(max_length=255, verbose_name='Subsidiary Indicator', choices=[('0', 'Not subsidiary of another organization'), ('3', 'Subsidiary of another organization')], blank=True, null=True)
    trade_style2 = models.CharField(max_length=255, verbose_name='Second Tradestyle', blank=True, null=True)
    trade_style3 = models.CharField(max_length=255, verbose_name='Third Tradestyle', blank=True, null=True)
    trade_style4 = models.CharField(max_length=255, verbose_name='Fourth Tradestyle', blank=True, null=True)
    trade_style5 = models.CharField(max_length=255, verbose_name='Fifth Tradestyle', blank=True, null=True)
    national_id = models.CharField(max_length=255, verbose_name='National Identification Number', blank=True, null=True)
    national_id_type = models.CharField(max_length=255, verbose_name='National Identification System', choices=[('00010', 'Belgium Enterprise Number'), ('00011', 'Belgium Branch Unit Number'), ('00100', 'Tokyo Shoko Research Business Identifier'), ('00102', 'Emc Entered Registration Number'), ('00103', 'Emc Entered Tax Registration Number'), ('00104', 'Emc Entered Chamber of Commerce Number'), ('00105', 'Emc Government Gazette Number'), ('00106', 'Sweden Registration Number'), ('00107', 'Finnish Registration Number'), ('00108', 'Costa Rican Judicial Number'), ('00109', 'El Salvadoran Patron'), ('00110', 'Hungarian Tax Identifier'), ('00111', 'Sweden Branch Number'), ('00112', 'Jamaican Tax Identification Number'), ('00113', 'Trinidadian Tax Identification Number'), ('00115', 'Dominican Republic National Commercial Registry Number'), ('00119', 'Peruvian Sole Commercial Registry Number'), ('00012', 'UK Cro Number'), ('00120', 'Hungarian Registration Number'), ('00125', 'Venezuelan National Tributary ID Number'), ('00127', 'Nicaraguan Sole Commercial Registry Number'), ('00013', 'Ireland Cro Number'), ('00130', 'Polish Tax Identifier'), ('00135', 'Costa Rican Tax Registration Number'), ('00014', 'France Siren Number'), ('00140', 'Polish Registration Number'), ('00145', 'Colombian National Trubutary ID Number'), ('00155', 'El Salvadoran National Tributary ID Number'), ('00016', 'Monte Carlo Siren Number'), ('00165', 'Bolivian Sole Commercial Registry Number'), ('00017', 'France Siret Number'), ('00175', 'Ecuadorian Sole Commercial Registry Number'), ('00018', 'Europe Standard VAT Number'), ('00185', 'Sole Commercial Registry Nbr Unk Ctry'), ('00019', 'Netherland Chamber Of Commerce Number'), ('00195', 'National Tributary ID Number Unk Country'), ('00020', 'Germany Registration Number'), ('00200', 'Argentinian Unique Tax ID Key'), ('00021', 'Italy Chamber of Commerce Number'), ('00210', 'Paraguayan Unique Tax Registration'), ('00211', 'Brazilian State Registry Number'), ('00212', 'Brazilian Municipal Registry Number'), ('00022', 'Taiwan Business Registration Number'), ('00220', 'Uruguayan Unique Tax Registration'), ('00230', 'Mexican Federal Tax Registration'), ('00024', 'Spain Fiscal Code'), ('00240', 'Chilean Unique Tax ID'), ('00025', 'Andorra Fiscal Code'), ('00250', 'Venezuelan Registry of Fiscal Info'), ('00026', 'Portugal Fiscal Code'), ('00260', 'Brazilian General Record of Taxpayers'), ('00270', 'Norwegian Government Organization Number'), ('00281', 'Hong Kong Business Registration Number'), ('00282', 'Macao Cmcl Registry Company ID Number'), ('00283', 'Macao Cmcl Registry Bus Regn Number'), ('00284', 'So Korean St Cmcl Registry Bus Regn Number'), ('00285', 'So Korean Trad Assn Expt/Impt Regn Number'), ('00286', 'Czech Republic ICO'), ('00290', 'Czech VAT Number'), ('00030', 'CUSIP Number'), ('00300', 'Bangladesh Company Incorporation Number'), ('00301', 'Brunei Registration Number'), ('00302', 'India Company Incorporation Number'), ('00303', 'Indonesia Legalization Number'), ('00304', 'Indonesia President Decree Number'), ('00305', 'Malaysia Company Registration Number'), ('00306', 'Malaysia Business Registration Number'), ('00307', 'Nepal Company Incorporation Number'), ('00308', 'Pakistan Company Incorporation Number'), ('00309', 'Philippines Registration Number'), ('00031', 'Australia Company Number'), ('00310', 'Sri Lanka Company Incorporation Number'), ('00311', 'Thailand Registration Number'), ('00312', 'Vietnam Business Registration Number'), ('00313', 'Vietnam Investment License Code'), ('00314', 'Vietnam License for the Establishment'), ('00315', 'Vietnam License Number'), ('00316', 'Maldives Registration Number'), ('00317', 'Bhutan Registration Number'), ('00318', 'Myanmar Registration Number'), ('00032', 'Singapore Registration File Number'), ('00320', 'Hungarian VAT Number'), ('00321', 'New Zealand National Company Number - Ncn'), ('00322', 'Australia Business Registration Number'), ('00323', 'Australian Business Number'), ('00324', 'South African Registration Number'), ('00325', 'Greek Business Registration Number'), ('00033', 'Hong Kong Co Registry Company ID Number'), ('00034', 'CINS Number'), ('00035', 'Panamanian Sole Commercial Registry Number'), ('00036', 'Portugal Chamber of Commerce Number'), ('00040', 'Mexico Iva'), ('00045', 'Israel Registration Number'), ('00050', 'Israel VAT Number'), ('00521', 'Denmark CVR Number'), ('00522', 'United Arab Emirates Registration Number'), ('00523', 'Bahrain Registration Number'), ('00524', 'Iraq Registration Number'), ('00525', 'Iran Registration Number'), ('00526', 'Jordan Registration Number'), ('00527', 'Kuwait Registration Number'), ('00528', 'Lebanon Registration Number'), ('00529', 'Oman Registration Number'), ('00530', 'Qatar Registration Number'), ('00531', 'Saudi Arabia Registration Number'), ('00532', 'Syria Registration Number'), ('00533', 'Yemen Registration Number'), ('00534', 'United Arab Emirates Chamber of Commerce Number'), ('00535', 'Bahrain Chamber of Commerce Number'), ('00536', 'Iran Chamber of Commerce Number'), ('00537', 'Jordan Chamber of Commerce Number'), ('00538', 'Kuwait Chamber of Commerce Number'), ('00539', 'Lebanon Chamber of Commerce Number'), ('00540', 'Oman Chamber of Commerce Number'), ('00541', 'Qatar Chamber of Commerce Number'), ('00542', 'Saudi Arabia Chamber of Commerce Number'), ('00543', 'Syria Chamber of Commerce Number'), ('00544', 'Yemen Chamber of Commerce Number'), ('00545', 'Angola Registration Number'), ('00546', 'Burkino Faso Registration Number'), ('00547', 'Burundi Registration Number'), ('00548', 'Benin Registration Number'), ('00549', 'Central African Republic Registration Number'), ('00055', 'Liechtenstein Registration Number'), ('00550', 'Congo Registration Number'), ('00551', 'Ivory Coast Registration Number'), ('00552', 'Cameroon Registration Number'), ('00553', 'Cape Verde Registration Number'), ('00554', 'Djibouti Registration Number'), ('00555', 'Algeria Registration Number'), ('00556', 'Egypt Registration Number'), ('00557', 'Eritrea Registration Number'), ('00558', 'Ethiopia Registration Number'), ('00559', 'Falkland Islands Registration Number'), ('00560', 'Gabon Registration Number'), ('00561', 'Ghana Registration Number'), ('00562', 'Gambia Registration Number'), ('00563', 'Guinea Registration Number'), ('00564', 'Equatorial Guinea Registration Number'), ('00565', 'Guinea-Bissau Registration Number'), ('00566', 'Kenya Registration Number'), ('00567', 'Comoros Registration Number'), ('00568', 'Liberia Registration Number'), ('00569', 'Morocco Registration Number'), ('00570', 'Madagascar Registration Number'), ('00571', 'Mali Registration Number'), ('00572', 'Mauritania Registration Number'), ('00573', 'Mauritius Registration Number'), ('00574', 'Malawi Registration Number'), ('00575', 'Mozambique Registration Number'), ('00576', 'Niger Registration Number'), ('00577', 'Nigeria Registration Number'), ('00578', 'Rwanda Registration Number'), ('00579', 'Seychelles Registration Number'), ('00580', 'Sudan Registration Number'), ('00581', 'St Helena Registration Number'), ('00582', 'Sierra Leone Registration Number'), ('00583', 'Senegal Registration Number'), ('00584', 'Somalia Registration Number'), ('00585', 'Chad Registration Number'), ('00586', 'Togo Registration Number'), ('00587', 'Tanzania Registration Number'), ('00588', 'Uganda Registration Number'), ('00589', 'Zambia Registration Number'), ('00590', 'Ivory Coast Chamber of Commerce Number'), ('00591', 'Cameroon Chamber of Commerce Number'), ('00592', 'Algeria Chamber of Commerce Number'), ('00593', 'Egypt Chamber of Commerce Number'), ('00594', 'Gabon Chamber of Commerce Number'), ('00595', 'Morocco Chamber of Commerce Number'), ('00596', 'Seychelles Chamber of Commerce Number'), ('00597', 'Senegal Chamber of Commerce Number'), ('00598', 'Ivory Coast Tax Registration Number'), ('00599', 'Cameroon Tax Registration Number'), ('00060', 'Italy Fiscal Code'), ('00600', 'Egypt Tax Registration Number'), ('00601', 'Gabon Tax Registration Number'), ('00602', 'Ghana Tax Registration Number'), ('00603', 'Morocco Tax Registration Number'), ('00604', 'Mauritius Tax Registration Number'), ('00605', 'Senegal Tax Registration Number'), ('00610', 'Botswana Tax Registration Number'), ('00620', 'Lesotho Tax Registration Number'), ('00630', 'Namibia Tax Registration Number'), ('00640', 'Swaziland Tax Registration Number'), ('00065', 'Denmark Registration Number'), ('00650', 'South Africa Value Added Tax Number'), ('00660', 'South Africa Tax Registration Number'), ('00670', 'South Africa Pay As You Earn Registration Number'), ('00070', 'Austria Trade Register Number'), ('00702', 'Switzerland Registration Number'), ('00075', 'Zimbabwe Organization Registration Number'), ('00080', 'Zimbabwe Individual Registration Number'), ('00090', 'Guatemalan Sole Commercial Registry Number'), ('00095', 'Colombian Registry of Fiscal Info'), ('00042', 'Netherlands Branch Unit Number'), ('00043', 'Netherlands Legal Entity And Partnership Information Number'), ('00122', 'East Timor Tax Identification Number'), ('00330', 'Philippinies Securities & Exchange Commission Number'), ('00335', 'India Society Registration Number'), ('00340', 'India Trade Registration Number'), ('00345', 'Pakistan Securites & Exchange Commission Number'), ('00350', 'Thailand Commercial Registration Number'), ('00355', 'Thailand Securities & Exchange Commission Number'), ('00360', 'Austria Association Registration Number'), ('00710', 'China National Organization Code'), ('00715', 'China Business Registration Number'), ('00720', 'Swiss Uniform Identification Number'), ('00740', 'Slovakia ICO Number'), ('00362', 'Monaco Trade & Industry Registration Number'), ('00142', 'Polish National Court Council Number'), ('00143', 'Polish License Number'), ('00293', 'Czech Republic Tax Registration Number'), ('00735', 'Slovakia Tax Registration Number'), ('00730', 'Slovakia Court Number of Registration'), ('00099', 'Japan Corporate Number'), ('00101', 'Japan Stock Exchange Number')], blank=True, null=True)
    us_tax_id = models.CharField(max_length=9, verbose_name='US Tax ID Number', blank=True, null=True)
    geo_code_accuracy = models.CharField(max_length=255, verbose_name='Geocode Accuracy', choices=[('D', 'Rooftop level. Precise physical address'), ('S', 'Street level. Correct street and within a range of street numbers. Accuracy .1 to .2 miles'), ('B', 'Block level. (ZIP+4 Centroid) Correct street and within a range of blocks. Accuracy .2 to .4 miles'), ('T', 'Census tract level. (ZIP+2 Centroid) Correct street and within a range of census tracts. Accuracy .4 to .6 miles'), ('M', 'Mailing address level. Physical address not valid or not present'), ('Z', 'ZIP code level. Correct 5-digit ZIP code'), ('0', 'Geocode could not be assigned'), ('C', 'Places the address in the correct city'), ('N', 'Not matched'), ('I', 'Street intersection'), ('P', 'PO Box location'), ('A', 'Non-US rooftop accuracy'), ('H', 'State or Province Centroid'), ('K', 'County Centroid'), ('G', 'Sub Locality-Street Level'), ('L', 'Locality Centroid')], blank=True, null=True)
    family_members = models.IntegerField(verbose_name='Number of Business Family Members', blank=True, null=True)
    marketing_pre_screen = models.CharField(max_length=255, verbose_name='Delinquency Risk', choices=[('L', 'Low risk of delinquency'), ('M', 'Moderate risk of delinquency'), ('H', 'High risk of delinquency')], blank=True, null=True)
    global_ultimate_duns_number = models.CharField(max_length=9, verbose_name='Global Ultimate D-U-N-S Number', blank=True, null=True)
    global_ultimate_business_name = models.CharField(max_length=255, blank=True, null=True)
    parent_or_hq_duns_number = models.CharField(max_length=9, verbose_name='Parent Company D-U-N-S Number', blank=True, null=True)
    parent_or_hq_business_name = models.CharField(max_length=255, verbose_name='Parent Company Business Name', blank=True, null=True)
    domestic_ultimate_duns_number = models.CharField(max_length=9, verbose_name='Domestic Ultimate D-U-N-S Number', blank=True, null=True)
    domestic_ultimate_business_name = models.CharField(max_length=255, blank=True, null=True)
    location_status = models.CharField(max_length=255, verbose_name='Location Type', choices=[('0', 'Single Location. No other entities report to the business'), ('1', 'Headquarters/Parent. Branches and/or subsidiaries report to the business'), ('2', 'Branch. Secondary location to a headquarters location')], blank=True, null=True)
    company_currency_iso_code = models.CharField(max_length=255, verbose_name='Local Currency ISO Code', choices=[('AED', 'AED - UAE Dirham'), ('AFN', 'AFN - Afghanistan Afghani (New)'), ('ALL', 'ALL - Albanian Lek'), ('AMD', 'AMD - Armenian Dram'), ('ANG', 'ANG - Neth Antilles Guilder'), ('AOA', 'AOA - Angola Kwanza'), ('ARS', 'ARS - Argentine Peso'), ('AUD', 'AUD - Australian Dollar'), ('AWG', 'AWG - Aruba Florin'), ('AZN', 'AZN - Azerbaijan Manat'), ('BAM', 'BAM - Convertible Marks'), ('BBD', 'BBD - Barbados Dollar'), ('BDT', 'BDT - Bangladesh Taka'), ('BGN', 'BGN - Bulgarian Lev'), ('BHD', 'BHD - Bahraini Dinar'), ('BIF', 'BIF - Burundi Franc'), ('BMD', 'BMD - Bermuda Dollar'), ('BND', 'BND - Brunei Dollar'), ('BOB', 'BOB - Bolivian Boliviano'), ('BOV', 'BOV - Bolivia Mvdol'), ('BRB', 'BRB - Brazilian Cruzeiro (old)'), ('BRL', 'BRL - Brazilian Real'), ('BSD', 'BSD - Bahamian Dollar'), ('BTN', 'BTN - Bhutan Ngultrum'), ('BWP', 'BWP - Botswana Pula'), ('BYN', 'BYN - Belarusian Ruble'), ('BYR', 'BYR - Belarusian Ruble'), ('BZD', 'BZD - Belize Dollar'), ('CAD', 'CAD - Canadian Dollar'), ('CDF', 'CDF - Franc Congolais'), ('CHF', 'CHF - Swiss Franc'), ('CLF', 'CLF - Unidades de fomento'), ('CLP', 'CLP - Chilean Peso'), ('CNY', 'CNY - Chinese Yuan'), ('COP', 'COP - Colombian Peso'), ('CRC', 'CRC - Costa Rica Colon'), ('CUC', 'CUC - Cuban Peso Convertible'), ('CUP', 'CUP - Cuban Peso'), ('CVE', 'CVE - Cape Verde Escudo'), ('CZK', 'CZK - Czech Koruna'), ('DJF', 'DJF - Dijibouti Franc'), ('DKK', 'DKK - Danish Krone'), ('DOP', 'DOP - Dominican Peso'), ('DZD', 'DZD - Algerian Dinar'), ('EEK', 'EEK - Estonian Kroon'), ('EGP', 'EGP - Egyptian Pound'), ('ERN', 'ERN - Eritrea Nakfa'), ('ETB', 'ETB - Ethiopian Birr'), ('EUR', 'EUR - Euro'), ('FJD', 'FJD - Fiji Dollar'), ('FKP', 'FKP - Falkland Islands Pound'), ('GBP', 'GBP - British Pound'), ('GEL', 'GEL - Georgia Lari'), ('GHS', 'GHS - Ghanaian Cedi'), ('GIP', 'GIP - Gibraltar Pound'), ('GMD', 'GMD - Gambian Dalasi'), ('GNF', 'GNF - Guinean Franc'), ('GTQ', 'GTQ - Guatemala Quetzal'), ('GYD', 'GYD - Guyana Dollar'), ('HKD', 'HKD - Hong Kong Dollar'), ('HNL', 'HNL - Honduras Lempira'), ('HRD', 'HRD - Croatian Dinar (Old)'), ('HRK', 'HRK - Kuna'), ('HTG', 'HTG - Haiti Gourde'), ('HUF', 'HUF - Hungarian Forint'), ('IDR', 'IDR - Indonesian Rupiah'), ('ILS', 'ILS - Israeli Shekel'), ('INR', 'INR - Indian Rupee'), ('IQD', 'IQD - Iraqi Dinar'), ('IRR', 'IRR - Iranian Rial'), ('ISK', 'ISK - Iceland Krona'), ('JMD', 'JMD - Jamaican Dollar'), ('JOD', 'JOD - Jordanian Dinar'), ('JPY', 'JPY - Japanese Yen'), ('KES', 'KES - Kenyan Shilling'), ('KGS', 'KGS - Kyrgyzstan Som'), ('KHR', 'KHR - Cambodia Riel'), ('KMF', 'KMF - Comorian Franc'), ('KPW', 'KPW - North Korean Won'), ('KRW', 'KRW - Korean Won'), ('KWD', 'KWD - Kuwaiti Dinar'), ('KYD', 'KYD - Cayman Islands Dollar'), ('KZT', 'KZT - Kazakhstan Tenge'), ('LAK', 'LAK - Lao Kip'), ('LBP', 'LBP - Lebanese Pound'), ('LKR', 'LKR - Sri Lanka Rupee'), ('LRD', 'LRD - Liberian Dollar'), ('LSL', 'LSL - Lesotho Loti'), ('LYD', 'LYD - Libyan Dinar'), ('MAD', 'MAD - Moroccan Dirham'), ('MDL', 'MDL - Moldovan Leu'), ('MGA', 'MGA - Malagasy Ariary'), ('MKD', 'MKD - Macedonian Denar'), ('MMK', 'MMK - Myanmar Kyat'), ('MNT', 'MNT - Mongolian Tugrik'), ('MOP', 'MOP - Macau Pataca'), ('MRO', 'MRO - Mauritanian Ougulya'), ('MRU', 'MRU - Mauritanian Ougulya'), ('MUR', 'MUR - Mauritius Rupee'), ('MVR', 'MVR - Maldives Rufiyaa'), ('MWK', 'MWK - Malawi Kwacha'), ('MXN', 'MXN - Mexican Peso'), ('MXV', 'MXV - Mexican Unidad de Inversion (UDI)'), ('MYR', 'MYR - Malaysian Ringgit'), ('MZN', 'MZN - Mozambique New Metical'), ('NAD', 'NAD - Namibian Dollar'), ('NGN', 'NGN - Nigerian Naira'), ('NIO', 'NIO - Nicaragua Cordoba'), ('NOK', 'NOK - Norwegian Krone'), ('NPR', 'NPR - Nepalese Rupee'), ('NZD', 'NZD - New Zealand Dollar'), ('OMR', 'OMR - Omani Rial'), ('PAB', 'PAB - Panama Balboa'), ('PEN', 'PEN - Peruvian Sol'), ('PGK', 'PGK - Papua New Guinea Kina'), ('PHP', 'PHP - Philippine Peso'), ('PKR', 'PKR - Pakistani Rupee'), ('PLN', 'PLN - Polish Zloty'), ('PYG', 'PYG - Paraguayan Guarani'), ('QAR', 'QAR - Qatar Rial'), ('RON', 'RON - Romanian Leu'), ('RSD', 'RSD - Serbian Dinar'), ('RUB', 'RUB - Russian Rouble'), ('RWF', 'RWF - Rwanda Franc'), ('SAR', 'SAR - Saudi Arabian Riyal'), ('SBD', 'SBD - Solomon Islands Dollar'), ('SCR', 'SCR - Seychelles Rupee'), ('SDG', 'SDG - Sudanese Pound'), ('SEK', 'SEK - Swedish Krona'), ('SGD', 'SGD - Singapore Dollar'), ('SHP', 'SHP - St Helena Pound'), ('SLL', 'SLL - Sierra Leone Leone'), ('SOS', 'SOS - Somali Shilling'), ('SRD', 'SRD - Surinam Dollar'), ('SSP', 'SSP - South Sudan Pound'), ('STD', 'STD - São Tomé and Príncipe Dobra'), ('STN', 'STN - São Tomé and Príncipe Dobra'), ('SYP', 'SYP - Syrian Pound'), ('SZL', 'SZL - Swaziland Lilageni'), ('THB', 'THB - Thai Baht'), ('TJS', 'TJS - Tajik Somoni'), ('TMT', 'TMT - Turkmenistan New Manat'), ('TND', 'TND - Tunisian Dinar'), ('TOP', "TOP - Tonga Pa'anga"), ('TRY', 'TRY - Turkish Lira (New)'), ('TTD', 'TTD - Trinidad&Tobago Dollar'), ('TWD', 'TWD - Taiwan Dollar'), ('TZS', 'TZS - Tanzanian Shilling'), ('UAH', 'UAH - Ukraine Hryvnia'), ('UGX', 'UGX - Ugandan Shilling'), ('USD', 'USD - U.S. Dollar'), ('UYU', 'UYU - Uruguayan Peso'), ('UZS', 'UZS - Uzbekistan Sum'), ('VEF', 'VEF - Venezuelan Bolivar Fuerte'), ('VES', 'VES - Venezuelan Bolívar Soberano'), ('VND', 'VND - Vietnam Dong'), ('VUV', 'VUV - Vanuatu Vatu'), ('WST', 'WST - Samoa Tala'), ('XAF', 'XAF - CFA Franc (BEAC)'), ('XCD', 'XCD - East Caribbean Dollar'), ('XOF', 'XOF - CFA Franc (BCEAO)'), ('XPF', 'XPF - Pacific Franc'), ('YER', 'YER - Yemen Riyal'), ('ZAR', 'ZAR - South African Rand'), ('ZMW', 'ZMW - Zambian Kwacha (New)'), ('ZWL', 'ZWL - Zimbabwe Dollar')], blank=True, null=True)
    description = models.TextField(verbose_name='Company Description', blank=True, null=True)
    fortune_rank = models.IntegerField(verbose_name='Fortune 1000 Rank', blank=True, null=True)
    included_in_sn_p500 = models.CharField(max_length=10, verbose_name='S&P 500', blank=True, null=True)
    premises_measure = models.IntegerField(verbose_name='Location Size', blank=True, null=True)
    premises_measure_reliability = models.CharField(max_length=64, verbose_name='Location Size Accuracy', blank=True, null=True)
    premises_measure_unit = models.CharField(max_length=64, verbose_name='Location Size Unit of Measure', blank=True, null=True)
    employee_quantity_growth_rate = models.DecimalField(max_digits=18, decimal_places=6, verbose_name='Employee Growth', blank=True, null=True)
    sales_turnover_growth_rate = models.DecimalField(max_digits=18, decimal_places=6, verbose_name='Annual Revenue Growth', blank=True, null=True)
    primary_sic8 = models.CharField(max_length=8, verbose_name='Primary SIC8 Code', blank=True, null=True)
    primary_sic8_desc = models.CharField(max_length=80, verbose_name='Primary SIC8 Description', blank=True, null=True)
    second_sic8 = models.CharField(max_length=8, verbose_name='Second SIC8 Code', blank=True, null=True)
    second_sic8_desc = models.CharField(max_length=80, verbose_name='Second SIC8 Description ', blank=True, null=True)
    third_sic8 = models.CharField(max_length=8, verbose_name='Third SIC8 Code', blank=True, null=True)
    third_sic8_desc = models.CharField(max_length=80, verbose_name='Third SIC8 Description', blank=True, null=True)
    fourth_sic8 = models.CharField(max_length=8, verbose_name='Fourth SIC8 Code', blank=True, null=True)
    fourth_sic8_desc = models.CharField(max_length=80, verbose_name='Fourth SIC8 Description', blank=True, null=True)
    fifth_sic8 = models.CharField(max_length=8, verbose_name='Fifth SIC8 Code', blank=True, null=True)
    fifth_sic8_desc = models.CharField(max_length=80, verbose_name='Fifth SIC8 Description', blank=True, null=True)
    sixth_sic8 = models.CharField(max_length=8, verbose_name='Sixth SIC8 Code', blank=True, null=True)
    sixth_sic8_desc = models.CharField(max_length=80, verbose_name='Sixth SIC8 Description', blank=True, null=True)
    prior_year_employees = models.IntegerField(verbose_name='Prior Year Number of Employees - Total', blank=True, null=True)
    prior_year_revenue = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DandBCompany'
        verbose_name = 'D&B Company'
        verbose_name_plural = 'D&B Companies'
        # keyPrefix = '06E'



class Dashboard(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    folder = models.ForeignKey('Folder', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Dashboard Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    left_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    middle_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')], blank=True, null=True)
    right_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    running_user = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_runninguser_set', sf_read_only=models.READ_ONLY)
    title_color = models.IntegerField(sf_read_only=models.READ_ONLY)
    title_size = models.IntegerField(sf_read_only=models.READ_ONLY)
    text_color = models.IntegerField(sf_read_only=models.READ_ONLY)
    background_start = models.IntegerField(verbose_name='Starting Color', sf_read_only=models.READ_ONLY)
    background_end = models.IntegerField(verbose_name='Ending Color', sf_read_only=models.READ_ONLY)
    background_direction = models.CharField(max_length=40, verbose_name='Background Fade Direction', sf_read_only=models.READ_ONLY, default='Diagonal', choices=[('TopToBottom', 'Top to Bottom'), ('LeftToRight', 'Left to Right'), ('Diagonal', 'Diagonal')])
    type = models.CharField(max_length=40, verbose_name='Dashboard Running User', sf_read_only=models.READ_ONLY, default='SpecifiedUser', choices=[('SpecifiedUser', 'Run as specified user'), ('LoggedInUser', 'Run as logged-in user'), ('MyTeamUser', 'Let authorized users change running user')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_refreshed_date = models.CharField(max_length=256, verbose_name='Last refreshed for this user', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_running_user = models.CharField(max_length=256, verbose_name='Running as', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Dashboard'
        verbose_name = 'Dashboard'
        verbose_name_plural = 'Dashboards'
        # keyPrefix = '01Z'



class DashboardComponent(models.Model):
    name = models.CharField(max_length=80, verbose_name='Dashboard Component Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard = models.ForeignKey(Dashboard, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    custom_report = models.ForeignKey('Report', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponent'
        verbose_name = 'Dashboard Component'
        verbose_name_plural = 'Dashboard Components'
        # keyPrefix = '01a'



class DashboardComponentFeed(models.Model):
    parent = models.ForeignKey(DashboardComponent, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardcomponentfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardcomponentfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponentFeed'
        verbose_name = 'Dashboard Component Feed'
        verbose_name_plural = 'Dashboard Component Feed'
        # keyPrefix = 'None'



class DashboardFeed(models.Model):
    parent = models.ForeignKey(Dashboard, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardFeed'
        verbose_name = 'Dashboard Feed'
        verbose_name_plural = 'Dashboard Feed'
        # keyPrefix = 'None'



class DataAssessmentFieldMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Field Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentfieldmetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentfieldmetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_assessment_metric = models.ForeignKey('DataAssessmentMetric', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_in_sync = models.IntegerField(verbose_name='Number of Matched Records that have the same value for this field as Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(verbose_name='Number of Matched Records that have different value for this field than Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_blanks = models.IntegerField(verbose_name='Number of Matched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched_blanks = models.IntegerField(verbose_name='Number of Unmatched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentFieldMetric'
        verbose_name = 'Data Assessment Field Metric'
        verbose_name_plural = 'Data Assessment Field Metrics'
        # keyPrefix = '03Q'



class DataAssessmentMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentmetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentmetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    num_total = models.IntegerField(verbose_name='Total Number of Records to access', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_processed = models.IntegerField(verbose_name='Number of Processed Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched = models.IntegerField(verbose_name='Number of Matched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(verbose_name='Number of Matched Records with different field values', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched = models.IntegerField(verbose_name='Number of Unmatched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_duplicates = models.IntegerField(verbose_name='Number of Duplicates', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentMetric'
        verbose_name = 'Data Assessment Metric'
        verbose_name_plural = 'Data Assessment Metrics'
        # keyPrefix = '03P'



class DataAssessmentValueMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Field Value Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentvaluemetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentvaluemetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_assessment_field_metric = models.ForeignKey(DataAssessmentFieldMetric, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_count = models.IntegerField(verbose_name='Number of times this value appears in this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentValueMetric'
        verbose_name = 'Data Assessment Field Value Metric'
        verbose_name_plural = 'Data Assessment Field Value Metrics'
        # keyPrefix = '03R'



class DataStatistics(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='ExternalId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stat_type = models.CharField(max_length=255, verbose_name='StatType', sf_read_only=models.READ_ONLY, choices=[('RecordCount', 'RecordCount'), ('UserAccessRecordCount', 'UserAccessRecordCount'), ('DeletedCount', 'DeletedCount')], blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('AcceptedEventRelation', None), ('AcceptedRecommendation', None), ('Account', None), ('AccountCleanInfo', None), ('AccountContactRole', None), ('AccountPartner', None), ('ActionApex', None), ('ActionAssignEscalate', None), ('ActionAssignTeam', None), ('ActionChatterPost', None), ('ActionChatterPostRecipient', None), ('ActionEmail', None), ('ActionEmailRecipient', None), ('ActionFieldUpdate', None), ('ActionFlow', None), ('ActionFlowParam', None), ('ActionKnowledgeSubmit', None), ('ActionLink', None), ('ActionLinkGroup', None), ('ActionLinkGroupAssoc', None), ('ActionLinkGroupTemplate', None), ('ActionLinkTemplate', None), ('ActionLinkTemplateBinding', None), ('ActionLinkUserState', None), ('ActionOutboundMessage', None), ('ActionOverride', None), ('ActionOverrideMetrics', None), ('ActionQuickCreate', None), ('ActionResponse', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('ActivityHistory', None), ('ActivityMetricRollupBase', None), ('ActivityRecurrence2', None), ('ActivityRecurrence2Exception', None), ('ActivityRelation', None), ('AdditionalNumber', None), ('AddressCountry', None), ('AddressState', None), ('AdminUser', None), ('AggregateResult', None), ('AllInstalledPackageVersion', None), ('AllManagedClassRelationship', None), ('AllManagedMemberOption', None), ('AllManagedPackageMember', None), ('AllOrganization', None), ('AllOrganizationValue', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllPackageVersionLm', None), ('AllUsersBasic', None), ('AnalyticAction', None), ('AnalyticActionConfiguration', None), ('AnalyticCondition', None), ('AnalyticNotification', None), ('AnalyticRecordUserAccess', None), ('AnalyticThreshold', None), ('AndroidPushApplicationSetup', None), ('Announcement', None), ('ApexClass', None), ('ApexClassIdentifier', None), ('ApexClassIdentifierRelationship', None), ('ApexClassMember', None), ('ApexCodeCoverage', None), ('ApexCodeCoverageAggregate', None), ('ApexComponent', None), ('ApexComponentAttribute', None), ('ApexComponentMember', None), ('ApexDebuggerBreakpoint', None), ('ApexDebuggerEvent', None), ('ApexDebuggerRequest', None), ('ApexDebuggerSession', None), ('ApexEmailNotification', None), ('ApexExecutionOverlayAction', None), ('ApexExecutionOverlayResult', None), ('ApexLog', None), ('ApexOrgWideCoverage', None), ('ApexPackage', None), ('ApexPackageIdentifier', None), ('ApexPage', None), ('ApexPageInfo', None), ('ApexPageMember', None), ('ApexTestQueueItem', None), ('ApexTestResult', None), ('ApexTestResultLimits', None), ('ApexTestRunResult', None), ('ApexTestSuite', None), ('ApexTrigger', None), ('ApexTriggerMember', None), ('ApiCapture', None), ('ApiLoginKey', None), ('ApiUsage', None), ('AppBrand', None), ('AppDefinition', None), ('AppIpRange', None), ('ApplePushApplicationSetup', None), ('Application', None), ('ApplicationDependency', None), ('AppManifest', None), ('AppManifestVersion', None), ('AppMenuItem', None), ('AppNotificationType', None), ('AppNotifTypeOrgSetting', None), ('AppNotifTypeUserSetting', None), ('AppTabMember', None), ('AqtAwrData', None), ('AqtCompoundRecommendedIndex', None), ('AqtCreatedIndex', None), ('AqtImportRequest', None), ('AqtImportRequestIndex', None), ('AqtIncidentDetection', None), ('AqtLongRunningRequestData', None), ('AqtRecommendedIndex', None), ('AqtRIRequestMap', None), ('AQTWorkloadData', None), ('ArticleMapInfo', None), ('Asset', None), ('AssetRelationship', None), ('AssetTokenEvent', None), ('AssignmentRule', None), ('AssistantInteraction', None), ('AssistantProgress', None), ('AssistantRecommendation', None), ('AssistantRecommendationType', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchMatchDetail', None), ('AsyncApiBatchOptions', None), ('AsyncApiChunkResults', None), ('AsyncApiJob', None), ('AsyncApiJobMatchDetail', None), ('AsyncApiJobOptions', None), ('AsyncApiQueryResult', None), ('AsyncApiTransformationSpec', None), ('AsyncRequest', None), ('AsyncRequestFFX', None), ('AsyncRequestFFXResult', None), ('AttachedContentDocument', None), ('Attachment', None), ('AudienceMembership', None), ('Auditable', None), ('AuraDefinition', None), ('AuraDefinitionBundle', None), ('AuraDefinitionBundleInfo', None), ('AuraDefinitionChange', None), ('AuraDefinitionInfo', None), ('AuraResource', None), ('AuthConfig', None), ('AuthConfigProviders', None), ('AuthProvider', None), ('AuthSecurityLevel', None), ('AuthSession', None), ('AutoActivityCaptureMetrics', None), ('AutoResponseRule', None), ('AvroSchema', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('BatchApexErrorEvent', None), ('BatchApexRelationship', None), ('BigObjectCounter', None), ('BigObjectsRecordMetrics', None), ('BlacklistedConsumer', None), ('BotSessionsMetrics', None), ('Branch', None), ('BranchMerge', None), ('BrandingSet', None), ('BrandingSetProperty', None), ('BrandingValue', None), ('BrandTemplate', None), ('BuffaloMigrationEvent', None), ('BuffaloMigrationManagement', None), ('BuffaloOrgEstimate', None), ('BuffaloStep', None), ('BusinessHours', None), ('BusinessProcess', None), ('BusinessProcessPicklist', None), ('Calendar', None), ('CalendarShare', None), ('CalendarSharing', None), ('CallCenter', None), ('Campaign', None), ('CampaignInfluenceAdjustment', None), ('CampaignInfluenceModel', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Canvas', None), ('CanvasFeedItem', None), ('CaptchaKey', None), ('Case', None), ('CaseContactRole', None), ('CaseEscalation', None), ('CaseHistory2', None), ('CaseSolution', None), ('CaseStatus', None), ('CaseSubjectParticle', None), ('CategoryAccess', None), ('CategoryData', None), ('CategoryJobTask', None), ('CategoryNode', None), ('Certificate', None), ('CertificateIp', None), ('ChangeDataCaptureEntity', None), ('ChangeList', None), ('ChangeListBranch', None), ('ChatSession', None), ('ChatSessionMembers', None), ('ChatterActivity', None), ('ChatterActivityDailyMetrics', None), ('ChatterConversation', None), ('ChatterConversationMember', None), ('ChatterExtension', None), ('ChatterExtensionConfig', None), ('ChatterExtensionInstance', None), ('ChatterGroupConMetrics', None), ('ChatterMessage', None), ('ChatterMessageThread', None), ('ChatterMetrics', None), ('ChatterNowUserFavorites', None), ('ChatterNowUserSettings', None), ('ChatterOrgWideMetrics', None), ('ChatterUniqueContributorDailyMetrics', None), ('ChatterUserNetworkMetrics', None), ('ChunkableEntityChunk', None), ('ChunkableEntityChunk2', None), ('ChunkableEntityTally', None), ('ChunkableEntityTally2', None), ('ChunkableTask', None), ('ChunkableTask2', None), ('CleanAccountBackup', None), ('CleanActivityLog', None), ('CleanBatchErrorLog', None), ('CleanContactBackup', None), ('CleanDataService', None), ('CleanEntityError', None), ('CleanEntityErrorLog', None), ('CleanFactEntityClaim', None), ('CleanFactFieldClaim', None), ('CleanFieldSettingOld', None), ('CleanInfo', None), ('CleanJobLog', None), ('CleanJobSetting', None), ('CleanLeadBackup', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupMemberRequest', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('CollaborationInvitation', None), ('CollaborativeFilteringItem_to_Item', None), ('CollaborativeFilteringItem2Item', None), ('ColorDefinition', None), ('CombinedAttachment', None), ('CommChannelLayout', None), ('CommChannelLayoutItem', None), ('CommChannelLayoutMapping', None), ('Community', None), ('CompactLayout', None), ('CompactLayoutInfo', None), ('CompactLayoutItem', None), ('CompactLayoutItemInfo', None), ('CompactLayoutMapping', None), ('ComponentAppVersion', None), ('ComponentFeatureDependency', None), ('ComponentInstance', None), ('ComponentInstanceProperty', None), ('ComponentObjectDependency', None), ('ComponentResourceLink', None), ('ComponentResponseCache', None), ('ConnectedApplication', None), ('ConnectedApplication2', None), ('ConnectedAppOauthPolicy', None), ('ConnectedAppPlugin', None), ('ConnectedAppSessionPolicy', None), ('ConnectivityAttributes', None), ('ConnectivityDevConfig', None), ('ConsoleConfig', None), ('ConsoleConfigItem', None), ('ConsolePersonalization', None), ('ConsoleSidebarContainer', None), ('Contact', None), ('ContactCleanInfo', None), ('ContainerAsyncRequest', None), ('ContentAsset', None), ('ContentBody', None), ('ContentDispositionAssignment', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentSubscription', None), ('ContentFolder', None), ('ContentFolderDistribution', None), ('ContentFolderItem', None), ('ContentFolderLink', None), ('ContentFolderMember', None), ('ContentLogMetricsByFileType', None), ('ContentLogMetricsByOrg', None), ('ContentMetrics', None), ('ContentNote', None), ('ContentNotification', None), ('ContentNotificationParam', None), ('ContentOrgMetrics', None), ('ContentReference', None), ('ContentRenditionPolicy', None), ('ContentTagName', None), ('ContentTagSubscription', None), ('ContentUserSubscription', None), ('ContentVersion', None), ('ContentVersionComment', None), ('ContentVersioningPolicy', None), ('ContentVersionMap', None), ('ContentVersionRating', None), ('ContentVersionRenditionContent', None), ('ContentVersionTagName', None), ('ContentWorkspace', None), ('ContentWorkspaceAllowedRecType', None), ('ContentWorkspaceDoc', None), ('ContentWorkspaceMember', None), ('ContentWorkspacePermission', None), ('ContentWorkspaceRecentEvent', None), ('ContentWorkspaceSubscription', None), ('ContextFieldAttributes', None), ('Contract', None), ('ContractContactRole', None), ('ContractStatus', None), ('CooperSettingsMetrics', None), ('CopyEntityTally', None), ('CopyEntityTally2', None), ('CopyExport', None), ('CopyExportChunk', None), ('CopyExportChunk2', None), ('CopyExportObserverInfo', None), ('CopyImport', None), ('CopyImportChunk', None), ('CopyImportChunk2', None), ('CopySuspension', None), ('CorsWhitelistEntry', None), ('CronFiredTrigger', None), ('CronJobDetail', None), ('CronTrigger', None), ('CrtColumn', None), ('CrtLayoutSection', None), ('CrtObject', None), ('CsnDomain', None), ('CspFrameAncestor', None), ('CspTrustedSite', None), ('CustomAppMetrics', None), ('CustomBrand', None), ('CustomBrandAsset', None), ('CustomConsoleComponent', None), ('CustomDataType', None), ('CustomDataTypeComponent', None), ('CustomEntityDefinition', None), ('CustomEntityTranslation', None), ('CustomEntityTruncateInfo', None), ('CustomFieldDataColumn', None), ('CustomFieldDefinition', None), ('CustomFieldMap', None), ('CustomFieldMember', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomIndexDefinition', None), ('CustomIndexFieldDefinition', None), ('CustomIndexUsage', None), ('CustomObjectUsageMetrics', None), ('CustomObjectUserLicenseMetrics', None), ('CustomObjTeamMemberMetric', None), ('CustomPage', None), ('CustomPageItem', None), ('CustomPageProfile', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('CustomSettingNameIndex', None), ('CustomSetup', None), ('CustomSetupDefinition', None), ('CustomShareRowCause', None), ('CustomTabDefinition', None), ('DandBCompany', None), ('Dashboard', None), ('DashboardComponent', None), ('DashboardComponentColumn', None), ('DashboardComponentResult', None), ('DashboardFilter', None), ('DashboardFilterItem', None), ('DashboardFilterRepCol', None), ('DashboardGridComponent', None), ('DashboardGridLayout', None), ('DashboardStickyFilter', None), ('DataAssessmentBIMetrics', None), ('DataAssessmentConfigItem', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DataCategory', None), ('DataCategoryGroup', None), ('DataCategoryMapping', None), ('DatacloudAddress', None), ('DatacloudCompany', None), ('DatacloudContact', None), ('DatacloudDandBCompany', None), ('DatacloudIndustry', None), ('DatacloudIndustryChapter', None), ('DatacloudIndustryCode', None), ('DatacloudIndustryContent', None), ('DatacloudIndustrySubChapter', None), ('DatacloudOwnedEntity', None), ('DatacloudPurchaseUsage', None), ('DataDotComCleanMetrics', None), ('DataDotComCleanPrefMetrics', None), ('DataDotComEntitySetting', None), ('DataDotComFieldSetting', None), ('DataDotComListPoolMetrics', None), ('DataExportEventInterface', None), ('Dataflow', None), ('DataflowGroupDependency', None), ('DataflowGroupMember', None), ('DataflowGroupTrigger', None), ('DataflowInstance', None), ('DataflowNode', None), ('DataflowNotification', None), ('DataflowRequest', None), ('DataflowVersion', None), ('DatasetAccess', None), ('DatasetRegister', None), ('DataStatistics', None), ('DataType', None), ('DBCThumbnail', None), ('DBCThumbnailFilter', None), ('DbLockUsage', None), ('DdcProspectorMetrics', None), ('DebugLevel', None), ('DeclarativePlatformMetrics', None), ('DeclinedEventRelation', None), ('DelegateGroup', None), ('DelegateGroupGrant', None), ('DelegateGroupMember', None), ('DependentPicklist', None), ('DeployMessage', None), ('DeployRequest', None), ('DeployTestResult', None), ('DevelopmentPackageVersion', None), ('DialerMinutesMetrics', None), ('DirectGroupMember', None), ('DirectMessage', None), ('DirectMessageMember', None), ('DirectMessageMemberActivity', None), ('DivTransferEvent', None), ('Document', None), ('DocumentAttachmentMap', None), ('Domain', None), ('DomainCookieStore', None), ('DomainProvision', None), ('DomainSite', None), ('DrDbHammerRequest', None), ('DunsRightAsyncAccountRecord', None), ('DunsRightAsyncBatch', None), ('DunsRightAsyncChunk', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('DuplicateRuleFilter', None), ('DuplicateRuleFilterItem', None), ('DuplicateRuleMatchRule', None), ('EclairNgMap', None), ('EclairNgMapGeoJson', None), ('EinsteinAppAnalytics', None), ('EltWorkflow', None), ('EmailBrand', None), ('EmailCapture', None), ('EmailConfigEntitySetting', None), ('EmailDisclaimer', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailSyncAdvancedSetting', None), ('EmailSyncConfig', None), ('EmailSyncEntitySetting', None), ('EmailSyncFieldMapping', None), ('EmailSyncValueMapping', None), ('EmailTemp', None), ('EmailTempAttachmentMap', None), ('EmailTemplate', None), ('EmailUserEntitySetting', None), ('EmbeddedServiceBranding', None), ('EmbeddedServiceConfig', None), ('EmbeddedServiceCustomLabel', None), ('EmbeddedServiceDetail', None), ('EmbeddedServiceLabel', None), ('EncryptableDataProblem', None), ('EncryptableDataProblemChunk', None), ('EncryptionStatistics', None), ('EncryptionStatisticsChunk', None), ('Endorsement', None), ('EngagementEvent', None), ('EngagementHistoryRollup', None), ('EnhancedEmailTemplate', None), ('EntityBlacklist', None), ('EntityCategoryGroup', None), ('EntityDataSize', None), ('EntityDefinition', None), ('EntityEventInterface', None), ('EntityFeedLayout', None), ('EntityHistory', None), ('EntityImplements', None), ('EntityIndexingPriority', None), ('EntityLimit', None), ('EntityLock', None), ('EntityParticle', None), ('EntitySharingModel', None), ('EntitySubscription', None), ('EscalationRule', None), ('Event', None), ('EventAssociationItem', None), ('EventAttendee', None), ('EventBusSubscriber', None), ('EventComments', None), ('EventDelivery', None), ('EventDeliveryData', None), ('EventLogFile', None), ('EventLogFileMetrics', None), ('EventParameter', None), ('EventParameterData', None), ('EventRecurrenceException', None), ('EventRelation', None), ('EventSubscription', None), ('EventSubscriptionData', None), ('EventSubscriptionHandleData', None), ('EventType', None), ('EventTypeDefinition', None), ('EventTypeFieldDefinition', None), ('EventTypeParameter', None), ('EventWhoRelation', None), ('ExchangeUserMapping', None), ('ExecutionPlan', None), ('Experiment', None), ('ExperimentRequest', None), ('ExternalActionParameter', None), ('ExternalCredential', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalIdMap', None), ('ExternalIdMapping', None), ('ExternalizedReference', None), ('ExternalServiceAction', None), ('ExternalServiceRegistration', None), ('ExternalServiceType', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('ExtIdentityLoginMetrics', None), ('FeatureLicense', None), ('FeedActionDefinition', None), ('FeedActionState', None), ('FeedAttachment', None), ('FeedChannel', None), ('FeedChannelSubscription', None), ('FeedClumpInfo', None), ('FeedClumpMapping', None), ('FeedComment', None), ('FeedCrossReference', None), ('FeedEntityRead', None), ('FeedEntityUnpublished', None), ('FeedEntry', None), ('FeedFavorite', None), ('FeedFieldHistory', None), ('FeedFilterCriterion', None), ('FeedFilterDefinition', None), ('FeedItem', None), ('FeedLike', None), ('FeedMapping', None), ('FeedMute', None), ('FeedPollChoice', None), ('FeedPollVote', None), ('FeedPost', None), ('FeedPostTemplate', None), ('FeedPostTemplateItem', None), ('FeedRead', None), ('FeedRecommendationInfo', None), ('FeedRevision', None), ('FeedSignal', None), ('FeedTrackedChange', None), ('FieldAttributes', None), ('FieldDefinition', None), ('FieldHistory', None), ('FieldImplements', None), ('FieldMapping', None), ('FieldMappingField', None), ('FieldMappingRow', None), ('FieldPermissions', None), ('FieldSet', None), ('FieldSetItem', None), ('FileFieldData', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FirehoseCheckpoint', None), ('FiscalYearSettings', None), ('FlexiPage', None), ('FlexipageComponentMetrics', None), ('FlexipagePageTypeMetrics', None), ('FlexiPageRegion', None), ('FlexQueueItem', None), ('FlowCategory', None), ('FlowCategoryItem', None), ('FlowDefinition', None), ('FlowElementTestCoverage', None), ('FlowInterview', None), ('FlowLightningComponent', None), ('FlowLightningComponentParam', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('FlowTestCoverage', None), ('FlowVariableAssignment', None), ('Folder', None), ('FolderClosure', None), ('FolderedContentDocument', None), ('ForecastingCategoryMapping', None), ('ForecastingCompositeKey', None), ('ForecastingDisplayedFamily', None), ('ForecastingShare', None), ('ForecastShare', None), ('ForgottenToken', None), ('FormulaFunction', None), ('FormulaFunctionCategory', None), ('FormulaOperator', None), ('FormulaParticle', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('FTestMetadataCatalogEntity', None), ('FTestSystemCatalogEntity', None), ('FTestToolingFLUInfo', None), ('GatherStatsTaskInfo', None), ('GitHubPushOperation', None), ('GitHubRepositoryLink', None), ('GlobalDbKey', None), ('GlobalOrganization', None), ('GlobalVariable', None), ('GlobalVariableType', None), ('Goal', None), ('GoalLink', None), ('GrantedByLicense', None), ('GridforceJob', None), ('Group', None), ('GroupBlowout', None), ('GroupMember', None), ('GroupSubscription', None), ('HadoopCounter', None), ('HadoopJob', None), ('HammerResultStatus', None), ('HistoricalDataFilter', None), ('HistoricalDataFilterItem', None), ('HistoricalEntityConfig', None), ('HistoricalFieldConfig', None), ('HistoricalSelector', None), ('HistoricalSelectorValue', None), ('HistoricalStaging', None), ('HistoricalTransactionPrefix', None), ('Holiday', None), ('IconDefinition', None), ('Idea', None), ('IdeaMetrics', None), ('IdeaReputationLevel', None), ('IDEPerspective', None), ('IDEWorkspace', None), ('IdpEventLog', None), ('ImportQueue', None), ('InboundSocialPost', None), ('IncrementalCandidate', None), ('IndexKeyDefinition', None), ('IndexKeyDefinitionItem', None), ('InstalledMobileApp', None), ('InstalledPackageVersion', None), ('InstalledSubscriberPackage', None), ('InstalledSubscriberPackageVersion', None), ('InstanceDirective', None), ('InstancePerm', None), ('InstanceSizeJob', None), ('IntelligenceField', None), ('InteractionActionCall', None), ('InteractionActionCallParam', None), ('InteractionAllocation', None), ('InteractionAllocator', None), ('InteractionApexCall', None), ('InteractionChoice', None), ('InteractionChoiceLookup', None), ('InteractionCondition', None), ('InteractionConnector', None), ('InteractionConstant', None), ('InteractionCountReport', None), ('InteractionDataColumn', None), ('InteractionDataInput', None), ('InteractionDataOutput', None), ('InteractionDataSource', None), ('InteractionDecision', None), ('InteractionDefinitionVersion', None), ('InteractionFieldMetaData', None), ('InteractionFieldValue', None), ('InteractionForm', None), ('InteractionFormula', None), ('InteractionLanguageMetrics', None), ('InteractionLayoutDetail', None), ('InteractionLayoutGroup', None), ('InteractionLCMetrics', None), ('InteractionLoop', None), ('InteractionMetadataValue', None), ('InteractionOperand', None), ('InteractionQuestion', None), ('InteractionReference', None), ('InteractionRefOrValue', None), ('InteractionResource', None), ('InteractionScreenFieldParam', None), ('InteractionScreenRule', None), ('InteractionScreenRuleAction', None), ('InteractionStage', None), ('InteractionStatement', None), ('InteractionSwitch', None), ('InteractionTodo', None), ('InteractionTranslMetrics', None), ('InteractionUsageMetrics', None), ('InteractionValueList', None), ('InteractionValueListEntry', None), ('InteractionVariable', None), ('InteractionWait', None), ('InteractionWaitEvent', None), ('InteractionWaitEventParam', None), ('InvocableAction', None), ('InvocableActionParameter', None), ('InvocableActionPicklist', None), ('IpWhitelist', None), ('JiffyTrace', None), ('JigsawSavedSearch', None), ('JobTracker', None), ('KanbanView', None), ('KnowledgeableUser', None), ('KnowledgeKeywordSearchHistory', None), ('KnowledgeLanguageConfig', None), ('KnowledgeSearchEventHistory', None), ('KnowledgeViewEventHistory', None), ('KnowledgeVoteEventHistory', None), ('LabelData', None), ('LabelDefinition', None), ('Layout', None), ('LayoutItem', None), ('LayoutItemActionRef', None), ('LayoutItemColumn', None), ('LayoutParticle', None), ('LayoutRightPanel', None), ('LayoutSection', None), ('LayoutSectionState', None), ('LbpmMetrics', None), ('Lead', None), ('LeadCleanInfo', None), ('LeadConvertMapping', None), ('LeadConvertSettings', None), ('LeadStatus', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('LicenseManagementOrgCertificate', None), ('LightningBolt', None), ('LightningBoltFeature', None), ('LightningBoltImage', None), ('LightningBoltItem', None), ('LightningComponentBundle', None), ('LightningComponentMetrics', None), ('LightningComponentResource', None), ('LightningComponentTag', None), ('LightningExitByPageMetrics', None), ('LightningExperienceTheme', None), ('LightningOnboarding', None), ('LightningServiceMetrics', None), ('LightningToggleMetrics', None), ('LightningUsageByAppTypeMetrics', None), ('LightningUsageByBrowserMetrics', None), ('LightningUsageByFlexiPageMetrics', None), ('LightningUsageByPageMetrics', None), ('LimitUsageHistory', None), ('LimitUsageTracker', None), ('LinkedInLeadGen', None), ('LinkedInLeadGenAdAccount', None), ('LinkedInLeadGenConfig', None), ('LinkedInLeadGenToken', None), ('ListColumn', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('ListLayout', None), ('ListLayoutItem', None), ('ListPoolUsage', None), ('ListView', None), ('ListViewChart', None), ('ListViewChartInstance', None), ('ListViewCriterion', None), ('ListViewDisplayColumn', None), ('LmaApiSession', None), ('LocalizedValue', None), ('LocalNamespace', None), ('LogAnalysisItem', None), ('LogAnalysisRun', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginGeo', None), ('LoginHistory', None), ('LoginHours', None), ('LoginIp', None), ('LoginIpEmail', None), ('LoginIpRange', None), ('LogSearch', None), ('LogSearchResult', None), ('LookedUpFromActivity', None), ('LpuAccessMapping', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MailAppExchangeUserMap', None), ('MailAppExchangeWhitelist', None), ('MailAppOwaWhitelist', None), ('MailAppSettings', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedTopicLocation', None), ('MassMail', None), ('MatchIndexDefinition', None), ('MatchIndexValue', None), ('MatchingInformation', None), ('MatchingRule', None), ('MatchingRuleItem', None), ('MaterializedFeedEntry', None), ('MenuItem', None), ('MessageIdentifier', None), ('MessagingAggregatedMetrics', None), ('MessagingMetrics', None), ('MetadataChangeTemplate', None), ('MetadataComponentDependency', None), ('MetadataContainer', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetadataContent', None), ('MetadataIdentifier', None), ('MetadataPackage', None), ('MetadataPackageVersion', None), ('MetaMindConnection', None), ('Metric', None), ('MetricDataLink', None), ('MetricsDataFile', None), ('MetricsTransmissionHistory', None), ('MobileApplicationDetail', None), ('MobileConfig', None), ('MobileDevice', None), ('MobileEntitySetting', None), ('MobileExcludedField', None), ('MobileMarkedRecord', None), ('MobilePushServiceDevice', None), ('MobilePushSetupRegistry', None), ('MobilePushUserUpdate', None), ('MobileSession', None), ('MobileTab', None), ('MobileView', None), ('MobileViewDisplayColumn', None), ('MobileViewFilter', None), ('MobileViewSortColumn', None), ('Module', None), ('ModuleDependency', None), ('MqSlaJob', None), ('MqSlaRequest', None), ('Mru', None), ('MultiCurrency', None), ('Name', None), ('Nameable', None), ('NamedCredential', None), ('NamedFilter', None), ('NameUnion', None), ('NetworkCustomerDailyLoginMetrics', None), ('NetworkCustomerLoginMetrics', None), ('NetworkLEADailyLoginMetrics', None), ('NetworkLEAPlusDailyLoginMetrics', None), ('NetworkPartnerDailyLoginMetrics', None), ('NetworkPartnerLoginMetrics', None), ('NetworkPCustDailyLoginMetrics', None), ('NetworkPowerCustomerLoginMetrics', None), ('NewsFeed', None), ('Note', None), ('NoteAndAttachment', None), ('NotifDeliveryUserPref', None), ('NotificationMember', None), ('NotifTypeOrgSetting', None), ('NotifTypeUserSetting', None), ('OauthClientRegistration', None), ('OauthConsumer', None), ('OauthConsumerAsset', None), ('OauthConsumerScope', None), ('OauthToken', None), ('OauthTokenLocal', None), ('ObjectMapping', None), ('ObjectMappingField', None), ('ObjectPermissions', None), ('OnboardingMetrics', None), ('OpenActivity', None), ('OperationLog', None), ('Opportunity', None), ('OpportunityAlert', None), ('OpportunityCompetitor', None), ('OpportunityContactRole', None), ('OpportunityHistory', None), ('OpportunityLineItem', None), ('OpportunityMetrics', None), ('OpportunityPartner', None), ('OpportunitySplitMetrics', None), ('OpportunityStage', None), ('OpportunityUpdateReminder', None), ('OpptyAndPricingMetrics', None), ('OptimizerMetricsAverage', None), ('OracleAwrSqlignore', None), ('OracleAwrSqlstat', None), ('OracleAwrSqltext', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('OrganizationValue', None), ('OrganizationValueInfo', None), ('OrgDeleteRequest', None), ('OrgEmailAddressSecurity', None), ('OrgLifecycleNotification', None), ('OrgObjectsMetrics', None), ('OrgRecommendation', None), ('OrgSigningKey', None), ('OrgSizingDataHolder', None), ('OrgSizingInfo', None), ('OrgStandardObjectsMetrics', None), ('OrgWideEmailAddress', None), ('OutboundField', None), ('OutboundMessage', None), ('OutgoingEmail', None), ('OutgoingEmailRelation', None), ('OvenExperiment', None), ('OwnedContentDocument', None), ('Owner', None), ('OwnerChangeOptionInfo', None), ('PacCrudPermission', None), ('Package2Member', None), ('Package2OauthConsumer', None), ('Package2UpgradeExport', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageDependency', None), ('PackageEvent', None), ('PackageExtension', None), ('PackageIdMapping', None), ('PackageInstallRequest', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageMember', None), ('PackageOperationError', None), ('PackageSupportAccess', None), ('PackageUploadRequest', None), ('PackageVersionInstallRequestError', None), ('PackageVersionPatchOrg', None), ('PackageVersionUninstallRequestError', None), ('PageComponent', None), ('ParallelJobItemData', None), ('ParallelJobStatus', None), ('PartitionStatus', None), ('Partner', None), ('PartnerNetworkSetup', None), ('PartnerRole', None), ('PathAssistant', None), ('PathAssistantStepInfo', None), ('PathAssistantStepItem', None), ('PendingChange', None), ('PendingChangeContainer', None), ('Period', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PermissionSetLicenseMetrics', None), ('PermissionSetMetricsByOrg', None), ('PermissionSetTabSetting', None), ('PersonAccountMetrics', None), ('Personalization', None), ('PersonalizationResource', None), ('PersonalizedUnswdQuestion', None), ('PhoenixDataSync', None), ('Photo', None), ('PhotoItem', None), ('PicklistItemProperty', None), ('PicklistMaster', None), ('PicklistSet', None), ('PicklistValueInfo', None), ('PinnedEntity', None), ('PinPlan', None), ('PlatformAction', None), ('PlatformActionList', None), ('PlatformActionListItem', None), ('PlatformActionMetrics', None), ('PlatformCachePartition', None), ('PlatformCachePartitionType', None), ('PlatformCacheTrial', None), ('PlatformEventConduitMetrics', None), ('PlatformOrgObjectMetrics', None), ('PlinyPhysicalDeleteJob', None), ('Portal', None), ('PortalAccount', None), ('PortalLanguageConfig', None), ('PortalLanguageTabConfig', None), ('PortalMember', None), ('PortalStyleConfig', None), ('PostArchivalDeletionRequest', None), ('PredictiveModel', None), ('Pricebook', None), ('Pricebook2', None), ('Pricebook2Old', None), ('PricebookEntry', None), ('PricebookShare', None), ('PrivacyConsent', None), ('ProcessActionItem', None), ('ProcessAllowedSubmitter', None), ('ProcessDefinition', None), ('ProcessInstance', None), ('ProcessInstanceHistory', None), ('ProcessInstanceNode', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessMetrics', None), ('ProcessNode', None), ('ProcessNodeSecurity', None), ('ProcessPlugin', None), ('ProcessPluginParameter', None), ('ProcessTimeQueue', None), ('ProcessTransition', None), ('ProcessTransitionAction', None), ('ProcessTransitionApprover', None), ('ProcessTransitionCondition', None), ('ProcessTransitionSecurity', None), ('ProcessTypeDefinition', None), ('ProcessWorkitemProperties', None), ('ProdDbHammerFlaggedRequest', None), ('ProdDbHammerRequest', None), ('Product', None), ('Product2', None), ('Profile', None), ('ProfileActionOverride', None), ('ProfileClientSettings', None), ('ProfileIpRestrictionMetrics', None), ('ProfileLayout', None), ('ProfilePasswordPolicy', None), ('ProfilePortalDelegate', None), ('ProfileRecordType', None), ('ProfileSessionSetting', None), ('ProfileTabSetConfiguration', None), ('Project', None), ('ProposedEventResponse', None), ('ProposedEventTime', None), ('PublicSolution', None), ('Publisher', None), ('PushIntent', None), ('PushProfileMapping', None), ('PushTopic', None), ('PushUpgradeExcludedOrg', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QmosEntityDefinition', None), ('QmosInColMap1', None), ('QmosMatCol1', None), ('QmosMatEntityMeta', None), ('QmosQuery1', None), ('QmosQueryCol1', None), ('QmosQueryStatus', None), ('QmosSelCol1', None), ('QoptimizerLimitOverride', None), ('QoptimizerOption', None), ('QuerySet', None), ('QuerySetItem', None), ('Queue', None), ('QueueMember', None), ('QueueSobject', None), ('QuickActionDefinition', None), ('QuickActionList', None), ('QuickActionListItem', None), ('QuickActionMetrics', None), ('QuickText', None), ('RateLimitingNotification', None), ('RateLimitIntBuckets', None), ('RawEmail', None), ('ReadOnlyAppserver', None), ('ReadOnlyAuthSession', None), ('ReadOnlyClientBrowser', None), ('ReadOnlyLoginHistory', None), ('ReadOnlyLoginIp', None), ('ReadOnlyLoginIpEmail', None), ('ReadOnlyLoginMessage', None), ('ReadOnlyMemcachedServer', None), ('ReadOnlyOauthToken', None), ('ReadOnlyOauthTokenScope', None), ('ReadOnlyRedisServer', None), ('ReadOnlySecurityToken', None), ('ReadOnlyUserLogin', None), ('RecalcCampaignStats', None), ('RecentlyViewed', None), ('RecommendationAudience', None), ('RecommendationBlacklist', None), ('RecommendationDefinition', None), ('RecommendationMetric', None), ('RecommendationSimilarity', None), ('RecommendationUserActivity', None), ('RecordAction', None), ('RecordActionHistory', None), ('RecordOrigin', None), ('RecordSalt', None), ('RecordType', None), ('RecordTypePicklist', None), ('RecordUserAccessInterface', None), ('RelatedEntity', None), ('RelationshipDomain', None), ('RelationshipInfo', None), ('RemoteProxy', None), ('Renderer', None), ('Report', None), ('ReportAggregate', None), ('ReportBlock', None), ('ReportBlockAggregate', None), ('ReportBreak', None), ('ReportBucketField', None), ('ReportBucketFieldSourceValue', None), ('ReportBucketFieldValue', None), ('ReportChart', None), ('ReportColorRange', None), ('ReportColumn', None), ('ReportFilterItem', None), ('ReportInstance', None), ('ReportInstanceCsvResult', None), ('ReportInstanceQuery', None), ('ReportJob', None), ('ReportJobFieldMap', None), ('ReportJobRun', None), ('ReportJobRunError', None), ('ReportObjectFilterItem', None), ('ReportParam', None), ('ReportRunTracker', None), ('Repository', None), ('RequestThrottle', None), ('RequestTrace', None), ('ResetAsyncRequest', None), ('RichTextAreaFieldData', None), ('RuleFilter', None), ('RuleFilterAction', None), ('RuleFilterItem', None), ('S2XAdminError', None), ('S2XContactMap', None), ('S2XEventMap', None), ('S2XEventRecordMap', None), ('S2XEventTxnProps', None), ('S2XExchOAuthCredential', None), ('S2XGoogleServiceAccount', None), ('S2XPushSubscription', None), ('S2XRecordMap', None), ('S2XSandmanError', None), ('S2XServiceAccount', None), ('S2XTransaction', None), ('S2XTransactionLock', None), ('S2XUserMap', None), ('SamlSsoConfig', None), ('SampledEntity', None), ('SandboxDimensionMetrics', None), ('SandboxOrgDimensionMetrics', None), ('SandOmBulkExport', None), ('SandOmExportedBlob', None), ('SandOmImportInfo', None), ('SandOmImportInfoDetail', None), ('SandOmInfo', None), ('SandOmInfoDetail', None), ('SandOmObserver', None), ('SandstormWhitelist', None), ('ScheduledRecommendation', None), ('SchemaBuilderLayout', None), ('SchemaBuilderLayoutItem', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ScrutinyPkChunkData', None), ('ScrutinyRun', None), ('SCSInboundSettings', None), ('SCSTermsOfService', None), ('SearchActivity', None), ('SearchLayout', None), ('SearchPromotionRule', None), ('SearchQuerySuggestion', None), ('SecureAgent', None), ('SecureAgentPlugin', None), ('SecureAgentPluginProperty', None), ('SecureAgentsCluster', None), ('SecurityCustomBaseline', None), ('SecurityHealthCheck', None), ('SecurityHealthCheckRisks', None), ('SegmentSpace', None), ('SegmentSpaceChunk', None), ('SendEmailActionDefinition', None), ('Service', None), ('ServiceDataType', None), ('ServiceDeskAttributes', None), ('ServiceDeskComponent', None), ('ServiceDeskCustomStyling', None), ('ServiceDeskHotkey', None), ('ServiceFieldDataType', None), ('ServiceProvider', None), ('ServiceVersion', None), ('SessionLevelPolicy', None), ('SessionPermSetActivation', None), ('SettingsTemplate', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupAuditTrail', None), ('SetupCustomNode', None), ('SetupEntityAccess', None), ('SetupFlowProgress', None), ('SetupNode', None), ('SfdcOutboundMessage', None), ('SfdcPartner', None), ('SharedPicklistDefinition', None), ('ShareInterface', None), ('SharingMetrics', None), ('SharingOperation', None), ('SharingPortalMetrics', None), ('SharingRowCauseMetrics', None), ('SharingSet', None), ('SharingUserMetrics', None), ('SidebarComponentLayout', None), ('Site', None), ('SiteAsset', None), ('SiteChangelist', None), ('SiteChangelistComponent', None), ('SiteComponent', None), ('SiteDetail', None), ('SiteDomain', None), ('SiteIframeWhiteListUrl', None), ('SitePageOverride', None), ('SitePub', None), ('SitePubAsset', None), ('SitePubComponent', None), ('SitePubDomain', None), ('SitePubDomainSite', None), ('SiteRedirectMapping', None), ('SkinnyIndex', None), ('SkinnyIndexColumn', None), ('SkinnyTable', None), ('SkinnyTableExt', None), ('SkinnyTableField', None), ('SocialPersona', None), ('SocialUserAuth', None), ('SoftDeletable', None), ('SoftphoneLayout', None), ('SoftphoneLayoutCallType', None), ('SoftphoneLayoutInfoField', None), ('SoftphoneLayoutItem', None), ('SoftphoneLayoutSection', None), ('SoftphoneScreenPopOption', None), ('Solution', None), ('SolutionStatus', None), ('SourceObjectAttributes', None), ('Split', None), ('SplitAction', None), ('SplitActionResult', None), ('SplitFrameworkResult', None), ('SplitMapping', None), ('SplitPod', None), ('SPSamlAttributes', None), ('SqlIdToRequestMap', None), ('StagingArea', None), ('Stamp', None), ('StampAssignment', None), ('StandardAction', None), ('StandardReportType', None), ('StandardValueSet', None), ('StaticResource', None), ('StorageConfigAuditTrail', None), ('StreamingChannel', None), ('Subinteraction', None), ('SubinteractionVariableAssignment', None), ('SubscriberPackage', None), ('SubscriberPackageVersion', None), ('SubscriberPackageVersionInstallRequest', None), ('SubscriberPackageVersionUninstallRequest', None), ('SubscriberTabSetMember', None), ('SummaryLayout', None), ('SummaryLayoutItem', None), ('SummaryLayoutSliceInfo', None), ('SupportOrgWideMetrics', None), ('SyncTransactionLog', None), ('Synonym', None), ('SynonymDictionary', None), ('SynonymGroup', None), ('SystemStreamingChannel', None), ('TabDefinition', None), ('TabSet', None), ('TabSetMember', None), ('Task', None), ('TaskAssociationItem', None), ('TaskGroup', None), ('TaskPriority', None), ('TaskRecurrenceException', None), ('TaskRelation', None), ('TaskStatus', None), ('TaskWhoRelation', None), ('TemplateDeployment', None), ('TemplateDeploymentItem', None), ('TempStore', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantSecret', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('TestSuiteMembership', None), ('ThirdPartyAccountLink', None), ('ThirdPartyAccountLinkLocal', None), ('TodayCard', None), ('TodayCardProperty', None), ('TodayGoal', None), ('Tombstone', None), ('Topic', None), ('TopicAssignment', None), ('TopicComputeStatus', None), ('TopicDataCategoryRule', None), ('TopicGroupActivity', None), ('TopicIndex', None), ('TopicNameChange', None), ('TopicOntology', None), ('TopicRecordSetting', None), ('TopicSuggestionSetting', None), ('TopicTerm', None), ('TopicUserActivity', None), ('TopicUserEvent', None), ('TraceFlag', None), ('Training', None), ('TransactionSecurityAction', None), ('TransactionSecurityActionEvent', None), ('TransactionSecurityEventInterface', None), ('TransactionSecurityPolicy', None), ('TransitionMessage', None), ('Translation', None), ('TrendingTopic', None), ('TrendIntervalLookup', None), ('TrialMaster', None), ('TwoFactorAuthPairing', None), ('TwoFactorInfo', None), ('TwoFactorMethodsInfo', None), ('TwoFactorMethodsInfoLocal', None), ('TwoFactorMetrics', None), ('TwoFactorTempCode', None), ('TwoFactorU2F', None), ('UiFormulaCriterion', None), ('UiFormulaRule', None), ('UndecidedEventRelation', None), ('UninstallExport', None), ('User', None), ('UserActivityTimelineFilter', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserAppMenuItem', None), ('UserComponentData', None), ('UserDimMetrics', None), ('UserEmailPreferredPerson', None), ('UserEntityAccess', None), ('UserFavorite', None), ('UserFeedChannel', None), ('UserFieldAccess', None), ('UserLicense', None), ('UserLicenseMetrics', None), ('UserListPreference', None), ('UserListPrefs', None), ('UserListView', None), ('UserListViewCriterion', None), ('UserLogin', None), ('UserMembershipSharingRule', None), ('UserMetrics', None), ('UserNavItem', None), ('UserPackageLicense', None), ('UserPermissionAccess', None), ('UserPreference', None), ('UserProfile', None), ('UserProfileFeed', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningConfig', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('UserRecommendation', None), ('UserRecordAccess', None), ('UserRecSummary', None), ('UserRole', None), ('UserSetupAppInfo', None), ('UserVerificationMessageUse', None), ('UtilityBarMetrics', None), ('ValidationFormula', None), ('ValidationRuleInfo', None), ('ValidationRuleMember', None), ('VerificationHistory', None), ('VerificationMessageCreditMetrics', None), ('VersionedContentEntity', None), ('VersionSet', None), ('VisualforceAccessMetrics', None), ('VisualforceMetrics', None), ('Vote', None), ('VoteConfig', None), ('VoteStats', None), ('WaveBaseDataset', None), ('WaveBaseField', None), ('WaveDataConnector', None), ('WaveExternalConnProperty', None), ('WaveReplicationFilterItem', None), ('WebLink', None), ('WebServiceDefinition', None), ('WindowsPushApplicationSetup', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkflowAlertMember', None), ('WorkflowFieldUpdateMember', None), ('WorkflowOutboundMessageMember', None), ('WorkflowRule', None), ('WorkflowRuleMember', None), ('WorkflowTaskMember', None), ('WorkflowTimeAction', None), ('WorkflowTimeQueue', None), ('WorkflowTimeTrigger', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkOrderLineItemStatus', None), ('WorkOrderStatus', None), ('WorkPerformanceCycle', None), ('WsdlDataType', None), ('XCleanBulkJob', None), ('XCleanMatchRateMetrics', None), ('XinstanceInfo', None), ('XmlSchema', None)], blank=True, null=True)
    stat_value = models.IntegerField(verbose_name='StatValue', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataStatistics'
        verbose_name = 'Data Statistics'
        verbose_name_plural = 'Data Statistics'
        # keyPrefix = '05a'



class DataType(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Data Type Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=70, verbose_name='Data Type Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_complex = models.BooleanField(verbose_name='Is this Data Type Complex?', sf_read_only=models.READ_ONLY, default=False)
    context_service_data_type_id = models.CharField(max_length=70, verbose_name='Service Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    context_wsdl_data_type_id = models.CharField(max_length=70, verbose_name='WSDL Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataType'
        verbose_name = 'Data Type'
        verbose_name_plural = 'Data Types'
        # keyPrefix = '4dt'



class DatacloudAddress(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Data.com Address ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line1 = models.CharField(max_length=255, verbose_name=' Address Line 1 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line2 = models.CharField(max_length=255, verbose_name=' Address Line 2 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=255, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=255, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.CharField(max_length=11, verbose_name=' Latitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.CharField(max_length=11, verbose_name='Longitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_code = models.CharField(max_length=15, verbose_name=' GeoAccuracy Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_num = models.CharField(max_length=3, verbose_name=' GeoAccuracy Num', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudAddress'
        verbose_name = 'Data.com Address'
        verbose_name_plural = 'Data.com Addresses'
        # keyPrefix = '07m'



class DatacloudCompany(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Data.com Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_id = models.CharField(max_length=25, verbose_name='Data.com Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=128, verbose_name='Company Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=400, verbose_name='Company Synopsis', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_inactive = models.BooleanField(verbose_name='Inactive Status', sf_read_only=models.READ_ONLY, default=False)
    phone = models.CharField(max_length=40, verbose_name='Phone Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Fax Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(max_length=255, verbose_name='Street Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_code = models.CharField(max_length=255, verbose_name='State', sf_read_only=models.READ_ONLY, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AS', 'American Samoa'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FM', 'Federated Micronesia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('GU', 'Guam'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MH', 'Marshall Islands'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('MP', 'Northern Mariana Islands'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PW', 'Palau'), ('PA', 'Pennsylvania'), ('PR', 'Puerto Rico'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VI', 'US Virgin Islands'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], blank=True, null=True)
    country = models.CharField(max_length=50, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_code = models.CharField(max_length=255, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, choices=[('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AT', 'Austria'), ('AU', 'Australia'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BT', 'Bhutan'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BO', 'Bolivia, Plurinational State of'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BR', 'Brazil'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('GQ', 'Equatorial Guinea'), ('SV', 'El Salvador'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IQ', 'Iraq'), ('IR', 'Iran, Islamic Republic of'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IT', 'Italy'), ('JP', 'Japan'), ('JM', 'Jamaica'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('ML', 'Mali'), ('MV', 'Maldives'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NL', 'Netherlands'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('MP', 'Northern Mariana Islands'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('CS', 'Serbia and Montenegro'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Vietnam'), ('VG', 'Virgin Islands, British'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    zip = models.CharField(max_length=32, sf_read_only=models.READ_ONLY, blank=True, null=True)
    site = models.CharField(max_length=255, verbose_name='Location Type', sf_read_only=models.READ_ONLY, choices=[('Branch', 'Branch'), ('Headquarters', 'Headquarters'), ('Single Location', 'Single Location')], blank=True, null=True)
    industry = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employee Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    duns_number = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    naics_code = models.CharField(max_length=128, verbose_name='NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    naics_desc = models.CharField(max_length=128, verbose_name='NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic = models.CharField(max_length=128, verbose_name='SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic_desc = models.CharField(max_length=128, verbose_name='SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ownership = models.CharField(max_length=16, verbose_name='Ownership Status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_owned = models.BooleanField(verbose_name='Owned', sf_read_only=models.READ_ONLY, default=False)
    ticker_symbol = models.CharField(max_length=16, verbose_name='Stock Ticker Symbol', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trade_style = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    website = models.URLField(verbose_name='Company or Website', sf_read_only=models.READ_ONLY, blank=True, null=True)
    year_started = models.CharField(max_length=4, verbose_name='Company Founding Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    active_contacts = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    updated_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fortune_rank = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    included_in_sn_p500 = models.CharField(max_length=10, verbose_name='Included In S&P 500', sf_read_only=models.READ_ONLY, blank=True, null=True)
    premises_measure = models.IntegerField(verbose_name='Premises Area Measurement', sf_read_only=models.READ_ONLY, blank=True, null=True)
    premises_measure_reliability = models.CharField(max_length=64, verbose_name='Premises Area Measurement Reliability Text', sf_read_only=models.READ_ONLY, blank=True, null=True)
    premises_measure_unit = models.CharField(max_length=64, verbose_name='Premises Area Unit of Measurement', sf_read_only=models.READ_ONLY, blank=True, null=True)
    employee_quantity_growth_rate = models.DecimalField(max_digits=18, decimal_places=6, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sales_turnover_growth_rate = models.DecimalField(max_digits=18, decimal_places=6, sf_read_only=models.READ_ONLY, blank=True, null=True)
    prior_year_employees = models.IntegerField(verbose_name='Prior Year Employee', sf_read_only=models.READ_ONLY, blank=True, null=True)
    prior_year_revenue = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_in_crm = models.BooleanField(verbose_name='In CRM', sf_read_only=models.READ_ONLY, default=False)
    full_address = models.CharField(max_length=255, verbose_name='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic_code_desc = models.CharField(max_length=255, verbose_name='Industry Codes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudCompany'
        verbose_name = 'Data.com Company'
        verbose_name_plural = 'Data.com Companies'
        # keyPrefix = '09K'



class DatacloudContact(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Data.com Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_id = models.CharField(max_length=25, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_id = models.CharField(max_length=25, verbose_name='Data.com Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_name = models.CharField(max_length=128, verbose_name='Company', sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_inactive = models.BooleanField(verbose_name='Inactive Status', sf_read_only=models.READ_ONLY, default=False)
    first_name = models.CharField(max_length=128, verbose_name='First name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=128, verbose_name='Last name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(max_length=255, verbose_name='Street Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=50, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, blank=True, null=True)
    zip = models.CharField(max_length=32, verbose_name='ZIP code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    department = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Sales', 'Sales'), ('Marketing', 'Marketing'), ('Finance', 'Finance'), ('HR', 'Human Resources'), ('Support', 'Support'), ('Engineering', 'Engineering'), ('Operations', 'Operations'), ('IT', 'IT'), ('Other', 'Other')], blank=True, null=True)
    level = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('C-Level', 'C-Level'), ('VP', 'VP'), ('Director', 'Director'), ('Manager', 'Manager'), ('Staff', 'Staff'), ('Other', 'Other')], blank=True, null=True)
    is_owned = models.BooleanField(verbose_name='Owned', sf_read_only=models.READ_ONLY, default=False)
    updated_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_in_crm = models.BooleanField(verbose_name='In CRM', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudContact'
        verbose_name = 'Data.com Contact'
        verbose_name_plural = 'Data.com Contacts'
        # keyPrefix = '08C'



class DatacloudDandBcompany(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='D&B Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='D&B Company Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duns_number = models.CharField(max_length=9, verbose_name='D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_id = models.CharField(max_length=25, verbose_name='D&B Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(max_length=255, verbose_name='Street Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_code = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_code = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    zip = models.CharField(max_length=32, verbose_name='Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, verbose_name='Telephone Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Facsimile Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_access_code = models.CharField(max_length=4, verbose_name='International Dialing Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    public_indicator = models.CharField(max_length=255, verbose_name='Ownership Type Indicator', sf_read_only=models.READ_ONLY, choices=[('Y', 'Public'), ('N', 'Private')], blank=True, null=True)
    stock_symbol = models.CharField(max_length=6, verbose_name='Ticker Symbol', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stock_exchange = models.CharField(max_length=16, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sales_volume = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Annual Sales Volume', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url = models.URLField(db_column='URL', verbose_name='URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    out_of_business = models.CharField(max_length=255, verbose_name='Out Of Business Indicator', sf_read_only=models.READ_ONLY, choices=[('Y', 'Out of Business'), ('N', 'Not Out of Business')], blank=True, null=True)
    employees_total = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Employees - Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fips_msa_code = models.CharField(max_length=5, verbose_name='FIPS MSA Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fips_msa_desc = models.CharField(max_length=255, verbose_name='FIPS MSA Code Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trade_style1 = models.CharField(max_length=255, verbose_name='Primary Tradestyle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    year_started = models.CharField(max_length=4, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_street = models.CharField(max_length=255, verbose_name='Mailing Street Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_state = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_state_code = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_country = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_country_code = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_zip = models.CharField(max_length=32, verbose_name='Mailing Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.CharField(max_length=11, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.CharField(max_length=11, sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_sic = models.CharField(max_length=4, verbose_name='Primary SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_sic_desc = models.CharField(max_length=80, verbose_name='Primary SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    second_sic = models.CharField(max_length=4, verbose_name='Second SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    second_sic_desc = models.CharField(max_length=80, verbose_name='Second SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    third_sic = models.CharField(max_length=4, verbose_name='Third SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    third_sic_desc = models.CharField(max_length=80, verbose_name='Third SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fourth_sic = models.CharField(max_length=4, verbose_name='Fourth SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fourth_sic_desc = models.CharField(max_length=80, verbose_name='Fourth SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fifth_sic = models.CharField(max_length=4, verbose_name='Fourth SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fifth_sic_desc = models.CharField(max_length=80, verbose_name='Fifth SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sixth_sic = models.CharField(max_length=4, verbose_name='Sixth SIC Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sixth_sic_desc = models.CharField(max_length=80, verbose_name='Sixth SIC Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_naics = models.CharField(max_length=6, verbose_name='Primary NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_naics_desc = models.CharField(max_length=120, verbose_name='Primary NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    second_naics = models.CharField(max_length=6, verbose_name='Second NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    second_naics_desc = models.CharField(max_length=120, verbose_name='Second NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    third_naics = models.CharField(max_length=6, verbose_name='Third NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    third_naics_desc = models.CharField(max_length=120, verbose_name='Third NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fourth_naics = models.CharField(max_length=6, verbose_name='Fourth NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fourth_naics_desc = models.CharField(max_length=120, verbose_name='Fourth NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fifth_naics = models.CharField(max_length=6, verbose_name='Fifth NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fifth_naics_desc = models.CharField(max_length=120, verbose_name='Fifth NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sixth_naics = models.CharField(max_length=6, verbose_name='Sixth NAICS Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sixth_naics_desc = models.CharField(max_length=120, verbose_name='Sixth NAICS Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    own_or_rent = models.CharField(max_length=255, verbose_name='Location Ownership Indicator', sf_read_only=models.READ_ONLY, choices=[('0', 'Unknown or Not Applicable'), ('1', 'Owns'), ('2', 'Rents')], blank=True, null=True)
    employees_here = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Employees - Location', sf_read_only=models.READ_ONLY, blank=True, null=True)
    employees_here_reliability = models.CharField(max_length=255, verbose_name='Number of Employees - Location Indicator', sf_read_only=models.READ_ONLY, choices=[('0', 'Actual number'), ('1', 'Low'), ('2', 'Estimated (for all records)'), ('3', 'Modeled (for non-US records)')], blank=True, null=True)
    sales_volume_reliability = models.CharField(max_length=255, verbose_name='Annual Sales Volume Indicator', sf_read_only=models.READ_ONLY, choices=[('0', 'Actual number'), ('1', 'Low'), ('2', 'Estimated (for all records)'), ('3', 'Modeled (for non-US records)')], blank=True, null=True)
    currency_code = models.CharField(max_length=255, verbose_name='Local Currency Code', sf_read_only=models.READ_ONLY, choices=[('0010', 'Canadian Dollar'), ('0020', 'U.S. Dollar'), ('0030', 'Argentine Peso'), ('0040', 'Aruban Florin'), ('0050', 'Australian Dollar'), ('0070', 'Barbados Dollar'), ('0075', 'St Helena Pound'), ('0090', 'Bermudian Dollar'), ('0095', 'Denar'), ('0100', 'Brazilian Cruzeiro (old)'), ('0105', 'Bosnia-Herzegovina Convertible Mark'), ('0110', 'Chinese Yuan Renminbi'), ('0120', 'Danish Krone'), ('0140', 'Eastern Caribbean Dollar'), ('0150', 'Egyptian Pound'), ('0155', 'Eritrean Nakfa'), ('0160', 'Pound Sterling'), ('0190', 'CFP Franc'), ('0220', 'Hong Kong Dollar'), ('0230', 'Indian Rupee'), ('0250', 'Israeli Sheqel (new)'), ('0270', 'Jamaican Dollar'), ('0280', 'Yen'), ('0290', 'Kenyan Shilling'), ('0305', 'Mongolian Tugrik'), ('0310', 'Moroccan Dirham'), ('0320', 'New Zealand Dollar'), ('0330', 'Norwegian Krone'), ('0370', 'Swedish Krona'), ('0380', 'Swiss Franc'), ('0390', 'New Taiwanese Dollar'), ('0400', 'Baht'), ('0410', 'Afghani'), ('0420', 'Algerian Dinar'), ('0430', 'Bangladeshi Taka'), ('0440', 'Bahraini Dinar'), ('0450', 'Bahamian Dollar'), ('0460', 'Belize Dollar'), ('0470', 'Bolivian Boliviano'), ('0480', 'Botswani Pula'), ('0490', 'Brunei Dollar'), ('0500', 'Bulgarian Lev'), ('0520', 'Burundi Franc'), ('0530', 'Cape Verde Escudo'), ('0540', 'Cayman Islands Dollar'), ('0550', 'CFA Franc BCEAO'), ('0552', 'CFA Franc (BEAC)'), ('0560', 'Chilean Peso'), ('0580', 'Colombian Peso'), ('0585', 'Comoro Franc'), ('0590', 'Costa Rican Colon'), ('0595', 'Croatian Dinar (Old)'), ('0600', 'Cuban Peso'), ('0605', 'Cuban Peso Convertible'), ('0620', 'Czech Koruna'), ('0630', 'Djibouti Franc'), ('0640', 'Dominican Peso'), ('0650', 'Netherlands Antillean Guilder'), ('0690', 'Ethiopian Bir'), ('0700', 'Fiji Dollar'), ('0710', 'Dalasi'), ('0720', 'Ghana Cedi'), ('0730', 'Gibraltar Pound'), ('0750', 'Guinean Franc'), ('0760', 'Guyana Dollar'), ('0770', 'Gourde'), ('0780', 'Lempira'), ('0790', 'Forint'), ('0800', 'Icelandic Krona'), ('0820', 'Rupiah'), ('0830', 'Iraqi Dinar'), ('0840', 'Iranian Rial'), ('0860', 'Jordanian Dinar'), ('0870', 'Kuwaiti Dinar'), ('0880', 'Kip'), ('0890', 'Lebanese Pound'), ('0900', 'Loti'), ('0910', 'Liberian Dollar'), ('0920', 'Libyan Dinar'), ('0940', 'Malagasy Ariary'), ('0960', 'Kwacha'), ('0970', 'Malaysian Ringgit'), ('1000', 'Ouguiya'), ('1010', 'Mauritius Rupee'), ('1020', 'Mozambique Metical'), ('1030', 'Nepalese Rupee'), ('1040', 'Cordoba Oro'), ('1060', 'Rial Omani'), ('1070', 'Pakistan Rupee'), ('1080', 'Balboa'), ('1090', 'Kina'), ('2000', 'Guarani'), ('2010', 'Neuvo Sol'), ('2020', 'Philippine Peso'), ('2040', 'Qatari Riyal'), ('2060', 'Rwanda Franc'), ('2070', 'Dobra'), ('2080', 'Saudi Riyal'), ('2090', 'Seychelles Rupee'), ('3000', 'Singapore Dollar'), ('3010', 'Solomon Islands Dollar'), ('3020', 'Somali Shilling'), ('3030', 'Rand'), ('3040', 'Won'), ('3060', 'Sri Lanka Rupee'), ('3070', 'Sudanese Pound'), ('3075', 'South Sudanese Pound'), ('3085', 'Surinam Dollar'), ('3090', 'Lilangeni'), ('4000', 'Syrian Pound'), ('4010', 'Tanzanian Shilling'), ('4020', "Pa'anga"), ('4030', 'Trinidad & Tobago Dollar'), ('4040', 'Tunisian Dinar'), ('4060', 'UAE Dirham'), ('4070', 'Uganda Shilling'), ('4090', 'Vatu'), ('5005', 'Bolivar Fuerte'), ('5010', 'Dong'), ('5020', 'Yemenese Rial'), ('5030', 'Tala'), ('5040', 'Serbian Dinar'), ('5080', 'Euro'), ('5090', 'Angolan Kwanza'), ('6000', 'Leone'), ('6030', 'Congolese Franc'), ('6040', 'Peso Uruguayo'), ('6050', 'Lari'), ('6060', 'Hryvnia'), ('6100', 'Bhutan Ngultrum'), ('6200', 'Quetzal'), ('6300', 'Cambodian Riel'), ('6400', 'North Korean Won'), ('6500', 'Rufiyaa'), ('6600', 'Naira'), ('6800', 'Croatian Kuna'), ('6900', 'Falkland Islands Pound'), ('7200', 'Pataca'), ('7500', 'Mexican Peso (new)'), ('7600', 'Albanian Lek'), ('8000', 'Estonian Kroon'), ('8100', 'Belarussian Ruble'), ('8300', 'Moldovan Leu'), ('8500', 'Armenian Dram'), ('8700', 'Tenge'), ('8800', 'Turkmenistan Manat'), ('8900', 'Som'), ('9000', 'Uzbekistan Sum'), ('9100', 'Russian Ruble'), ('9300', 'Brazilian Real'), ('9410', 'Polish New Zloty'), ('9430', 'Myanmar Kyat'), ('9440', 'Turkish Lira (new)'), ('9450', 'Romanian Leu (new)'), ('9460', 'Azerbaijanian Manat (new)'), ('9470', 'Namibia Dollar')], blank=True, null=True)
    legal_status = models.CharField(max_length=255, verbose_name='Legal Structure', sf_read_only=models.READ_ONLY, choices=[('100', 'Cooperative'), ('101', 'Nonprofit organization'), ('118', 'Local government body'), ('012', 'Partnership of unknown type'), ('120', 'Foreign company'), ('013', 'Proprietorship'), ('003', 'Corporation'), ('050', 'Government body'), ('008', 'Joint venture'), ('000', 'Not available'), ('009', 'Master limited partnership'), ('010', 'General partnership'), ('011', 'Limited partnership'), ('014', 'Limited liability'), ('015', 'Friendly society'), ('030', 'Trust'), ('070', 'Crown corporation'), ('080', 'Institution'), ('090', 'Estate'), ('099', 'Industry cooperative'), ('102', 'Private limited company'), ('103', 'Partnership partially limited by shares'), ('104', 'Temporary association'), ('105', 'Registered proprietorship'), ('106', 'Limited partnership with shares'), ('107', 'Unregistered proprietorship'), ('108', 'Community of goods'), ('109', 'Reciprocal guarantee company'), ('110', 'Cooperative society with limited liability'), ('111', 'Civil company'), ('112', 'De facto partnership'), ('113', 'Foundation'), ('114', 'Association'), ('115', 'Public company'), ('116', 'Civil law partnership'), ('117', 'Incorporated by act of Parliament'), ('119', 'Private unlimited company'), ('121', 'Private company limited by guarantee'), ('122', 'Civil partnership'), ('125', 'Public limited company'), ('126', 'Registered partnership'), ('127', 'Society'), ('128', 'Government-owned company'), ('129', 'Government institute'), ('130', 'Public institute'), ('131', 'Plant'), ('132', 'Hotel'), ('133', 'Division'), ('140', 'Joint shipping company'), ('142', 'Limited-liability corporation'), ('143', 'Branch'), ('144', 'Concern address'), ('145', 'Insurance company'), ('146', 'Private foundation'), ('147', 'County institution'), ('148', 'Municipal institution'), ('149', 'Vestry'), ('150', 'Public undertaking'), ('151', 'Faeroese company'), ('152', 'Greenland limited'), ('153', 'Greenland private limited'), ('154', 'Sole proprietorship'), ('155', 'Sole proprietorship or partnership'), ('160', 'Unregistered partnership'), ('161', 'Civil association'), ('162', 'Association in participation'), ('163', 'Mutual insurance association'), ('164', 'Stock company with variable capital'), ('166', 'Cooperative production society'), ('167', 'Joint stock company'), ('168', 'Limited responsibility cooperative society'), ('169', 'National credit society'), ('170', 'Offene erwerbsgesellschaft'), ('171', 'Limited liability company with variable cap'), ('180', 'Kommandit erwerbsgesellschaft'), ('185', 'Public credit institution'), ('186', 'Working group'), ('190', 'Union'), ('200', 'Personal partnership'), ('202', 'Unlimited liability rural production company'), ('204', 'Named collective company with variable capital'), ('206', 'Individual with business activity'), ('208', 'Association with shares in the stock market'), ('210', 'Real estate partnership'), ('212', 'Association with shares in the stock market with variable capital'), ('214', 'Association with shares with variable capital (investment company)'), ('216', 'Association with shares with variable capital (investment company with debt instruments)'), ('218', 'Association with shares with variable capital investment company with variable rent)'), ('220', 'Agricultural collective interest company'), ('222', 'Association with shares with variable capital (financial company with limited object)'), ('224', 'Association with shares with variable capital (financial company with multiple objects non-regulated entity)'), ('226', 'Association with shares with variable capital (financial company with multiple objects regulated entity)'), ('228', 'Association with shares investment promotor'), ('230', 'Defacto business organization'), ('232', 'Association with shares in the stock market (investment promotor)'), ('234', 'Association with shares in the stock market (investment promotor with variable capital)'), ('236', 'Association with shares with variable capital (investment promotor) '), ('238', 'Association with shares (capital investment company)'), ('240', 'Government/municipal establishment'), ('242', 'Association with shares (investment company with debt instruments)'), ('244', 'Association with shares (investment company with variable rent)'), ('246', 'Association with shares (financial company with limited object)'), ('248', 'Association with shares (financial company with multiple objects non-regulated entity)'), ('250', 'Housing company'), ('252', 'Association with shares (financial company with multiple objects regulated entity)'), ('254', 'Cooperative production society of variable capital of limited Responsibility'), ('256', 'Limited liability rural production company'), ('260', 'Voluntary association'), ('270', 'Mortgage association'), ('280', 'Cooperative society'), ('290', 'Cooperative bank'), ('300', 'Savings bank'), ('301', 'Small individual business'), ('302', 'Private company'), ('304', 'Unregistered'), ('306', 'Government department/city council'), ('308', 'State government'), ('310', 'Economic association'), ('312', 'Class order'), ('314', 'Business name'), ('316', 'Sole trader'), ('318', 'Trustee company'), ('320', 'Insurance limited company'), ('322', 'Listed public company (limited)'), ('324', 'Unlisted public company'), ('326', 'limited by guarantee'), ('328', 'Listed public company (no liability) '), ('330', 'Government authority'), ('332', 'Professional organization/association'), ('334', 'Registered Australian body'), ('336', 'Corporate partnership'), ('338', 'Industrial and provident societies'), ('340', 'Group'), ('342', 'Charitable trust'), ('344', 'Overseas company'), ('346', 'Proprietary company'), ('350', 'Housing cooperative society'), ('360', 'Mutual assistance business organization'), ('370', 'Provident business organization'), ('380', 'Limited company'), ('390', 'Simple partnership'), ('400', 'Mixed company'), ('410', 'Commercial collective company'), ('420', 'Commercial company'), ('430', 'Representative office'), ('440', 'Bank'), ('450', 'Industry and equity company'), ('451', 'Trading society'), ('452', 'Government institution'), ('460', 'Open stock corporation'), ('470', 'Trusteeship'), ('480', 'Private business'), ('490', 'Decentralized public organization'), ('500', 'Stock company'), ('502', "Tenant owner's society"), ('510', 'Civil society'), ('520', 'Society for capitalization of savings'), ('530', 'Limited cooperative company'), ('540', 'Mutual insurance society'), ('550', 'Simple limited partnership'), ('560', 'Named collective company'), ('570', 'Non-profit association'), ('580', 'Corporation with variable capital'), ('590', 'Joint corporation'), ('600', 'Consortium'), ('610', 'Personal firm'), ('620', 'Corporation with authorized capital'), ('630', 'Corporation with open capital'), ('640', 'Bank for capitalization of savings'), ('650', 'Closed stock corporation'), ('660', 'Commercial and industrial corporation'), ('670', 'Commercial corporation'), ('680', 'Industrial corporation'), ('690', 'Financial institution'), ('700', 'Contract mining company'), ('710', 'Contracting company'), ('720', 'Non-profit international organization'), ('730', 'International organization'), ('740', 'Limited co auth capital-regd co open cap'), ('750', 'Organization'), ('755', 'Unlimited company'), ('760', "Farmer's association"), ('770', "Economic assoc/tenant owners' society"), ('780', 'Mining company'), ('790', 'Shipping company'), ('800', 'Simple company'), ('810', 'Private firm'), ('820', 'Family foundation'), ('830', 'County'), ('840', 'County association'), ('850', 'County council'), ('860', 'Regional social insurance office'), ('870', 'Unit within the Swedish church'), ('880', 'Public corporation/institution'), ('881', 'Statutory body'), ('890', 'Mortgage/security association'), ('891', 'Government agency'), ('892', 'Mutual company'), ('893', 'Special corporation'), ('894', 'Central bank for agriculture & forestry'), ('895', 'Austrian legal entity'), ('896', 'Establishment'), ('900', 'Supporting association'), ('905', 'Administration'), ('910', 'Unemployment office'), ('915', 'Liaison office'), ('920', 'Foreign legal person'), ('925', 'Cooperative union with guaranteed liab'), ('930', 'Swedish legal person'), ('935', 'Cooperative union with limited liability'), ('940', 'Unlimited partnership'), ('945', 'Cooperative society with unlimited liability'), ('950', 'Foreign branch'), ('955', 'Cooperative society with guaranteed liability'), ('960', 'Incorporated foundation'), ('965', 'Business not formally registered'), ('970', 'Incorporated non-profit association'), ('971', 'State-owned enterprise'), ('972', 'Free trade zone entp. proc. prvd. smpl.'), ('973', 'Limited holding company'), ('974', 'Government department or non-profit organization'), ('975', 'Government department'), ('976', 'Collectively owned enterprise'), ('977', 'Domestic and foreign joint venture'), ('978', 'Domestic and foreign cooperative venture'), ('980', 'Educational foundation'), ('985', 'Unlimited company ltd. liab. shareholder'), ('990', 'Medical corporation'), ('991', 'Private limited liability company'), ('992', 'Public limited liability company'), ('993', 'Exempt limited liability company'), ('994', 'Deemed public limited company'), ('995', 'Private company limited by shares'), ('999', 'Securities fund')], blank=True, null=True)
    global_ultimate_total_employees = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Number of Employees - Global', sf_read_only=models.READ_ONLY, blank=True, null=True)
    employees_total_reliability = models.CharField(max_length=255, verbose_name='Number of Employees - Total Indicator', sf_read_only=models.READ_ONLY, choices=[('0', 'Actual number'), ('1', 'Low'), ('2', 'Estimated (for all records)'), ('3', 'Modeled (for non-US records)')], blank=True, null=True)
    minority_owned = models.CharField(max_length=255, verbose_name='Minority-Owned Indicator', sf_read_only=models.READ_ONLY, choices=[('Y', 'Minority-owned'), ('N', 'Not minority-owned')], blank=True, null=True)
    women_owned = models.CharField(max_length=255, verbose_name='Woman-Owned Indicator', sf_read_only=models.READ_ONLY, choices=[('Y', 'Owned by a woman'), ('N', 'Not owned by a woman or unknown')], blank=True, null=True)
    small_business = models.CharField(max_length=255, verbose_name='Small Business Indicator', sf_read_only=models.READ_ONLY, choices=[('Y', 'Small business site'), ('N', 'Not small business site')], blank=True, null=True)
    marketing_segmentation_cluster = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('1', 'High-Tension Branches of Insurance/Utility Industries'), ('2', 'Bustling Manufacturers & Business Services'), ('3', 'The Withering Branch Company'), ('4', 'Rapid-Growth Large Businesses'), ('5', 'Sunny Branches of Insurance/Utility Industries'), ('6', 'Labor-Intensive Giants'), ('7', 'Entrepreneur & Co.'), ('8', 'Frugal & Associates'), ('9', 'Spartans'), ('10', 'Struggling Startups'), ('11', 'The Hectic Venture Company'), ('12', 'The Established Shingle Company'), ('13', 'Industry, Inc.'), ('14', 'Landmark Business Services'), ('15', 'The Test Of Time Company'), ('16', 'Powerhouse 6000'), ('17', 'In Good Hands'), ('18', 'Sudden-Growth Giants'), ('19', 'Active Traders'), ('20', 'Old Core Proprietors'), ('21', 'Solid & Sons'), ('22', 'Main Street USA')], blank=True, null=True)
    import_export_agent = models.CharField(max_length=255, verbose_name='Import/Export', sf_read_only=models.READ_ONLY, choices=[('A', 'Importer/Exporter/Agent'), ('B', 'Importer/Exporter'), ('C', 'Importer'), ('D', 'Importer/Agent'), ('E', 'Exporter/Agent'), ('F', 'Agent. Keeps no inventory and does not take title goods'), ('G', 'None or Data Not Available'), ('H', 'Exporter')], blank=True, null=True)
    subsidiary = models.CharField(max_length=255, verbose_name='Subsidiary Indicator', sf_read_only=models.READ_ONLY, choices=[('0', 'Not subsidiary of another organization'), ('3', 'Subsidiary of another organization')], blank=True, null=True)
    trade_style2 = models.CharField(max_length=255, verbose_name='Second Tradestyle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trade_style3 = models.CharField(max_length=255, verbose_name='Third Tradestyle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trade_style4 = models.CharField(max_length=255, verbose_name='Fourth Tradestyle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trade_style5 = models.CharField(max_length=255, verbose_name='Fifth Tradestyle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    national_id = models.CharField(max_length=255, verbose_name='National Identification Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    national_id_type = models.CharField(max_length=255, verbose_name='National Identification System', sf_read_only=models.READ_ONLY, choices=[('00010', 'Belgium Enterprise Number'), ('00011', 'Belgium Branch Unit Number'), ('00100', 'Tokyo Shoko Research Business Identifier'), ('00102', 'Emc Entered Registration Number'), ('00103', 'Emc Entered Tax Registration Number'), ('00104', 'Emc Entered Chamber of Commerce Number'), ('00105', 'Emc Government Gazette Number'), ('00106', 'Sweden Registration Number'), ('00107', 'Finnish Registration Number'), ('00108', 'Costa Rican Judicial Number'), ('00109', 'El Salvadoran Patron'), ('00110', 'Hungarian Tax Identifier'), ('00111', 'Sweden Branch Number'), ('00112', 'Jamaican Tax Identification Number'), ('00113', 'Trinidadian Tax Identification Number'), ('00115', 'Dominican Republic National Commercial Registry Number'), ('00119', 'Peruvian Sole Commercial Registry Number'), ('00012', 'UK Cro Number'), ('00120', 'Hungarian Registration Number'), ('00125', 'Venezuelan National Tributary ID Number'), ('00127', 'Nicaraguan Sole Commercial Registry Number'), ('00013', 'Ireland Cro Number'), ('00130', 'Polish Tax Identifier'), ('00135', 'Costa Rican Tax Registration Number'), ('00014', 'France Siren Number'), ('00140', 'Polish Registration Number'), ('00145', 'Colombian National Trubutary ID Number'), ('00155', 'El Salvadoran National Tributary ID Number'), ('00016', 'Monte Carlo Siren Number'), ('00165', 'Bolivian Sole Commercial Registry Number'), ('00017', 'France Siret Number'), ('00175', 'Ecuadorian Sole Commercial Registry Number'), ('00018', 'Europe Standard VAT Number'), ('00185', 'Sole Commercial Registry Nbr Unk Ctry'), ('00019', 'Netherland Chamber Of Commerce Number'), ('00195', 'National Tributary ID Number Unk Country'), ('00020', 'Germany Registration Number'), ('00200', 'Argentinian Unique Tax ID Key'), ('00021', 'Italy Chamber of Commerce Number'), ('00210', 'Paraguayan Unique Tax Registration'), ('00211', 'Brazilian State Registry Number'), ('00212', 'Brazilian Municipal Registry Number'), ('00022', 'Taiwan Business Registration Number'), ('00220', 'Uruguayan Unique Tax Registration'), ('00230', 'Mexican Federal Tax Registration'), ('00024', 'Spain Fiscal Code'), ('00240', 'Chilean Unique Tax ID'), ('00025', 'Andorra Fiscal Code'), ('00250', 'Venezuelan Registry of Fiscal Info'), ('00026', 'Portugal Fiscal Code'), ('00260', 'Brazilian General Record of Taxpayers'), ('00270', 'Norwegian Government Organization Number'), ('00281', 'Hong Kong Business Registration Number'), ('00282', 'Macao Cmcl Registry Company ID Number'), ('00283', 'Macao Cmcl Registry Bus Regn Number'), ('00284', 'So Korean St Cmcl Registry Bus Regn Number'), ('00285', 'So Korean Trad Assn Expt/Impt Regn Number'), ('00286', 'Czech Republic ICO'), ('00290', 'Czech VAT Number'), ('00030', 'CUSIP Number'), ('00300', 'Bangladesh Company Incorporation Number'), ('00301', 'Brunei Registration Number'), ('00302', 'India Company Incorporation Number'), ('00303', 'Indonesia Legalization Number'), ('00304', 'Indonesia President Decree Number'), ('00305', 'Malaysia Company Registration Number'), ('00306', 'Malaysia Business Registration Number'), ('00307', 'Nepal Company Incorporation Number'), ('00308', 'Pakistan Company Incorporation Number'), ('00309', 'Philippines Registration Number'), ('00031', 'Australia Company Number'), ('00310', 'Sri Lanka Company Incorporation Number'), ('00311', 'Thailand Registration Number'), ('00312', 'Vietnam Business Registration Number'), ('00313', 'Vietnam Investment License Code'), ('00314', 'Vietnam License for the Establishment'), ('00315', 'Vietnam License Number'), ('00316', 'Maldives Registration Number'), ('00317', 'Bhutan Registration Number'), ('00318', 'Myanmar Registration Number'), ('00032', 'Singapore Registration File Number'), ('00320', 'Hungarian VAT Number'), ('00321', 'New Zealand National Company Number - Ncn'), ('00322', 'Australia Business Registration Number'), ('00323', 'Australian Business Number'), ('00324', 'South African Registration Number'), ('00325', 'Greek Business Registration Number'), ('00033', 'Hong Kong Co Registry Company ID Number'), ('00034', 'CINS Number'), ('00035', 'Panamanian Sole Commercial Registry Number'), ('00036', 'Portugal Chamber of Commerce Number'), ('00040', 'Mexico Iva'), ('00045', 'Israel Registration Number'), ('00050', 'Israel VAT Number'), ('00521', 'Denmark CVR Number'), ('00522', 'United Arab Emirates Registration Number'), ('00523', 'Bahrain Registration Number'), ('00524', 'Iraq Registration Number'), ('00525', 'Iran Registration Number'), ('00526', 'Jordan Registration Number'), ('00527', 'Kuwait Registration Number'), ('00528', 'Lebanon Registration Number'), ('00529', 'Oman Registration Number'), ('00530', 'Qatar Registration Number'), ('00531', 'Saudi Arabia Registration Number'), ('00532', 'Syria Registration Number'), ('00533', 'Yemen Registration Number'), ('00534', 'United Arab Emirates Chamber of Commerce Number'), ('00535', 'Bahrain Chamber of Commerce Number'), ('00536', 'Iran Chamber of Commerce Number'), ('00537', 'Jordan Chamber of Commerce Number'), ('00538', 'Kuwait Chamber of Commerce Number'), ('00539', 'Lebanon Chamber of Commerce Number'), ('00540', 'Oman Chamber of Commerce Number'), ('00541', 'Qatar Chamber of Commerce Number'), ('00542', 'Saudi Arabia Chamber of Commerce Number'), ('00543', 'Syria Chamber of Commerce Number'), ('00544', 'Yemen Chamber of Commerce Number'), ('00545', 'Angola Registration Number'), ('00546', 'Burkino Faso Registration Number'), ('00547', 'Burundi Registration Number'), ('00548', 'Benin Registration Number'), ('00549', 'Central African Republic Registration Number'), ('00055', 'Liechtenstein Registration Number'), ('00550', 'Congo Registration Number'), ('00551', 'Ivory Coast Registration Number'), ('00552', 'Cameroon Registration Number'), ('00553', 'Cape Verde Registration Number'), ('00554', 'Djibouti Registration Number'), ('00555', 'Algeria Registration Number'), ('00556', 'Egypt Registration Number'), ('00557', 'Eritrea Registration Number'), ('00558', 'Ethiopia Registration Number'), ('00559', 'Falkland Islands Registration Number'), ('00560', 'Gabon Registration Number'), ('00561', 'Ghana Registration Number'), ('00562', 'Gambia Registration Number'), ('00563', 'Guinea Registration Number'), ('00564', 'Equatorial Guinea Registration Number'), ('00565', 'Guinea-Bissau Registration Number'), ('00566', 'Kenya Registration Number'), ('00567', 'Comoros Registration Number'), ('00568', 'Liberia Registration Number'), ('00569', 'Morocco Registration Number'), ('00570', 'Madagascar Registration Number'), ('00571', 'Mali Registration Number'), ('00572', 'Mauritania Registration Number'), ('00573', 'Mauritius Registration Number'), ('00574', 'Malawi Registration Number'), ('00575', 'Mozambique Registration Number'), ('00576', 'Niger Registration Number'), ('00577', 'Nigeria Registration Number'), ('00578', 'Rwanda Registration Number'), ('00579', 'Seychelles Registration Number'), ('00580', 'Sudan Registration Number'), ('00581', 'St Helena Registration Number'), ('00582', 'Sierra Leone Registration Number'), ('00583', 'Senegal Registration Number'), ('00584', 'Somalia Registration Number'), ('00585', 'Chad Registration Number'), ('00586', 'Togo Registration Number'), ('00587', 'Tanzania Registration Number'), ('00588', 'Uganda Registration Number'), ('00589', 'Zambia Registration Number'), ('00590', 'Ivory Coast Chamber of Commerce Number'), ('00591', 'Cameroon Chamber of Commerce Number'), ('00592', 'Algeria Chamber of Commerce Number'), ('00593', 'Egypt Chamber of Commerce Number'), ('00594', 'Gabon Chamber of Commerce Number'), ('00595', 'Morocco Chamber of Commerce Number'), ('00596', 'Seychelles Chamber of Commerce Number'), ('00597', 'Senegal Chamber of Commerce Number'), ('00598', 'Ivory Coast Tax Registration Number'), ('00599', 'Cameroon Tax Registration Number'), ('00060', 'Italy Fiscal Code'), ('00600', 'Egypt Tax Registration Number'), ('00601', 'Gabon Tax Registration Number'), ('00602', 'Ghana Tax Registration Number'), ('00603', 'Morocco Tax Registration Number'), ('00604', 'Mauritius Tax Registration Number'), ('00605', 'Senegal Tax Registration Number'), ('00610', 'Botswana Tax Registration Number'), ('00620', 'Lesotho Tax Registration Number'), ('00630', 'Namibia Tax Registration Number'), ('00640', 'Swaziland Tax Registration Number'), ('00065', 'Denmark Registration Number'), ('00650', 'South Africa Value Added Tax Number'), ('00660', 'South Africa Tax Registration Number'), ('00670', 'South Africa Pay As You Earn Registration Number'), ('00070', 'Austria Trade Register Number'), ('00702', 'Switzerland Registration Number'), ('00075', 'Zimbabwe Organization Registration Number'), ('00080', 'Zimbabwe Individual Registration Number'), ('00090', 'Guatemalan Sole Commercial Registry Number'), ('00095', 'Colombian Registry of Fiscal Info'), ('00042', 'Netherlands Branch Unit Number'), ('00043', 'Netherlands Legal Entity And Partnership Information Number'), ('00122', 'East Timor Tax Identification Number'), ('00330', 'Philippinies Securities & Exchange Commission Number'), ('00335', 'India Society Registration Number'), ('00340', 'India Trade Registration Number'), ('00345', 'Pakistan Securites & Exchange Commission Number'), ('00350', 'Thailand Commercial Registration Number'), ('00355', 'Thailand Securities & Exchange Commission Number'), ('00360', 'Austria Association Registration Number'), ('00710', 'China National Organization Code'), ('00715', 'China Business Registration Number'), ('00720', 'Swiss Uniform Identification Number'), ('00740', 'Slovakia ICO Number'), ('00362', 'Monaco Trade & Industry Registration Number'), ('00142', 'Polish National Court Council Number'), ('00143', 'Polish License Number'), ('00293', 'Czech Republic Tax Registration Number'), ('00735', 'Slovakia Tax Registration Number'), ('00730', 'Slovakia Court Number of Registration'), ('00099', 'Japan Corporate Number'), ('00101', 'Japan Stock Exchange Number')], blank=True, null=True)
    us_tax_id = models.CharField(max_length=9, verbose_name='US Tax ID Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_code_accuracy = models.CharField(max_length=255, verbose_name='Geocode Accuracy', sf_read_only=models.READ_ONLY, choices=[('D', 'Rooftop level. Precise physical address'), ('S', 'Street level. Correct street and within a range of street numbers. Accuracy .1 to .2 miles'), ('B', 'Block level. (ZIP+4 Centroid) Correct street and within a range of blocks. Accuracy .2 to .4 miles'), ('T', 'Census tract level. (ZIP+2 Centroid) Correct street and within a range of census tracts. Accuracy .4 to .6 miles'), ('M', 'Mailing address level. Physical address not valid or not present'), ('Z', 'ZIP code level. Correct 5-digit ZIP code'), ('0', 'Geocode could not be assigned'), ('C', 'Places the address in the correct city'), ('N', 'Not matched'), ('I', 'Street intersection'), ('P', 'PO Box location'), ('A', 'Non-US rooftop accuracy'), ('H', 'State or Province Centroid'), ('K', 'County Centroid'), ('G', 'Sub Locality-Street Level'), ('L', 'Locality Centroid')], blank=True, null=True)
    family_members = models.IntegerField(verbose_name='Number of Business Family Members', sf_read_only=models.READ_ONLY, blank=True, null=True)
    marketing_pre_screen = models.CharField(max_length=255, verbose_name='Delinquency Risk', sf_read_only=models.READ_ONLY, choices=[('L', 'Low risk of delinquency'), ('M', 'Moderate risk of delinquency'), ('H', 'High risk of delinquency')], blank=True, null=True)
    global_ultimate_duns_number = models.CharField(max_length=9, verbose_name='Global Ultimate D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    global_ultimate_business_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_or_hq_duns_number = models.CharField(max_length=9, verbose_name='Parent Company D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_or_hq_business_name = models.CharField(max_length=255, verbose_name='Parent Company Business Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    domestic_ultimate_duns_number = models.CharField(max_length=9, verbose_name='Domestic Ultimate D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    domestic_ultimate_business_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    location_status = models.CharField(max_length=255, verbose_name='Location Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Single Location. No other entities report to the business'), ('1', 'Headquarters/Parent. Branches and/or subsidiaries report to the business'), ('2', 'Branch. Secondary location to a headquarters location')], blank=True, null=True)
    company_currency_iso_code = models.CharField(max_length=255, verbose_name='Local Currency ISO Code', sf_read_only=models.READ_ONLY, choices=[('AED', 'AED - UAE Dirham'), ('AFN', 'AFN - Afghanistan Afghani (New)'), ('ALL', 'ALL - Albanian Lek'), ('AMD', 'AMD - Armenian Dram'), ('ANG', 'ANG - Neth Antilles Guilder'), ('AOA', 'AOA - Angola Kwanza'), ('ARS', 'ARS - Argentine Peso'), ('AUD', 'AUD - Australian Dollar'), ('AWG', 'AWG - Aruba Florin'), ('AZN', 'AZN - Azerbaijan Manat'), ('BAM', 'BAM - Convertible Marks'), ('BBD', 'BBD - Barbados Dollar'), ('BDT', 'BDT - Bangladesh Taka'), ('BGN', 'BGN - Bulgarian Lev'), ('BHD', 'BHD - Bahraini Dinar'), ('BIF', 'BIF - Burundi Franc'), ('BMD', 'BMD - Bermuda Dollar'), ('BND', 'BND - Brunei Dollar'), ('BOB', 'BOB - Bolivian Boliviano'), ('BOV', 'BOV - Bolivia Mvdol'), ('BRB', 'BRB - Brazilian Cruzeiro (old)'), ('BRL', 'BRL - Brazilian Real'), ('BSD', 'BSD - Bahamian Dollar'), ('BTN', 'BTN - Bhutan Ngultrum'), ('BWP', 'BWP - Botswana Pula'), ('BYN', 'BYN - Belarusian Ruble'), ('BYR', 'BYR - Belarusian Ruble'), ('BZD', 'BZD - Belize Dollar'), ('CAD', 'CAD - Canadian Dollar'), ('CDF', 'CDF - Franc Congolais'), ('CHF', 'CHF - Swiss Franc'), ('CLF', 'CLF - Unidades de fomento'), ('CLP', 'CLP - Chilean Peso'), ('CNY', 'CNY - Chinese Yuan'), ('COP', 'COP - Colombian Peso'), ('CRC', 'CRC - Costa Rica Colon'), ('CUC', 'CUC - Cuban Peso Convertible'), ('CUP', 'CUP - Cuban Peso'), ('CVE', 'CVE - Cape Verde Escudo'), ('CZK', 'CZK - Czech Koruna'), ('DJF', 'DJF - Dijibouti Franc'), ('DKK', 'DKK - Danish Krone'), ('DOP', 'DOP - Dominican Peso'), ('DZD', 'DZD - Algerian Dinar'), ('EEK', 'EEK - Estonian Kroon'), ('EGP', 'EGP - Egyptian Pound'), ('ERN', 'ERN - Eritrea Nakfa'), ('ETB', 'ETB - Ethiopian Birr'), ('EUR', 'EUR - Euro'), ('FJD', 'FJD - Fiji Dollar'), ('FKP', 'FKP - Falkland Islands Pound'), ('GBP', 'GBP - British Pound'), ('GEL', 'GEL - Georgia Lari'), ('GHS', 'GHS - Ghanaian Cedi'), ('GIP', 'GIP - Gibraltar Pound'), ('GMD', 'GMD - Gambian Dalasi'), ('GNF', 'GNF - Guinean Franc'), ('GTQ', 'GTQ - Guatemala Quetzal'), ('GYD', 'GYD - Guyana Dollar'), ('HKD', 'HKD - Hong Kong Dollar'), ('HNL', 'HNL - Honduras Lempira'), ('HRD', 'HRD - Croatian Dinar (Old)'), ('HRK', 'HRK - Kuna'), ('HTG', 'HTG - Haiti Gourde'), ('HUF', 'HUF - Hungarian Forint'), ('IDR', 'IDR - Indonesian Rupiah'), ('ILS', 'ILS - Israeli Shekel'), ('INR', 'INR - Indian Rupee'), ('IQD', 'IQD - Iraqi Dinar'), ('IRR', 'IRR - Iranian Rial'), ('ISK', 'ISK - Iceland Krona'), ('JMD', 'JMD - Jamaican Dollar'), ('JOD', 'JOD - Jordanian Dinar'), ('JPY', 'JPY - Japanese Yen'), ('KES', 'KES - Kenyan Shilling'), ('KGS', 'KGS - Kyrgyzstan Som'), ('KHR', 'KHR - Cambodia Riel'), ('KMF', 'KMF - Comorian Franc'), ('KPW', 'KPW - North Korean Won'), ('KRW', 'KRW - Korean Won'), ('KWD', 'KWD - Kuwaiti Dinar'), ('KYD', 'KYD - Cayman Islands Dollar'), ('KZT', 'KZT - Kazakhstan Tenge'), ('LAK', 'LAK - Lao Kip'), ('LBP', 'LBP - Lebanese Pound'), ('LKR', 'LKR - Sri Lanka Rupee'), ('LRD', 'LRD - Liberian Dollar'), ('LSL', 'LSL - Lesotho Loti'), ('LYD', 'LYD - Libyan Dinar'), ('MAD', 'MAD - Moroccan Dirham'), ('MDL', 'MDL - Moldovan Leu'), ('MGA', 'MGA - Malagasy Ariary'), ('MKD', 'MKD - Macedonian Denar'), ('MMK', 'MMK - Myanmar Kyat'), ('MNT', 'MNT - Mongolian Tugrik'), ('MOP', 'MOP - Macau Pataca'), ('MRO', 'MRO - Mauritanian Ougulya'), ('MRU', 'MRU - Mauritanian Ougulya'), ('MUR', 'MUR - Mauritius Rupee'), ('MVR', 'MVR - Maldives Rufiyaa'), ('MWK', 'MWK - Malawi Kwacha'), ('MXN', 'MXN - Mexican Peso'), ('MXV', 'MXV - Mexican Unidad de Inversion (UDI)'), ('MYR', 'MYR - Malaysian Ringgit'), ('MZN', 'MZN - Mozambique New Metical'), ('NAD', 'NAD - Namibian Dollar'), ('NGN', 'NGN - Nigerian Naira'), ('NIO', 'NIO - Nicaragua Cordoba'), ('NOK', 'NOK - Norwegian Krone'), ('NPR', 'NPR - Nepalese Rupee'), ('NZD', 'NZD - New Zealand Dollar'), ('OMR', 'OMR - Omani Rial'), ('PAB', 'PAB - Panama Balboa'), ('PEN', 'PEN - Peruvian Sol'), ('PGK', 'PGK - Papua New Guinea Kina'), ('PHP', 'PHP - Philippine Peso'), ('PKR', 'PKR - Pakistani Rupee'), ('PLN', 'PLN - Polish Zloty'), ('PYG', 'PYG - Paraguayan Guarani'), ('QAR', 'QAR - Qatar Rial'), ('RON', 'RON - Romanian Leu'), ('RSD', 'RSD - Serbian Dinar'), ('RUB', 'RUB - Russian Rouble'), ('RWF', 'RWF - Rwanda Franc'), ('SAR', 'SAR - Saudi Arabian Riyal'), ('SBD', 'SBD - Solomon Islands Dollar'), ('SCR', 'SCR - Seychelles Rupee'), ('SDG', 'SDG - Sudanese Pound'), ('SEK', 'SEK - Swedish Krona'), ('SGD', 'SGD - Singapore Dollar'), ('SHP', 'SHP - St Helena Pound'), ('SLL', 'SLL - Sierra Leone Leone'), ('SOS', 'SOS - Somali Shilling'), ('SRD', 'SRD - Surinam Dollar'), ('SSP', 'SSP - South Sudan Pound'), ('STD', 'STD - São Tomé and Príncipe Dobra'), ('STN', 'STN - São Tomé and Príncipe Dobra'), ('SYP', 'SYP - Syrian Pound'), ('SZL', 'SZL - Swaziland Lilageni'), ('THB', 'THB - Thai Baht'), ('TJS', 'TJS - Tajik Somoni'), ('TMT', 'TMT - Turkmenistan New Manat'), ('TND', 'TND - Tunisian Dinar'), ('TOP', "TOP - Tonga Pa'anga"), ('TRY', 'TRY - Turkish Lira (New)'), ('TTD', 'TTD - Trinidad&Tobago Dollar'), ('TWD', 'TWD - Taiwan Dollar'), ('TZS', 'TZS - Tanzanian Shilling'), ('UAH', 'UAH - Ukraine Hryvnia'), ('UGX', 'UGX - Ugandan Shilling'), ('USD', 'USD - U.S. Dollar'), ('UYU', 'UYU - Uruguayan Peso'), ('UZS', 'UZS - Uzbekistan Sum'), ('VEF', 'VEF - Venezuelan Bolivar Fuerte'), ('VES', 'VES - Venezuelan Bolívar Soberano'), ('VND', 'VND - Vietnam Dong'), ('VUV', 'VUV - Vanuatu Vatu'), ('WST', 'WST - Samoa Tala'), ('XAF', 'XAF - CFA Franc (BEAC)'), ('XCD', 'XCD - East Caribbean Dollar'), ('XOF', 'XOF - CFA Franc (BCEAO)'), ('XPF', 'XPF - Pacific Franc'), ('YER', 'YER - Yemen Riyal'), ('ZAR', 'ZAR - South African Rand'), ('ZMW', 'ZMW - Zambian Kwacha (New)'), ('ZWL', 'ZWL - Zimbabwe Dollar')], blank=True, null=True)
    description = models.CharField(max_length=1000, verbose_name='Company Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_owned = models.BooleanField(verbose_name='Owned Status', sf_read_only=models.READ_ONLY, default=False)
    is_parent = models.BooleanField(verbose_name='Parent', sf_read_only=models.READ_ONLY, default=False)
    fortune_rank = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    included_in_sn_p500 = models.CharField(max_length=10, verbose_name='Included In S&P 500', sf_read_only=models.READ_ONLY, blank=True, null=True)
    premises_measure = models.IntegerField(verbose_name='Premises Area Measurement', sf_read_only=models.READ_ONLY, blank=True, null=True)
    premises_measure_reliability = models.CharField(max_length=64, verbose_name='Premises Area Measurement Reliability Text', sf_read_only=models.READ_ONLY, blank=True, null=True)
    premises_measure_unit = models.CharField(max_length=64, verbose_name='Premises Area Unit of Measurement', sf_read_only=models.READ_ONLY, blank=True, null=True)
    employee_quantity_growth_rate = models.DecimalField(max_digits=18, decimal_places=6, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sales_turnover_growth_rate = models.DecimalField(max_digits=18, decimal_places=6, sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_sic8 = models.CharField(max_length=8, verbose_name='SIC8 Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_sic8_desc = models.CharField(max_length=80, verbose_name='SIC8 Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    second_sic8 = models.CharField(max_length=8, verbose_name='Second SIC8 Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    second_sic8_desc = models.CharField(max_length=80, verbose_name='Second SIC8 Description ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    third_sic8 = models.CharField(max_length=8, verbose_name='Third SIC8 Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    third_sic8_desc = models.CharField(max_length=80, verbose_name='Third SIC8 Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fourth_sic8 = models.CharField(max_length=8, verbose_name='Fourth SIC8 Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fourth_sic8_desc = models.CharField(max_length=80, verbose_name='Fourth SIC8 Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fifth_sic8 = models.CharField(max_length=8, verbose_name='Fifth SIC8 Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fifth_sic8_desc = models.CharField(max_length=80, verbose_name='Fifth SIC8 Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sixth_sic8 = models.CharField(max_length=8, verbose_name='Sixth SIC8 Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sixth_sic8_desc = models.CharField(max_length=80, verbose_name='Sixth SIC8 Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    prior_year_employees = models.IntegerField(verbose_name='Prior Year Employee', sf_read_only=models.READ_ONLY, blank=True, null=True)
    prior_year_revenue = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    revenue = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_in_crm = models.BooleanField(verbose_name='In CRM', sf_read_only=models.READ_ONLY, default=False)
    full_address = models.CharField(max_length=255, verbose_name='Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sic_code_desc = models.CharField(max_length=255, verbose_name='Industry Codes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudDandBCompany'
        verbose_name = 'D&B Company'
        verbose_name_plural = 'DandB Companies'
        # keyPrefix = '09N'



class DatacloudOwnedEntity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Description', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datacloudownedentity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datacloudownedentity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_dot_com_key = models.CharField(max_length=25, verbose_name='Data.com key', sf_read_only=models.READ_ONLY)
    datacloud_entity_type = models.CharField(max_length=255, verbose_name='Data.com Object Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Data.com Contact'), ('1', 'Data.com Account'), ('2', 'Datacloud D&B Company'), ('4', 'Data.com Social Profile')])
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='datacloudownedentity_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    purchase_usage = models.ForeignKey('DatacloudPurchaseUsage', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    purchase_type = models.CharField(max_length=255, verbose_name='Data.com Purchase Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Added'), ('1', 'Exported'), ('2', 'API')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudOwnedEntity'
        verbose_name = 'Data.com Owned Entity'
        verbose_name_plural = 'Data.com Owned Entity'
        # keyPrefix = '09O'



class DatacloudPurchaseUsage(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Sequence ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datacloudpurchaseusage_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datacloudpurchaseusage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='datacloudpurchaseusage_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_type = models.CharField(max_length=255, verbose_name='Data.com Usage Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Data.com Monthly Usage'), ('1', 'Data.com List Pool Usage')])
    purchase_type = models.CharField(max_length=255, verbose_name='Data.com Purchase Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Added'), ('1', 'Exported'), ('2', 'API')])
    datacloud_entity_type = models.CharField(max_length=255, verbose_name='Data.com Object Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Data.com Contact'), ('1', 'Data.com Account'), ('2', 'Datacloud D&B Company'), ('4', 'Data.com Social Profile')])
    usage = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Purchase Count', sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudPurchaseUsage'
        verbose_name = 'Data.com Usage'
        verbose_name_plural = 'Data.com Usage'
        # keyPrefix = '09F'



class DeclinedEventRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='declinedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='declinedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DeclinedEventRelation'
        verbose_name = 'Declined Event Relation'
        verbose_name_plural = 'Declined Event Relations'
        # keyPrefix = 'None'



class Document(models.Model):
    folder = models.ForeignKey('Folder', models.DO_NOTHING)  # Reference to tables [Folder, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Document Name')
    developer_name = models.CharField(max_length=80, verbose_name='Document Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_type = models.CharField(max_length=120, verbose_name='MIME Type', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='File Extension', blank=True, null=True)
    is_public = models.BooleanField(verbose_name='Externally Available', default=models.DEFAULTED_ON_CREATE)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY)
    body = models.TextField(blank=True, null=True)
    url = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    keywords = models.CharField(max_length=255, blank=True, null=True)
    is_internal_use_only = models.BooleanField(verbose_name='Internal Use Only', default=models.DEFAULTED_ON_CREATE)
    author = models.ForeignKey('User', models.DO_NOTHING, related_name='document_author_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='document_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='document_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_body_searchable = models.BooleanField(verbose_name='Document Content Searchable', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Document'
        verbose_name = 'Document'
        verbose_name_plural = 'Documents'
        # keyPrefix = '015'



class DocumentAttachmentMap(models.Model):
    parent = models.ForeignKey('EmailTemplate', models.DO_NOTHING)  # Master Detail Relationship *
    document = models.ForeignKey(Document, models.DO_NOTHING)
    document_sequence = models.IntegerField(verbose_name='Attachment Sequence')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DocumentAttachmentMap'
        verbose_name = 'Document Entity Map'
        verbose_name_plural = 'Document Entity Map'
        # keyPrefix = '05X'



class Domain(models.Model):
    domain_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('DNS', 'Domain Name System (DNS)'), ('FacebookPage', 'Facebook Page')])
    domain = models.CharField(max_length=765, verbose_name='Domain Name', sf_read_only=models.READ_ONLY)
    options_external_https = models.BooleanField(verbose_name='Enable External HTTPS', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domain_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domain_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Domain'
        verbose_name = 'Domain'
        verbose_name_plural = 'Domains'
        # keyPrefix = '0I4'



class DomainSite(models.Model):
    domain = models.ForeignKey(Domain, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    site = models.ForeignKey('Site', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    path_prefix = models.CharField(max_length=255, verbose_name='Path', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domainsite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domainsite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DomainSite'
        verbose_name = 'Custom URL'
        verbose_name_plural = 'Custom URLs'
        # keyPrefix = '0Jf'



class DuplicateRecordItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Duplicate Record Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecorditem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecorditem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    duplicate_record_set = models.ForeignKey('DuplicateRecordSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Contact, Lead] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordItem'
        verbose_name = 'Duplicate Record Item'
        verbose_name_plural = 'Duplicate Record Items'
        # keyPrefix = '0GL'



class DuplicateRecordSet(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Duplicate Record Set Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecordset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecordset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    duplicate_rule = models.ForeignKey('DuplicateRule', models.DO_NOTHING, blank=True, null=True)
    record_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordSet'
        verbose_name = 'Duplicate Record Set'
        verbose_name_plural = 'Duplicate Record Sets'
        # keyPrefix = '0GK'



class DuplicateRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Lead', None)])
    developer_name = models.CharField(max_length=80, verbose_name='Object Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    sobject_subtype = models.CharField(max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRule'
        verbose_name = 'Duplicate Rule'
        verbose_name_plural = 'Duplicate Rules'
        # keyPrefix = '0Bm'



class EmailCapture(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailcapture_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailcapture_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    to_pattern = models.CharField(max_length=255, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE)
    from_pattern = models.CharField(max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    sender = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    recipient = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    capture_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailCapture'
        verbose_name = 'EmailCapture'
        verbose_name_plural = 'Email Captures'
        # keyPrefix = '06F'



class EmailDomainKey(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainkey_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainkey_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    selector = models.CharField(max_length=63)
    domain = models.CharField(max_length=255)
    domain_match = models.CharField(max_length=255, choices=[('DomainOnly', 'Exact domain only'), ('SubdomainsOnly', 'Subdomains of the domain only'), ('DomainAndSubdomains', 'Exact domain and subdomains')])
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    public_key = models.TextField(blank=True, null=True)
    private_key = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailDomainKey'
        verbose_name = 'Email Domain Key'
        verbose_name_plural = 'Email Domain Keys'
        # keyPrefix = '09P'



class EmailMessage(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    activity = models.ForeignKey('Task', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailmessage_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailmessage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    text_body = models.TextField(blank=True, null=True)
    html_body = models.TextField(verbose_name='HTML Body', blank=True, null=True)
    headers = models.TextField(blank=True, null=True)
    subject = models.CharField(max_length=3000, blank=True, null=True)
    from_name = models.CharField(max_length=1000, blank=True, null=True)
    from_address = models.EmailField(blank=True, null=True)
    validated_from_address = models.CharField(max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, choices=[('jbaack@accelerantsys.com', 'Jim Baack <jbaack@accelerantsys.com>')], blank=True, null=True)
    to_address = models.CharField(max_length=4000, blank=True, null=True)
    cc_address = models.CharField(max_length=4000, verbose_name='CC Address', blank=True, null=True)
    bcc_address = models.CharField(max_length=4000, verbose_name='BCC Address', blank=True, null=True)
    incoming = models.BooleanField(verbose_name='Is Incoming', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    has_attachment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('0', 'New'), ('1', 'Read'), ('2', 'Replied'), ('3', 'Sent'), ('4', 'Forwarded'), ('5', 'Draft')])
    message_date = models.DateTimeField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reply_to_email_message = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_externally_visible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    message_identifier = models.CharField(max_length=255, verbose_name='Message ID', blank=True, null=True)
    thread_identifier = models.CharField(max_length=255, verbose_name='Thread ID', blank=True, null=True)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem]
    class Meta(models.Model.Meta):
        db_table = 'EmailMessage'
        verbose_name = 'Email Message'
        verbose_name_plural = 'Email Messages'
        # keyPrefix = '02s'



class EmailMessageRelation(models.Model):
    email_message = models.ForeignKey(EmailMessage, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    relation = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    relation_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('ToAddress', 'To Address'), ('CcAddress', 'Cc Address'), ('BccAddress', 'Bcc Address'), ('FromAddress', 'From Address')])
    relation_address = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation_object_type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmailMessageRelation'
        verbose_name = 'Email Message Relation'
        verbose_name_plural = 'Email Message Relations'
        # keyPrefix = '0CZ'



class EmailServicesAddress(models.Model):
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    local_part = models.CharField(max_length=64, verbose_name='Email address')
    email_domain_name = models.CharField(max_length=255, verbose_name='Email address domain', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_senders = models.TextField(verbose_name='Accept Email From', blank=True, null=True)
    run_as_user = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_runasuser_set')
    function = models.ForeignKey('EmailServicesFunction', models.DO_NOTHING)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesAddress'
        verbose_name = 'Email Services Address'
        verbose_name_plural = 'Email Services Address'
        # keyPrefix = '093'



class EmailServicesFunction(models.Model):
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    function_name = models.CharField(max_length=64, verbose_name='Email Service Name')
    authorized_senders = models.TextField(verbose_name='Accept Email From', blank=True, null=True)
    is_authentication_required = models.BooleanField(verbose_name='Advanced Email Security Settings', default=models.DEFAULTED_ON_CREATE)
    is_tls_required = models.BooleanField(verbose_name='TLS Required', default=models.DEFAULTED_ON_CREATE)
    attachment_option = models.CharField(max_length=40, verbose_name='Accept Attachments', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'None'), ('1', 'Text attachments only'), ('2', 'Binary attachments only'), ('3', 'All'), ('4', 'Attachment names only, no content')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, blank=True, null=True)
    over_limit_action = models.CharField(max_length=40, verbose_name='Over Email Rate Limit Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    function_inactive_action = models.CharField(max_length=40, verbose_name='Deactivated Email Service Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    address_inactive_action = models.CharField(max_length=40, verbose_name='Deactivated Email Address Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    authentication_failure_action = models.CharField(max_length=40, verbose_name='Unauthenticated Sender Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    authorization_failure_action = models.CharField(max_length=40, verbose_name='Unauthorized Sender Action', default=models.DEFAULTED_ON_CREATE, choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True, null=True)
    is_error_routing_enabled = models.BooleanField(verbose_name='Enable Error Routing', default=models.DEFAULTED_ON_CREATE)
    error_routing_address = models.EmailField(verbose_name='Route Error Emails to This Email Address', blank=True, null=True)
    is_text_attachments_as_binary = models.BooleanField(verbose_name='Convert Text Attachments to Binary Attachments', default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesfunction_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesfunction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesFunction'
        verbose_name = 'Email Service'
        verbose_name_plural = 'Email Services'
        # keyPrefix = '091'



class EmailStatus(models.Model):
    task = models.ForeignKey('Task', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailstatus_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    times_opened = models.IntegerField(verbose_name='# Times Opened', sf_read_only=models.READ_ONLY)
    first_open_date = models.DateTimeField(verbose_name='Date Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_open_date = models.DateTimeField(verbose_name='Last Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_template_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailStatus'
        verbose_name = 'Email Status'
        verbose_name_plural = 'Email Status'
        # keyPrefix = '018'



class EmailTemplate(models.Model):
    name = models.CharField(max_length=80, verbose_name='Email Template Name')
    developer_name = models.CharField(max_length=80, verbose_name='Template Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_owner_set')
    folder = models.ForeignKey('Folder', models.DO_NOTHING)  # Reference to tables [Folder, Organization, User]
    brand_template = models.ForeignKey(BrandTemplate, models.DO_NOTHING, blank=True, null=True)
    template_style = models.CharField(max_length=40, verbose_name='Style', sf_read_only=models.NOT_UPDATEABLE, choices=[('none', 'No Email Layout'), ('freeForm', 'Free Form Letter'), ('formalLetter', 'Formal Letter'), ('promotionRight', 'Promotion (Right)'), ('promotionLeft', 'Promotion (Left)'), ('newsletter', 'Newsletter'), ('products', 'Products')])
    is_active = models.BooleanField(verbose_name='Available For Use', default=models.DEFAULTED_ON_CREATE)
    template_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('text', 'Text'), ('html', 'HTML'), ('custom', 'Custom'), ('visualforce', 'Visualforce')])
    encoding = models.CharField(max_length=40, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')], blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    html_value = models.TextField(verbose_name='HTML Value', blank=True, null=True)
    body = models.TextField(verbose_name='Email Body', blank=True, null=True)
    times_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', blank=True, null=True)
    markup = models.TextField(blank=True, null=True)
    ui_type = models.CharField(max_length=40, verbose_name='UI Type', choices=[('1', 'Aloha'), ('2', 'SFX'), ('3', 'SFXSample')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    related_entity_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', choices=[('AcceptedEventRelation', None), ('AcceptedRecommendation', None), ('Account', None), ('AccountCleanInfo', None), ('AccountContactRole', None), ('AccountPartner', None), ('ActionLink', None), ('ActionLinkGroup', None), ('ActionLinkGroupAssoc', None), ('ActionLinkTemplateBinding', None), ('ActionLinkUserState', None), ('Activity', None), ('ActivityHistory', None), ('ActivityRecurrence2', None), ('ActivityRecurrence2Exception', None), ('ActivityRelation', None), ('AggregateResult', None), ('AnalyticAction', None), ('AnalyticActionConfiguration', None), ('AnalyticCondition', None), ('AnalyticNotification', None), ('AnalyticRecordUserAccess', None), ('AnalyticThreshold', None), ('Announcement', None), ('ApexDebuggerBreakpoint', None), ('ApexDebuggerEvent', None), ('ApexDebuggerRequest', None), ('ApexDebuggerSession', None), ('ApexTestQueueItem', None), ('Asset', None), ('AssetRelationship', None), ('AssistantInteraction', None), ('AssistantProgress', None), ('AssistantRecommendation', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchMatchDetail', None), ('AsyncApiJob', None), ('AsyncApiJobMatchDetail', None), ('AsyncApiQueryResult', None), ('AttachedContentDocument', None), ('Attachment', None), ('AudienceMembership', None), ('Auditable', None), ('AvroSchema', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('Campaign', None), ('CampaignInfluenceAdjustment', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('CanvasFeedItem', None), ('Case', None), ('CaseContactRole', None), ('CaseEscalation', None), ('CaseHistory2', None), ('CaseSolution', None), ('CategoryData', None), ('ChatSession', None), ('ChatSessionMembers', None), ('ChatterConversation', None), ('ChatterConversationMember', None), ('ChatterExtensionInstance', None), ('ChatterMessage', None), ('ChatterMessageThread', None), ('CleanAccountBackup', None), ('CleanActivityLog', None), ('CleanBatchErrorLog', None), ('CleanContactBackup', None), ('CleanEntityError', None), ('CleanEntityErrorLog', None), ('CleanFactEntityClaim', None), ('CleanFactFieldClaim', None), ('CleanInfo', None), ('CleanJobLog', None), ('CleanLeadBackup', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupMemberRequest', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('CollaborationInvitation', None), ('CollaborativeFilteringItem_to_Item', None), ('CollaborativeFilteringItem2Item', None), ('CombinedAttachment', None), ('ComponentResponseCache', None), ('Contact', None), ('ContactCleanInfo', None), ('ContentBody', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentSubscription', None), ('ContentFolder', None), ('ContentFolderDistribution', None), ('ContentFolderItem', None), ('ContentFolderLink', None), ('ContentFolderMember', None), ('ContentNote', None), ('ContentNotification', None), ('ContentNotificationParam', None), ('ContentReference', None), ('ContentVersion', None), ('ContentVersionComment', None), ('ContentVersionMap', None), ('ContentVersionRating', None), ('ContentVersionRenditionContent', None), ('ContentVersionTagName', None), ('ContentWorkspaceDoc', None), ('ContentWorkspaceRecentEvent', None), ('Contract', None), ('ContractContactRole', None), ('CustomSettingNameIndex', None), ('DandBCompany', None), ('Dashboard', None), ('DashboardComponent', None), ('DashboardFilter', None), ('DashboardFilterItem', None), ('DashboardFilterRepCol', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DatacloudOwnedEntity', None), ('DatacloudPurchaseUsage', None), ('DataExportEventInterface', None), ('DBCThumbnail', None), ('DBCThumbnailFilter', None), ('DeclinedEventRelation', None), ('DirectMessage', None), ('DirectMessageMember', None), ('DirectMessageMemberActivity', None), ('Document', None), ('DunsRightAsyncAccountRecord', None), ('DunsRightAsyncBatch', None), ('DunsRightAsyncChunk', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailStatus', None), ('EmailTemp', None), ('Endorsement', None), ('EngagementHistoryRollup', None), ('EntityBlacklist', None), ('EntityEventInterface', None), ('EntityHistory', None), ('EntityLock', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('EventAttendee', None), ('EventComments', None), ('EventDeliveryData', None), ('EventParameterData', None), ('EventRecurrenceException', None), ('EventRelation', None), ('EventSubscriptionData', None), ('EventSubscriptionHandleData', None), ('EventWhoRelation', None), ('ExchangeUserMapping', None), ('ExternalCredential', None), ('ExternalIdMap', None), ('FeedActionState', None), ('FeedAttachment', None), ('FeedChannel', None), ('FeedChannelSubscription', None), ('FeedClumpInfo', None), ('FeedClumpMapping', None), ('FeedComment', None), ('FeedCrossReference', None), ('FeedEntry', None), ('FeedFavorite', None), ('FeedItem', None), ('FeedLike', None), ('FeedMute', None), ('FeedPollChoice', None), ('FeedPollVote', None), ('FeedPost', None), ('FeedRecommendationInfo', None), ('FeedRevision', None), ('FeedSignal', None), ('FeedTrackedChange', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FlowInterview', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('FolderedContentDocument', None), ('ForecastingCompositeKey', None), ('ForecastShare', None), ('ForgottenToken', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('GroupSubscription', None), ('HammerResultStatus', None), ('Idea', None), ('InboundSocialPost', None), ('IncrementalCandidate', None), ('InstalledMobileApp', None), ('InteractionCountReport', None), ('JigsawSavedSearch', None), ('KnowledgeableUser', None), ('Lead', None), ('LeadCleanInfo', None), ('LinkedInLeadGen', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('LogSearch', None), ('LogSearchResult', None), ('LookedUpFromActivity', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MailAssociationItem', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedTopicLocation', None), ('MatchingInformation', None), ('MaterializedFeedEntry', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetricsTransmissionHistory', None), ('MobileMarkedRecord', None), ('MqSlaJob', None), ('MqSlaRequest', None), ('MultiCurrency', None), ('Name', None), ('Nameable', None), ('NameUnion', None), ('NewsFeed', None), ('Note', None), ('NoteAndAttachment', None), ('NotifDeliveryUserPref', None), ('NotificationMember', None), ('OpenActivity', None), ('Opportunity', None), ('OpportunityAlert', None), ('OpportunityCompetitor', None), ('OpportunityContactRole', None), ('OpportunityHistory', None), ('OpportunityLineItem', None), ('OpportunityPartner', None), ('OpportunityUpdateReminder', None), ('Order', None), ('OrderItem', None), ('OrgDeleteRequest', None), ('OrgRecommendation', None), ('OwnedContentDocument', None), ('Partner', None), ('PendingChangeContainer', None), ('PersonalizationResource', None), ('PersonalizedUnswdQuestion', None), ('Photo', None), ('PhotoItem', None), ('PortalAccount', None), ('Pricebook', None), ('Pricebook2', None), ('Pricebook2Old', None), ('PricebookEntry', None), ('PricebookShare', None), ('ProcessInstance', None), ('ProcessInstanceHistory', None), ('ProcessInstanceNode', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('Product', None), ('Product2', None), ('ProposedEventResponse', None), ('ProposedEventTime', None), ('PushIntent', None), ('PushProfileMapping', None), ('PushTopic', None), ('QuickText', None), ('RecommendationAudience', None), ('RecommendationBlacklist', None), ('RecommendationDefinition', None), ('RecommendationMetric', None), ('RecommendationSimilarity', None), ('RecommendationUserActivity', None), ('RecordAction', None), ('RecordOrigin', None), ('RecordUserAccessInterface', None), ('Renderer', None), ('Report', None), ('ReportAggregate', None), ('ReportBlock', None), ('ReportBlockAggregate', None), ('ReportBreak', None), ('ReportBucketField', None), ('ReportBucketFieldSourceValue', None), ('ReportBucketFieldValue', None), ('ReportChart', None), ('ReportColorRange', None), ('ReportColumn', None), ('ReportFilterItem', None), ('ReportJobRun', None), ('ReportJobRunError', None), ('ReportObjectFilterItem', None), ('ReportParam', None), ('ReportRunTracker', None), ('S2XAdminError', None), ('S2XContactMap', None), ('S2XEventMap', None), ('S2XEventRecordMap', None), ('S2XEventTxnProps', None), ('S2XRecordMap', None), ('S2XSandmanError', None), ('S2XTransaction', None), ('ScheduledRecommendation', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SearchActivity', None), ('SearchPromotionRule', None), ('SegmentSpace', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupFlowProgress', None), ('ShareInterface', None), ('SiteAsset', None), ('SiteChangelistComponent', None), ('SitePub', None), ('SitePubAsset', None), ('SitePubComponent', None), ('SitePubDomain', None), ('SitePubDomainSite', None), ('SocialPersona', None), ('SoftDeletable', None), ('Solution', None), ('StreamingChannel', None), ('SyncTransactionLog', None), ('SystemStreamingChannel', None), ('Task', None), ('TaskAssociationItem', None), ('TaskRecurrenceException', None), ('TaskRelation', None), ('TaskWhoRelation', None), ('TempStore', None), ('TodayGoal', None), ('Tombstone', None), ('Topic', None), ('TopicAssignment', None), ('TopicDataCategoryRule', None), ('TopicGroupActivity', None), ('TopicUserActivity', None), ('TopicUserEvent', None), ('TransactionSecurityAction', None), ('TransactionSecurityActionEvent', None), ('TransactionSecurityEventInterface', None), ('TransitionMessage', None), ('TrendingTopic', None), ('UndecidedEventRelation', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserEmailPreferredPerson', None), ('UserFeedChannel', None), ('UserMetrics', None), ('UserNavItem', None), ('UserProfileFeed', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('UserRecommendation', None), ('UserRecSummary', None), ('UserSetupAppInfo', None), ('Vote', None), ('VoteStats', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('XinstanceInfo', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailTemplate'
        verbose_name = 'Email Template'
        verbose_name_plural = 'Email Templates'
        # keyPrefix = '00X'



class EmbeddedServiceDetail(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Snap-ins Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    site = models.CharField(max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contrast_primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    nav_bar_color = models.CharField(max_length=255, verbose_name='NavBar Color', sf_read_only=models.READ_ONLY, blank=True, null=True)
    font = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_prechat_enabled = models.BooleanField(verbose_name='Pre-Chat Enabled', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmbeddedServiceDetail'
        verbose_name = 'Snap-ins'
        verbose_name_plural = 'Snap-ins'
        # keyPrefix = '0Lq'



class EntityDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    plural_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_compact_layout_id = models.CharField(max_length=70, verbose_name='Compact Layout ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_customizable = models.BooleanField(verbose_name='Is Customizable?', sf_read_only=models.READ_ONLY, default=False)
    is_apex_triggerable = models.BooleanField(verbose_name='Is Apex Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_enabled = models.BooleanField(verbose_name='Is Workflow Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_process_enabled = models.BooleanField(verbose_name='Is Approval Process Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    key_prefix = models.CharField(max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_custom_setting = models.BooleanField(verbose_name='Is Custom Setting?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_replicateable = models.BooleanField(verbose_name='Is Replicateable?', sf_read_only=models.READ_ONLY, default=False)
    is_retrieveable = models.BooleanField(verbose_name='Is Retrieveable?', sf_read_only=models.READ_ONLY, default=False)
    is_search_layoutable = models.BooleanField(verbose_name='Is Search Layoutable?', sf_read_only=models.READ_ONLY, default=False)
    is_searchable = models.BooleanField(verbose_name='Is Searchable?', sf_read_only=models.READ_ONLY, default=False)
    is_triggerable = models.BooleanField(verbose_name='Is Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_id_enabled = models.BooleanField(verbose_name='Is Id Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_creatable = models.BooleanField(verbose_name='Is Ever Creatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_updatable = models.BooleanField(verbose_name='Is Ever Updatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_deletable = models.BooleanField(verbose_name='Is Ever Deletable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_feed_enabled = models.BooleanField(verbose_name='Is Feed Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_queryable = models.BooleanField(verbose_name='Queryable', sf_read_only=models.READ_ONLY, default=False)
    is_mru_enabled = models.BooleanField(verbose_name='Is MRU List Functionality Enabled for This Object?', sf_read_only=models.READ_ONLY, default=False)
    detail_url = models.URLField(verbose_name='Detail URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_url = models.URLField(verbose_name='Edit URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_url = models.URLField(verbose_name='New URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_definition_url = models.URLField(verbose_name='Edit Definition URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_url = models.URLField(verbose_name='Help Setting Page URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_entity_access_id = models.CharField(max_length=150, verbose_name='User Entity Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    publisher_id = models.CharField(max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_layoutable = models.BooleanField(verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    record_types_supported = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    internal_sharing_model = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')])
    external_sharing_model = models.CharField(max_length=255, verbose_name='External sharing Model', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')])
    has_subtypes = models.BooleanField(verbose_name='Has Subtypes?', sf_read_only=models.READ_ONLY, default=False)
    is_subtype = models.BooleanField(verbose_name='Is Subtype?', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntityDefinition'
        verbose_name = 'Entity Definition'
        verbose_name_plural = 'Entity Definitions'
        # keyPrefix = '4ie'



class EntityParticle(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_autonumber = models.BooleanField(verbose_name='Is Field an Autonumber?', sf_read_only=models.READ_ONLY, default=False)
    byte_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_sensitive = models.BooleanField(verbose_name='Is Field Case Sensitive?', sf_read_only=models.READ_ONLY, default=False)
    is_unique = models.BooleanField(verbose_name='Is Field Unique?', sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(verbose_name='Is Field Creatable?', sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(verbose_name='Is Field Updatable?', sf_read_only=models.READ_ONLY, default=False)
    is_defaulted_on_create = models.BooleanField(verbose_name='Is Field Defaulted On Create?', sf_read_only=models.READ_ONLY, default=False)
    is_write_requires_master_read = models.BooleanField(verbose_name='Does Write Require Master Read?', sf_read_only=models.READ_ONLY, default=False)
    is_calculated = models.BooleanField(verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_permissionable = models.BooleanField(verbose_name='Is Field Permissionable?', sf_read_only=models.READ_ONLY, default=False)
    is_encrypted = models.BooleanField(verbose_name='Is Field Encrypted?', sf_read_only=models.READ_ONLY, default=False)
    digits = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    inline_help_text = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_target_field = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask_type = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_workflow_filterable = models.BooleanField(verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_layoutable = models.BooleanField(verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_dependent_picklist = models.BooleanField(verbose_name='Is Field a Dependent Picklist?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Field a Deprecated and Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_display_location_in_decimal = models.BooleanField(verbose_name='Is Field Displays Location in Decimals?', sf_read_only=models.READ_ONLY, default=False)
    default_value_formula = models.CharField(max_length=150, verbose_name='Default Value if Formula is Not Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_id_lookup = models.BooleanField(verbose_name='Can this Field be Used to Specify a Record in Upsert?', sf_read_only=models.READ_ONLY, default=False)
    is_name_pointing = models.BooleanField(verbose_name='Does this Field Contain the Name of the Parent?', sf_read_only=models.READ_ONLY, default=False)
    relationship_order = models.IntegerField(verbose_name='Type of Relationship for a Master-Detail Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.TextField(verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    is_component = models.BooleanField(verbose_name='Is Field a component of a compound field', sf_read_only=models.READ_ONLY, default=False)
    is_compound = models.BooleanField(verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntityParticle'
        verbose_name = 'Entity Particle'
        verbose_name_plural = 'Entity Particles'
        # keyPrefix = '0Nv'



class EntitySubscription(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentDocument, Contract, Dashboard, DashboardComponent, Event, Lead, Opportunity, Order, OrderItem, Product2, Report, Site, Solution, Task, Topic, User, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    subscriber = models.ForeignKey('User', models.DO_NOTHING, related_name='entitysubscription_subscriber_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='entitysubscription_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntitySubscription'
        verbose_name = 'Entity Subscription'
        verbose_name_plural = 'Entity Subscriptions'
        # keyPrefix = '0E8'



class Event(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='event_what_set', blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    subject = models.CharField(max_length=255, choices=[('Call', 'Call'), ('Email', 'Email'), ('Meeting', 'Meeting'), ('Send Letter/Quote', 'Send Letter/Quote'), ('Other', 'Other')], blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', default=models.DEFAULTED_ON_CREATE)
    activity_date_time = models.DateTimeField(verbose_name='Due Date Time', blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', blank=True, null=True)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', blank=True, null=True)
    start_date_time = models.DateTimeField(blank=True, null=True)
    end_date_time = models.DateTimeField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='event_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='event_owner_set')
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    show_as = models.CharField(max_length=40, verbose_name='Show Time As', default=models.DEFAULTED_ON_CREATE, choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_child = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_group_event = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    group_event_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='0', choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event'), ('3', 'Hidden Event')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='event_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='event_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Events', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date_time = models.DateTimeField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Fiji', '(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (New South Wales) (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (South Australia) (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Asia/Tehran', '(GMT+03:30) Iran Standard Time (Asia/Tehran)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Time (Africa/Casablanca)'), ('Europe/Amsterdam', '(GMT+01:00) Central European Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) Eastern Greenland Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('America/Sao_Paulo', '(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/St_Johns', '(GMT-03:30) Newfoundland Standard Time (America/St_Johns)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Halifax', '(GMT-04:00) Atlantic Standard Time (America/Halifax)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('Atlantic/Bermuda', '(GMT-04:00) Atlantic Standard Time (Atlantic/Bermuda)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Indiana/Indianapolis', '(GMT-05:00) Eastern Standard Time (America/Indiana/Indianapolis)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/New_York', '(GMT-05:00) Eastern Standard Time (America/New_York)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Chicago', '(GMT-06:00) Central Standard Time (America/Chicago)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Denver', '(GMT-07:00) Mountain Standard Time (America/Denver)'), ('America/Mazatlan', '(GMT-07:00) Mountain Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Los_Angeles', '(GMT-08:00) Pacific Standard Time (America/Los_Angeles)'), ('America/Tijuana', '(GMT-08:00) Pacific Standard Time (America/Tijuana)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Anchorage', '(GMT-09:00) Alaska Standard Time (America/Anchorage)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('America/Adak', '(GMT-10:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', default=models.DEFAULTED_ON_CREATE)
    event_subtype = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Event', 'Event')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Event'
        verbose_name = 'Event'
        verbose_name_plural = 'Events'
        # keyPrefix = '00U'



class EventBusSubscriber(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80, verbose_name='Subscriber Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    topic = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    position = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    tip = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Running', 'Running'), ('Suspended', 'Suspended'), ('Expired', 'Expired'), ('Error', 'Error')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventBusSubscriber'
        verbose_name = 'Platform Event Subscription'
        verbose_name_plural = 'Platform Event Subscription'
        # keyPrefix = '0Cd'



class EventFeed(models.Model):
    parent = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventFeed'
        verbose_name = 'Event Feed'
        verbose_name_plural = 'Event Feed'
        # keyPrefix = 'None'



class EventLogFile(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventlogfile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventlogfile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    event_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('API', 'API'), ('ApexCallout', 'Apex Callout'), ('ApexExecution', 'Apex Execution'), ('ApexSoap', 'Apex SOAP'), ('ApexTrigger', 'Apex Trigger'), ('AsyncReportRun', 'Asynchronous Report Run'), ('ContinuationCallout', 'Continuation Callout'), ('ExternalCrossOrgCallout', 'External Cross-Org Callout'), ('ExternalCustomApexCallout', 'External Custom Apex Callout'), ('ExternalODataCallout', 'External OData Callout'), ('BulkApi', 'Bulk API'), ('ChangeSetOperation', 'Change Set Operation'), ('Console', 'Console'), ('ContentDistribution', 'Content Distribution'), ('ContentDocumentLink', 'Content Document Link'), ('ContentTransfer', 'Content Transfer'), ('Dashboard', 'Dashboard'), ('DocumentAttachmentDownloads', 'Document Attachment Downloads'), ('InsecureExternalAssets', 'Insecure External Assets'), ('KnowledgeArticleView', 'Knowledge Article View'), ('LightningError', 'Lightning Error'), ('LightningInteraction', 'Lightning Interaction'), ('LightningPageView', 'Lightning Page View'), ('LightningPerformance', 'Lightning Performance'), ('Login', 'Login'), ('LoginAs', 'Login As'), ('Logout', 'Logout'), ('MetadataApiOperation', 'Metadata API Operation'), ('MultiBlockReport', 'Multiblock Report'), ('PackageInstall', 'Package Install'), ('QueuedExecution', 'Queued Execution'), ('Report', 'Report'), ('ReportExport', 'Report Export'), ('RestApi', 'Rest API'), ('Sandbox', 'Sandbox'), ('Search', 'Search'), ('SearchClick', 'Search Click'), ('Sites', 'Sites'), ('PlatformEncryption', 'Platform Encryption'), ('TimeBasedWorkflow', 'Time-Based Workflow'), ('TransactionSecurity', 'Transaction Security'), ('UITracking', 'UI Tracking'), ('URI', 'URI'), ('VisualforceRequest', 'Visualforce Request'), ('WaveChange', 'Wave Change'), ('WaveInteraction', 'Wave Interaction'), ('WavePerformance', 'Wave Performance')])
    log_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    log_file_length = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    log_file_content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    sequence = models.IntegerField(sf_read_only=models.READ_ONLY)
    interval = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Hourly', 'Hourly'), ('Daily', 'Daily')], blank=True, null=True)
    log_file_field_names = models.CharField(max_length=1333, sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_file_field_types = models.CharField(max_length=1333, sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_file = models.TextField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EventLogFile'
        verbose_name = 'Event Log File'
        verbose_name_plural = 'Event Log Files'
        # keyPrefix = '0AT'



class EventRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    status = models.CharField(max_length=40, choices=[('New', 'New'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('Uninvited', 'Uninvited'), ('Maybe', 'Maybe')], blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', blank=True, null=True)
    response = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EventRelation'
        verbose_name = 'Event Relation'
        verbose_name_plural = 'Event Relations'
        # keyPrefix = '0RE'



class ExternalDataSource(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatasource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatasource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=255, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datacloud', None), ('Datajourney', None), ('Identity', None), ('OData', None), ('OData4', None), ('OpenSearch', None), ('outgoingemail', None), ('SfdcOrg', None), ('SimpleURL', None), ('Wrapper', None)])
    endpoint = models.TextField(verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    repository = models.CharField(max_length=255, verbose_name='Default External Repository', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_writable = models.BooleanField(verbose_name='Writable External Objects', sf_read_only=models.READ_ONLY, default=False)
    principal_type = models.CharField(max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    protocol = models.CharField(max_length=255, verbose_name='Authentication Protocol', sf_read_only=models.READ_ONLY, help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication')])
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    large_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, related_name='externaldatasource_largeicon_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, related_name='externaldatasource_smallicon_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    custom_configuration = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataSource'
        verbose_name = 'External Data Source'
        verbose_name_plural = 'External Data Sources'
        # keyPrefix = '0XC'



class ExternalDataUserAuth(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ExternalDataSource, NamedCredential] Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_user_set', blank=True, null=True)
    protocol = models.CharField(max_length=255, verbose_name='Authentication Protocol', help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    username = models.CharField(max_length=255, blank=True, null=True)
    password = models.TextField(blank=True, null=True)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataUserAuth'
        verbose_name = 'External Data User Authentication'
        verbose_name_plural = 'External Data User Authentications'
        # keyPrefix = '0XU'



class FeedAttachment(models.Model):
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Attachment Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Content', None), ('InlineImage', None), ('Link', None), ('FeedEntity', None), ('ChatterExtension', None), ('Record', None)])
    record = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentDocument, ContentVersion, FeedItem]
    title = models.CharField(max_length=255, verbose_name='Feed Attachment Title', blank=True, null=True)
    value = models.CharField(max_length=1000, verbose_name='Feed Attachment Value', blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedAttachment'
        verbose_name = 'Feed Attachment'
        verbose_name_plural = 'Feed Attachments'
        # keyPrefix = '08M'



class FeedComment(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentDocument, Contract, Dashboard, DashboardComponent, Event, Lead, Opportunity, Order, OrderItem, Product2, Report, Site, Solution, Task, Topic, User, WorkOrder, WorkOrderLineItem]
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_lasteditby_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_body = models.TextField()
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    comment_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('TextComment', None), ('ContentComment', None)], blank=True, null=True)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_rich_text = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview'), ('Draft', 'Draft')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedComment'
        verbose_name = 'Feed Comment'
        verbose_name_plural = 'Feed Comments'
        # keyPrefix = '0D7'



class FeedItem(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, CollaborationGroup, Contact, ContentDocument, Contract, Dashboard, DashboardComponent, Event, Lead, Opportunity, Order, OrderItem, Product2, Report, Site, Solution, Task, Topic, User, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_lasteditby_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_rich_text = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_insertedby_set', sf_read_only=models.READ_ONLY)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, related_name='feeditem_bestcomment_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_content = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_link = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_feed_entity = models.BooleanField(verbose_name='Has Feed Entity Attachment', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview'), ('Draft', 'Draft')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedItem'
        verbose_name = 'Feed Item'
        verbose_name_plural = 'Feed Items'
        # keyPrefix = '0D5'



class FeedLike(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedlike_feeditem_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedlike_feedentity_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedlike_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedlike_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'FeedLike'
        verbose_name = 'Feed Like'
        verbose_name_plural = 'Feed Likes'
        # keyPrefix = '0I0'



class FeedPollChoice(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    position = models.IntegerField(sf_read_only=models.READ_ONLY)
    choice_body = models.TextField(verbose_name='ChoiceBody', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollChoice'
        verbose_name = 'Feed Poll Choice'
        verbose_name_plural = 'Feed Poll Choices'
        # keyPrefix = '09A'



class FeedPollVote(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    choice = models.ForeignKey(FeedPollChoice, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollVote'
        verbose_name = 'Feed Poll Vote'
        verbose_name_plural = 'Feed Poll Votes'
        # keyPrefix = '09B'



class FeedRevision(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    feed_entity = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [FeedComment, FeedItem] Master Detail Relationship *
    revision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Changed', None)], blank=True, null=True)
    edited_attribute = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('FeedCommentBody', None), ('FeedElementBody', None), ('FeedElementQuestionTitle', None), ('FeedElementVisibility', None)], blank=True, null=True)
    value = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_value_rich_text = models.BooleanField(verbose_name='Is Value RichText', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedRevision'
        verbose_name = 'Feed Revision'
        verbose_name_plural = 'Feed Revisions'
        # keyPrefix = '08U'



class FeedTrackedChange(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, ReportFeed, SiteFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkOrderFeed, WorkOrderLineItemFeed] Master Detail Relationship *
    field_name = models.CharField(max_length=120, verbose_name='Field', sf_read_only=models.READ_ONLY)
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedTrackedChange'
        verbose_name = 'Feed Tracked Change'
        verbose_name_plural = 'Feed Tracked Changes'
        # keyPrefix = '0D6'



class FieldDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_calculated = models.BooleanField(verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_filterable = models.BooleanField(verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_indexed = models.BooleanField(verbose_name='Is Field indexed?', sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_filterable = models.BooleanField(verbose_name='Is Field Filterable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_list_sortable = models.BooleanField(verbose_name='Is Field Sortable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    controlling_field_definition_id = models.CharField(max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    publisher_id = models.CharField(max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_field_access_id = models.CharField(max_length=150, verbose_name='User Field Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.TextField(verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    reference_target_field = models.CharField(max_length=80, verbose_name='Target Field on Entities to Which the Foreign Key Points', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_compound = models.BooleanField(verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FieldDefinition'
        verbose_name = 'Field Definition'
        verbose_name_plural = 'Field Definitions'
        # keyPrefix = '4fe'



class FieldPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('Contract', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('Goal', None), ('GoalLink', None), ('Idea', None), ('Lead', None), ('Macro', None), ('Metric', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('PricebookEntry', None), ('Product2', None), ('QuickText', None), ('RecordAction', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPerformanceCycle', None)])
    field = models.CharField(max_length=40, verbose_name='Field Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account.AccountNumber', None), ('Account.AccountSource', None), ('Account.Active__c', None), ('Account.AnnualRevenue', None), ('Account.BillingAddress', None), ('Account.CleanStatus', None), ('Account.CustomerPriority__c', None), ('Account.DandbCompany', None), ('Account.Description', None), ('Account.DunsNumber', None), ('Account.Fax', None), ('Account.Industry', None), ('Account.Jigsaw', None), ('Account.NaicsCode', None), ('Account.NaicsDesc', None), ('Account.NumberOfEmployees', None), ('Account.NumberofLocations__c', None), ('Account.Ownership', None), ('Account.Parent', None), ('Account.Phone', None), ('Account.Rating', None), ('Account.ShippingAddress', None), ('Account.Sic', None), ('Account.SicDesc', None), ('Account.Site', None), ('Account.SLA__c', None), ('Account.SLAExpirationDate__c', None), ('Account.SLASerialNumber__c', None), ('Account.TickerSymbol', None), ('Account.Tradestyle', None), ('Account.Type', None), ('Account.UpsellOpportunity__c', None), ('Account.Website', None), ('Account.YearStarted', None), ('Asset.Account', None), ('Asset.AssetLevel', None), ('Asset.AssetProvidedBy', None), ('Asset.AssetServicedBy', None), ('Asset.Contact', None), ('Asset.Description', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsInternal', None), ('Asset.Price', None), ('Asset.Product2', None), ('Asset.ProductCode', None), ('Asset.ProductDescription', None), ('Asset.ProductFamily', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.StockKeepingUnit', None), ('Asset.UsageEndDate', None), ('AssetRelationship.RelationshipType', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.HierarchyActualCost', None), ('Campaign.HierarchyAmountAllOpportunities', None), ('Campaign.HierarchyAmountWonOpportunities', None), ('Campaign.HierarchyBudgetedCost', None), ('Campaign.HierarchyExpectedRevenue', None), ('Campaign.HierarchyNumberOfContacts', None), ('Campaign.HierarchyNumberOfConvertedLeads', None), ('Campaign.HierarchyNumberOfLeads', None), ('Campaign.HierarchyNumberOfOpportunities', None), ('Campaign.HierarchyNumberOfResponses', None), ('Campaign.HierarchyNumberOfWonOpportunities', None), ('Campaign.HierarchyNumberSent', None), ('Campaign.IsActive', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.Parent', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.Type', None), ('Case.Account', None), ('Case.Asset', None), ('Case.BusinessHours', None), ('Case.ClosedDate', None), ('Case.Contact', None), ('Case.Description', None), ('Case.EngineeringReqNumber__c', None), ('Case.IsClosedOnCreate', None), ('Case.IsEscalated', None), ('Case.Origin', None), ('Case.Parent', None), ('Case.PotentialLiability__c', None), ('Case.Priority', None), ('Case.Product__c', None), ('Case.Reason', None), ('Case.SLAViolation__c', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.Type', None), ('Contact.Account', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.Birthdate', None), ('Contact.CleanStatus', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.DoNotCall', None), ('Contact.Email', None), ('Contact.Fax', None), ('Contact.HasOptedOutOfEmail', None), ('Contact.HasOptedOutOfFax', None), ('Contact.HomePhone', None), ('Contact.Jigsaw', None), ('Contact.Languages__c', None), ('Contact.LeadSource', None), ('Contact.Level__c', None), ('Contact.MailingAddress', None), ('Contact.MobilePhone', None), ('Contact.OtherAddress', None), ('Contact.OtherPhone', None), ('Contact.Phone', None), ('Contact.ReportsTo', None), ('Contact.Title', None), ('Contract.ActivatedBy', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.CompanySigned', None), ('Contract.CompanySignedDate', None), ('Contract.ContractTerm', None), ('Contract.CustomerSigned', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Name', None), ('Contract.OwnerExpirationNotice', None), ('Contract.Pricebook2', None), ('Contract.ShippingAddress', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Event.Description', None), ('Event.IsAllDayEvent', None), ('Event.Location', None), ('Event.Type', None), ('Event.What', None), ('Event.Who', None), ('Goal.CompletionDate', None), ('Goal.IsKeyCompanyGoal', None), ('Goal.OrigGoalId__c', None), ('Idea.Attachment', None), ('Idea.Status', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.CleanStatus', None), ('Lead.CompanyDunsNumber', None), ('Lead.CurrentGenerators__c', None), ('Lead.DandbCompany', None), ('Lead.Description', None), ('Lead.DoNotCall', None), ('Lead.Email', None), ('Lead.Fax', None), ('Lead.HasOptedOutOfEmail', None), ('Lead.HasOptedOutOfFax', None), ('Lead.Industry', None), ('Lead.Jigsaw', None), ('Lead.LastTransferDate', None), ('Lead.LeadSource', None), ('Lead.MobilePhone', None), ('Lead.NumberOfEmployees', None), ('Lead.NumberofLocations__c', None), ('Lead.Phone', None), ('Lead.Primary__c', None), ('Lead.ProductInterest__c', None), ('Lead.Rating', None), ('Lead.SICCode__c', None), ('Lead.Title', None), ('Lead.Website', None), ('Metric.OrigMetricId__c', None), ('Opportunity.Account', None), ('Opportunity.Amount', None), ('Opportunity.Campaign', None), ('Opportunity.Contract', None), ('Opportunity.CurrentGenerators__c', None), ('Opportunity.DeliveryInstallationStatus__c', None), ('Opportunity.Description', None), ('Opportunity.ExpectedRevenue', None), ('Opportunity.IsPrivate', None), ('Opportunity.LeadSource', None), ('Opportunity.MainCompetitors__c', None), ('Opportunity.NextStep', None), ('Opportunity.OrderNumber__c', None), ('Opportunity.Probability', None), ('Opportunity.TotalOpportunityQuantity', None), ('Opportunity.TrackingNumber__c', None), ('Opportunity.Type', None), ('OpportunityLineItem.Description', None), ('OpportunityLineItem.Discount', None), ('OpportunityLineItem.ListPrice', None), ('OpportunityLineItem.ProductCode', None), ('OpportunityLineItem.ServiceDate', None), ('OpportunityLineItem.Subtotal', None), ('OpportunityLineItem.TotalPrice', None), ('Order.ActivatedBy', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillToContact', None), ('Order.CompanyAuthorizedBy', None), ('Order.CompanyAuthorizedDate', None), ('Order.ContractEndDate', None), ('Order.ContractName', None), ('Order.CustomerAuthorizedBy', None), ('Order.CustomerAuthorizedDate', None), ('Order.Description', None), ('Order.Name', None), ('Order.Opportunity', None), ('Order.OrderReferenceNumber', None), ('Order.PoDate', None), ('Order.PoNumber', None), ('Order.ShippingAddress', None), ('Order.ShipToContact', None), ('Order.TotalAmount', None), ('Order.Type', None), ('OrderItem.Description', None), ('OrderItem.EndDate', None), ('OrderItem.ListPrice', None), ('OrderItem.ProductCode', None), ('OrderItem.ServiceDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSource', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.StockKeepingUnit', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.SolutionNote', None), ('Task.ActivityDate', None), ('Task.Description', None), ('Task.Type', None), ('Task.What', None), ('Task.Who', None), ('WorkOrder.Account', None), ('WorkOrder.Address', None), ('WorkOrder.Asset', None), ('WorkOrder.BusinessHours', None), ('WorkOrder.Case', None), ('WorkOrder.Contact', None), ('WorkOrder.Description', None), ('WorkOrder.Discount', None), ('WorkOrder.Duration', None), ('WorkOrder.DurationInMinutes', None), ('WorkOrder.DurationType', None), ('WorkOrder.EndDate', None), ('WorkOrder.GrandTotal', None), ('WorkOrder.IsClosed', None), ('WorkOrder.LineItemCount', None), ('WorkOrder.ParentWorkOrder', None), ('WorkOrder.Pricebook2', None), ('WorkOrder.Priority', None), ('WorkOrder.RootWorkOrder', None), ('WorkOrder.ServiceAppointmentCount', None), ('WorkOrder.StartDate', None), ('WorkOrder.Status', None), ('WorkOrder.StatusCategory', None), ('WorkOrder.Subject', None), ('WorkOrder.Subtotal', None), ('WorkOrder.Tax', None), ('WorkOrder.TotalPrice', None), ('WorkOrderLineItem.Address', None), ('WorkOrderLineItem.Asset', None), ('WorkOrderLineItem.Description', None), ('WorkOrderLineItem.Discount', None), ('WorkOrderLineItem.EndDate', None), ('WorkOrderLineItem.IsClosed', None), ('WorkOrderLineItem.ListPrice', None), ('WorkOrderLineItem.Order', None), ('WorkOrderLineItem.ParentWorkOrderLineItem', None), ('WorkOrderLineItem.PricebookEntry', None), ('WorkOrderLineItem.Priority', None), ('WorkOrderLineItem.Product2', None), ('WorkOrderLineItem.Quantity', None), ('WorkOrderLineItem.RootWorkOrderLineItem', None), ('WorkOrderLineItem.ServiceAppointmentCount', None), ('WorkOrderLineItem.StartDate', None), ('WorkOrderLineItem.Status', None), ('WorkOrderLineItem.StatusCategory', None), ('WorkOrderLineItem.Subject', None), ('WorkOrderLineItem.Subtotal', None), ('WorkOrderLineItem.TotalPrice', None), ('WorkOrderLineItem.UnitPrice', None)])
    permissions_edit = models.BooleanField(verbose_name='Edit Field', default=models.DEFAULTED_ON_CREATE)
    permissions_read = models.BooleanField(verbose_name='Read Field', default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FieldPermissions'
        verbose_name = 'Field Permissions'
        verbose_name_plural = 'Field Permissions'
        # keyPrefix = '01k'



class FileSearchActivity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='filesearchactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='filesearchactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    search_term = models.CharField(max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='Average Number of Results', sf_read_only=models.READ_ONLY)
    period = models.CharField(max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    query_language = models.CharField(max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    click_rank = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FileSearchActivity'
        verbose_name = 'FileSearchActivity'
        verbose_name_plural = 'File Search Activity'
        # keyPrefix = '06h'



class FiscalYearSettings(models.Model):
    period = models.ForeignKey('Period', models.DO_NOTHING, related_name='fiscalyearsettings_period_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    start_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    is_standard_year = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    year_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Custom', None), ('Placeholder', None)], blank=True, null=True)
    quarter_label_scheme = models.CharField(max_length=40, verbose_name='Quarter Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('Custom', 'Custom Quarter Names')], blank=True, null=True)
    period_label_scheme = models.CharField(max_length=40, verbose_name='Period Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('NumberByQuarter', 'Numbered By Quarter'), ('StandardMonths', 'Standard Month Names'), ('Custom', 'Custom Period Names')], blank=True, null=True)
    week_label_scheme = models.CharField(max_length=40, verbose_name='Week Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Year'), ('NumberByQuarter', 'Quarter'), ('NumberByPeriod', 'Period')], blank=True, null=True)
    quarter_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Quarter', choices=[('Quarter', 'Quarter'), ('FQ', 'FQ'), ('Q', 'Q'), ('Trimester', 'Trimester')], blank=True, null=True)
    period_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Period', choices=[('Period', 'Period'), ('FP', 'FP'), ('P', 'P'), ('Month', 'Month')], blank=True, null=True)
    week_start_day = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FiscalYearSettings'
        verbose_name = 'Fiscal Year Settings'
        verbose_name_plural = 'Fiscal Year Settings'
        # keyPrefix = '022'



class FlexQueueItem(models.Model):
    flex_queue_item_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    job_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token'), ('Queueable', 'Queueable')])
    async_apex_job = models.ForeignKey(AsyncApexJob, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    job_position = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FlexQueueItem'
        verbose_name = 'Flex Queue Item'
        verbose_name_plural = 'Flex Queue Items'
        # keyPrefix = '06i'



class FlowInterview(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowinterview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowinterview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    current_element = models.CharField(max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_label = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pause_label = models.CharField(max_length=1000, verbose_name='Pause Reason', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guid = models.CharField(max_length=255, verbose_name='Flow Interview Guid', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterview'
        verbose_name = 'Flow Interview'
        verbose_name_plural = 'Flow Interviews'
        # keyPrefix = '0Fo'



class FlowInterviewShare(models.Model):
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewShare'
        verbose_name = 'Flow Interview Share'
        verbose_name_plural = 'Flow Interview Share'
        # keyPrefix = 'None'



class Folder(models.Model):
    name = models.CharField(max_length=40)
    developer_name = models.CharField(max_length=80, verbose_name='Folder Unique Name', blank=True, null=True)
    access_type = models.CharField(max_length=40, choices=[('Shared', 'Shared'), ('Public', 'Public'), ('Hidden', 'Hidden'), ('PublicInternal', 'Public Internal')])
    is_readonly = models.BooleanField(verbose_name='Read Only', default=models.DEFAULTED_ON_CREATE)
    type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Document', 'Document'), ('Email', 'Email Template'), ('Report', 'Report'), ('Dashboard', 'Dashboard'), ('QuickText', 'Quick Text'), ('Macro', 'Macro')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Folder'
        verbose_name = 'Folder'
        verbose_name_plural = 'Folders'
        # keyPrefix = '00l'



class FolderedContentDocument(models.Model):
    is_folder = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folderedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folderedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FolderedContentDocument'
        verbose_name = 'Foldered Content Document'
        verbose_name_plural = 'Foldered Content Documents'
        # keyPrefix = 'None'



class ForecastShare(models.Model):
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Forecast Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    can_submit = models.BooleanField(verbose_name='Submit Allowed', sf_read_only=models.READ_ONLY, default=False)
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')])
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ForecastShare'
        verbose_name = 'Forecast Share'
        verbose_name_plural = 'Forecast Share'
        # keyPrefix = '608'



class ForecastingShare(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingshare_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingshare_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_or_group = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingshare_userorgroup_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    shared_forecast_manager_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ForecastingShare'
        verbose_name = 'Forecasting Share'
        verbose_name_plural = 'Forecasting Shares'
        # keyPrefix = '0Jc'



class GrantedByLicense(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='grantedbylicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='grantedbylicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'GrantedByLicense'
        verbose_name = 'Setting Granted By License'
        verbose_name_plural = 'Settings Granted By Licenses'
        # keyPrefix = '06d'



class Group(models.Model):
    name = models.CharField(max_length=40)
    developer_name = models.CharField(max_length=80, blank=True, null=True)
    related = models.ForeignKey('User', models.DO_NOTHING, related_name='group_related_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [User, UserRole]
    type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('AllCustomerPortal', None), ('ChannelProgramGroup', None), ('CollaborationGroup', None), ('Manager', None), ('ManagerAndSubordinatesInternal', None), ('Organization', None), ('PRMOrganization', None), ('Queue', None), ('Regular', None), ('Role', None), ('RoleAndSubordinates', None), ('RoleAndSubordinatesInternal', None), ('Territory', None), ('TerritoryAndSubordinates', None)])
    email = models.EmailField(blank=True, null=True)
    owner = models.ForeignKey('Organization', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Organization, User]
    does_send_email_to_members = models.BooleanField(verbose_name='Send Email to Members', default=models.DEFAULTED_ON_CREATE)
    does_include_bosses = models.BooleanField(verbose_name='Include Bosses', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='group_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='group_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'



class GroupMember(models.Model):
    group = models.ForeignKey(Group, models.DO_NOTHING, related_name='groupmember_group_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, related_name='groupmember_userorgroup_set', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'GroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Member'
        # keyPrefix = '011'



class Holiday(models.Model):
    name = models.CharField(max_length=80, verbose_name='Holiday Name')
    description = models.CharField(max_length=100, blank=True, null=True)
    is_all_day = models.BooleanField(verbose_name='All Day', default=models.DEFAULTED_ON_CREATE)
    activity_date = models.DateField(verbose_name='Holiday Date', blank=True, null=True)
    start_time_in_minutes = models.IntegerField(verbose_name='Start Time In Minutes From Midnight', blank=True, null=True)
    end_time_in_minutes = models.IntegerField(verbose_name='End Time In Minutes From Midnight', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='holiday_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='holiday_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_recurrence = models.BooleanField(verbose_name='Recurring Holiday', default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date = models.DateField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Holiday'
        verbose_name = 'Holiday'
        verbose_name_plural = 'Holidays'
        # keyPrefix = '0C0'



class Idea(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(max_length=255)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='idea_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='idea_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    community = models.ForeignKey(Community, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    body = models.TextField(verbose_name='Idea Body', blank=True, null=True)
    num_comments = models.IntegerField(verbose_name='Number of Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    vote_score = models.DecimalField(max_digits=18, decimal_places=4, sf_read_only=models.READ_ONLY, blank=True, null=True)
    vote_total = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    categories = models.CharField(max_length=4099, blank=True, null=True)
    status = models.CharField(max_length=40, blank=True, null=True)
    last_comment_date = models.DateTimeField(verbose_name='Last Idea Comment Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_comment = models.ForeignKey('IdeaComment', models.DO_NOTHING, related_name='idea_lastcomment_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_idea = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_html = models.BooleanField(verbose_name='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    is_merged = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    creator_full_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_small_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_name = models.CharField(max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Idea'
        verbose_name = 'Idea'
        verbose_name_plural = 'Ideas'
        # keyPrefix = '087'



class IdeaComment(models.Model):
    idea = models.ForeignKey(Idea, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    community = models.ForeignKey(Community, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    comment_body = models.TextField(blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_html = models.BooleanField(verbose_name='IsHtml', sf_read_only=models.READ_ONLY, default=False)
    creator_full_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_small_photo_url = models.CharField(max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True, null=True)
    creator_name = models.CharField(max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True, null=True)
    up_votes = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IdeaComment'
        verbose_name = 'Idea Comment'
        verbose_name_plural = 'Idea Comments'
        # keyPrefix = '00a'



class IdpEventLog(models.Model):
    initiated_by = models.CharField(max_length=40, verbose_name='Usage Type', sf_read_only=models.READ_ONLY, choices=[('IdP', 'IdP-Initiated SAML'), ('SP', 'SP-Initiated SAML'), ('OauthAuthorize', 'OAuth Authorization'), ('OauthTokenExchange', 'OAuth Token Exchange'), ('Unused', None)])
    timestamp = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_code = models.CharField(max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Success', 'Success'), ('NoSubdomain', 'Error: Org has not configured My Domains yet'), ('InvalidIdpEndpoint', 'Error: Invalid Identity Provider Endpoint URL'), ('InvalidAuthnRequest', 'Error: Unable to parse AuthnRequest from service provider'), ('InvalidSp', 'Error: Misconfigured or invalid service provider'), ('NoUserFedId', 'Error: User does not have a Federation Identifier selected'), ('NoAccess', 'Error: User does not have access to this service provider'), ('InvalidSettings', 'Error: IdP certificate is invalid or does not exist'), ('NoSpokeId', 'Error: No Spoke ID found'), ('InvalidSpokeSp', 'Error: Invalid spoke SP settings'), ('NoCustomAttrValue', 'Error: User does not have a value for the subject custom attribute'), ('NoCustomField', 'Error: Custom field not found'), ('InvalidIssuer', 'Error: Invalid Issuer'), ('InvalidSignature', 'Error: Invalid Signature'), ('UnableToResolve', 'Error: Unable to resolve request into a Service Provider'), ('InvalidSessionLevel', 'Error: Invalid session level'), ('InternalError', 'Error: Internal Error'), ('OauthError', 'OAuth Error'), ('AppAccessDenied', 'Error: App access denied'), ('AppBlocked', 'Error: App blocked'), ('ClientUnapproved', 'Error: Invalid grant'), ('CodeExpired', 'Error: Expired authorization code'), ('InvalidClientCredentials', 'Error: Invalid client credentials'), ('InvalidCode', 'Error: Invalid authorization code'), ('InvalidScope', 'Error: Invalid scope(s)'), ('InvalidUserCredentials', 'Error: Invalid user credentials'), ('InvalidDeviceId', 'Error: Invalid device ID'), ('UnknownError', 'Unknown Error')])
    saml_entity_url = models.CharField(max_length=1500, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_type = models.CharField(max_length=40, verbose_name='SSO Type', sf_read_only=models.READ_ONLY, choices=[('Saml', None), ('Oidc', None)], blank=True, null=True)
    app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    identity_used = models.CharField(max_length=765, sf_read_only=models.READ_ONLY, blank=True, null=True)
    options_has_logout_url = models.BooleanField(verbose_name='Has Logout URL', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'IdpEventLog'
        verbose_name = 'Identity Provider Event Log'
        verbose_name_plural = 'Identity Event Logs'
        # keyPrefix = '0Yu'



class InstalledMobileApp(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Installed Mobile App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('downloaded', 'Downloaded'), ('installed', 'Installed')])
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    connected_application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    version = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'InstalledMobileApp'
        verbose_name = 'Installed Mobile App'
        verbose_name_plural = 'Installed Mobile Apps'
        # keyPrefix = '0El'



class KnowledgeableUser(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    topic = models.ForeignKey('Topic', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    raw_rank = models.IntegerField(verbose_name='Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'KnowledgeableUser'
        verbose_name = 'Knowledgeable User'
        verbose_name_plural = 'Knowledgeable Users'
        # keyPrefix = '0in'



class Lead(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=128, blank=True, null=True)
    company = models.CharField(max_length=255)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Web', 'Web'), ('Phone Inquiry', 'Phone Inquiry'), ('Partner Referral', 'Partner Referral'), ('Purchased List', 'Purchased List'), ('Other', 'Other')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Open - Not Contacted', 'Open - Not Contacted'), ('Working - Contacted', 'Working - Contacted'), ('Closed - Converted', 'Closed - Converted'), ('Closed - Not Converted', 'Closed - Not Converted')])
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Other', 'Other')], blank=True, null=True)
    rating = models.CharField(max_length=40, choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_converted = models.BooleanField(verbose_name='Converted', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    converted_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_unread_by_owner = models.BooleanField(verbose_name='Unread By Owner', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lead_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lead_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(max_length=20, verbose_name='Data.com Key', blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    clean_status = models.CharField(max_length=40, choices=[('Matched', 'In Sync'), ('Different', 'Different'), ('Acknowledged', 'Reviewed'), ('NotFound', 'Not Found'), ('Inactive', 'Inactive'), ('Pending', 'Not Compared'), ('SelectMatch', 'Select Match'), ('Skipped', 'Skipped')], blank=True, null=True)
    company_duns_number = models.CharField(max_length=9, verbose_name='Company D-U-N-S Number', blank=True, null=True)
    dandb_company = models.ForeignKey(DandBcompany, models.DO_NOTHING, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    email_bounced_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    siccode = models.CharField(custom=True, db_column='SICCode__c', max_length=15, verbose_name='SIC Code', blank=True, null=True)
    product_interest = models.CharField(custom=True, max_length=255, choices=[('GC1000 series', 'GC1000 series'), ('GC5000 series', 'GC5000 series'), ('GC3000 series', 'GC3000 series')], blank=True, null=True)
    primary = models.CharField(custom=True, max_length=255, choices=[('No', 'No'), ('Yes', 'Yes')], blank=True, null=True)
    current_generators = models.CharField(custom=True, max_length=100, verbose_name='Current Generator(s)', blank=True, null=True)
    numberof_locations = models.DecimalField(custom=True, max_digits=3, decimal_places=0, verbose_name='Number of Locations', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'



class LeadCleanInfo(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Lead Clean Info Name', sf_read_only=models.NOT_CREATEABLE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadcleaninfo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadcleaninfo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_matched_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_status_changed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_status_changed_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadcleaninfo_laststatuschangedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_inactive = models.BooleanField(verbose_name='Contact Status in Salesforce', sf_read_only=models.NOT_CREATEABLE, default=False)
    first_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    annual_revenue = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Number of Employees', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Other', 'Other')], blank=True, null=True)
    company_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_duns_number = models.CharField(max_length=9, verbose_name='Company D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_status_data_dot_com = models.CharField(max_length=255, verbose_name='Contact Status per Data.com', sf_read_only=models.READ_ONLY, choices=[('IsActiveContactDataDotCom', 'Contact is Active per Data.com'), ('WrongPhoneDataDotCom', 'Phone is Wrong per Data.com'), ('WrongEmailDataDotCom', 'Email is Wrong per Data.com'), ('WrongPhoneAndEmailDataDotCom', 'Phone and Email are Wrong per Data.com'), ('NotAtCompanyContactDataDotCom', 'Contact Not at Company per Data.com'), ('InactiveDataDotCom', 'Contact is Inactive per Data.com'), ('CompanyOutOfBusinessDataDotCom', 'Company this contact belongs to is out of business per Data.com'), ('CompanyNeverExistedDataDotCom', 'Company this contact belongs to never existed per Data.com'), ('DeadEmailDomainDataDotCom', 'Email address is invalid per Data.com')], blank=True, null=True)
    is_reviewed_name = models.BooleanField(verbose_name='Name is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_email = models.BooleanField(verbose_name='Email is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_phone = models.BooleanField(verbose_name='Phone is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_address = models.BooleanField(verbose_name='Address is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_title = models.BooleanField(verbose_name='Title is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_annual_revenue = models.BooleanField(verbose_name='Annual Revenue is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_number_of_employees = models.BooleanField(verbose_name='Number of Employees is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_industry = models.BooleanField(verbose_name='Industry is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_company_name = models.BooleanField(verbose_name='Company Name is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_company_duns_number = models.BooleanField(verbose_name='Company D-U-N-S Number is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_reviewed_dand_bcompany_duns_number = models.BooleanField(db_column='IsReviewedDandBCompanyDunsNumber', verbose_name='D&B Company D-U-N-S Number is Reviewed', sf_read_only=models.NOT_CREATEABLE)
    is_different_first_name = models.BooleanField(verbose_name='First Name is Different', sf_read_only=models.READ_ONLY)
    is_different_last_name = models.BooleanField(verbose_name='Last Name is Different', sf_read_only=models.READ_ONLY)
    is_different_email = models.BooleanField(verbose_name='Email is Different', sf_read_only=models.READ_ONLY)
    is_different_phone = models.BooleanField(verbose_name='Phone is Different', sf_read_only=models.READ_ONLY)
    is_different_street = models.BooleanField(verbose_name='Street is Different', sf_read_only=models.READ_ONLY)
    is_different_city = models.BooleanField(verbose_name='City is Different', sf_read_only=models.READ_ONLY)
    is_different_state = models.BooleanField(verbose_name='State is Different', sf_read_only=models.READ_ONLY)
    is_different_postal_code = models.BooleanField(verbose_name='ZIP is Different', sf_read_only=models.READ_ONLY)
    is_different_country = models.BooleanField(verbose_name='Country is Different', sf_read_only=models.READ_ONLY)
    is_different_title = models.BooleanField(verbose_name='Title is Different', sf_read_only=models.READ_ONLY)
    is_different_annual_revenue = models.BooleanField(verbose_name='Annual Revenue is Different', sf_read_only=models.READ_ONLY)
    is_different_number_of_employees = models.BooleanField(verbose_name='Number of Employees is Different', sf_read_only=models.READ_ONLY)
    is_different_industry = models.BooleanField(verbose_name='Industry is Different', sf_read_only=models.READ_ONLY)
    is_different_company_name = models.BooleanField(verbose_name='Company Name is Different', sf_read_only=models.READ_ONLY)
    is_different_company_duns_number = models.BooleanField(verbose_name='Company D-U-N-S Number is Different', sf_read_only=models.READ_ONLY)
    is_different_dand_bcompany_duns_number = models.BooleanField(db_column='IsDifferentDandBCompanyDunsNumber', verbose_name='D&B Company D-U-N-S Number is Different', sf_read_only=models.READ_ONLY)
    is_different_state_code = models.BooleanField(verbose_name='State Code is Different', sf_read_only=models.READ_ONLY)
    is_different_country_code = models.BooleanField(verbose_name='Country Code is Different', sf_read_only=models.READ_ONLY)
    cleaned_by_job = models.BooleanField(verbose_name='Cleaned by Job', sf_read_only=models.READ_ONLY)
    cleaned_by_user = models.BooleanField(verbose_name='Cleaned by User', sf_read_only=models.READ_ONLY)
    dand_bcompany_duns_number = models.CharField(db_column='DandBCompanyDunsNumber', max_length=9, verbose_name='D&B Company D-U-N-S Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_dot_com_company_id = models.CharField(max_length=20, verbose_name='Data.com Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_flagged_wrong_name = models.BooleanField(verbose_name='Name is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_email = models.BooleanField(verbose_name='Email is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_phone = models.BooleanField(verbose_name='Phone is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_address = models.BooleanField(verbose_name='Address is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_title = models.BooleanField(verbose_name='Title is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_annual_revenue = models.BooleanField(verbose_name='Annual Revenue is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_number_of_employees = models.BooleanField(verbose_name='Number of Employees is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_industry = models.BooleanField(verbose_name='Industry is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_company_name = models.BooleanField(verbose_name='Company Name is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    is_flagged_wrong_company_duns_number = models.BooleanField(verbose_name='Company D-U-N-S Number is Flagged Wrong', sf_read_only=models.NOT_CREATEABLE)
    data_dot_com_id = models.CharField(max_length=20, verbose_name='Data.com ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadCleanInfo'
        verbose_name = 'Lead Clean Info'
        verbose_name_plural = 'Lead Clean Info'
        # keyPrefix = '1CL'



class LeadFeed(models.Model):
    parent = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadFeed'
        verbose_name = 'Lead Feed'
        verbose_name_plural = 'Lead Feed'
        # keyPrefix = 'None'



class LeadHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('AnnualRevenue', 'Annual Revenue'), ('City', 'City'), ('CleanStatus', 'Clean Status'), ('Company', 'Company'), ('CompanyDunsNumber', 'Company D-U-N-S Number'), ('Country', 'Country'), ('created', 'Created.'), ('CurrentGenerators__c', 'Current Generator(s)'), ('DandbCompany', 'D&B Company'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('Industry', 'Industry'), ('LastName', 'Last Name'), ('Latitude', 'Latitude'), ('leadConverted', 'Lead Converted.'), ('leadMerged', 'Lead Merged'), ('Owner', 'Lead Owner'), ('LeadSource', 'Lead Source'), ('Status', 'Lead Status'), ('Longitude', 'Longitude'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('NumberOfEmployees', 'No. of Employees'), ('NumberofLocations__c', 'Number of Locations'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', 'Phone'), ('Primary__c', 'Primary'), ('ProductInterest__c', 'Product Interest'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Salutation', 'Salutation'), ('SICCode__c', 'SIC Code'), ('State', 'State/Province'), ('Street', 'Street'), ('Title', 'Title'), ('IsUnreadByOwner', 'Unread By Owner'), ('Website', 'Website'), ('PostalCode', 'Zip/Postal Code')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadHistory'
        verbose_name = 'Lead History'
        verbose_name_plural = 'Lead History'
        # keyPrefix = 'None'



class LeadShare(models.Model):
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    lead_access_level = models.CharField(max_length=40, verbose_name='Lead Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'LeadShare'
        verbose_name = 'Lead Share'
        verbose_name_plural = 'Lead Share'
        # keyPrefix = '01o'



class LeadStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_converted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'LeadStatus'
        verbose_name = 'Lead Status Value'
        verbose_name_plural = 'Lead Status Value'
        # keyPrefix = '01J'



class ListView(models.Model):
    name = models.CharField(max_length=40, verbose_name='View Name', sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='View Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionKnowledgeSubmit', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTrigger', None), ('AppIpRange', None), ('AppMenuItem', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('Attachment', None), ('AuraDefinitionBundle', None), ('AuthProvider', None), ('AuthSession', None), ('BackgroundOperation', None), ('BrandTemplate', None), ('BusinessHours', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Community', None), ('ConnectedApplication', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContentAsset', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentNote', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CronTrigger', None), ('CustomEntityDefinition', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('DandBCompany', None), ('Dashboard', None), ('DashboardComponent', None), ('DatacloudCompany', None), ('DatacloudContact', None), ('DebugLevel', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EmailBrand', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EnhancedEmailTemplate', None), ('EntityHistory', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('EventType', None), ('EventTypeParameter', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FlexiPage', None), ('FlowDefinition', None), ('FlowInterview', None), ('Folder', None), ('Group', None), ('Holiday', None), ('Idea', None), ('InteractionDefinitionVersion', None), ('InteractionLayoutDetail', None), ('IpWhitelist', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('ListEmail', None), ('ListEmailSentResult', None), ('ListPoolUsage', None), ('ListView', None), ('LocalizedValue', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MobileConfig', None), ('MobileDevice', None), ('NamedCredential', None), ('Note', None), ('OauthConsumer', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('Package2Member', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('PendingChange', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PlatformCachePartition', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessTimeQueue', None), ('Product2', None), ('Profile', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('QuickText', None), ('RateLimitingNotification', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('SearchPromotionRule', None), ('SettingsTemplate', None), ('SiteIframeWhiteListUrl', None), ('SocialPersona', None), ('SoftphoneLayout', None), ('Solution', None), ('StaticResource', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('TwoFactorTempCode', None), ('User', None), ('UserAppMenuItem', None), ('UserLicense', None), ('UserProvAccount', None), ('UserRole', None), ('VerificationHistory', None), ('Vote', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkOrder', None), ('WorkOrderLineItem', None)], blank=True, null=True)
    is_soql_compatible = models.BooleanField(verbose_name='Is SOQL Compatible', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ListView'
        verbose_name = 'List View'
        verbose_name_plural = 'List Views'
        # keyPrefix = '00B'



class ListViewChart(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionKnowledgeSubmit', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTrigger', None), ('AppIpRange', None), ('AppMenuItem', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('Attachment', None), ('AuraDefinitionBundle', None), ('AuthProvider', None), ('AuthSession', None), ('BackgroundOperation', None), ('BrandTemplate', None), ('BusinessHours', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Community', None), ('ConnectedApplication', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContentAsset', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentNote', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CronTrigger', None), ('CustomEntityDefinition', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('DandBCompany', None), ('Dashboard', None), ('DashboardComponent', None), ('DatacloudCompany', None), ('DatacloudContact', None), ('DebugLevel', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EmailBrand', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EnhancedEmailTemplate', None), ('EntityHistory', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('EventType', None), ('EventTypeParameter', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FlexiPage', None), ('FlowDefinition', None), ('FlowInterview', None), ('Folder', None), ('Group', None), ('Holiday', None), ('Idea', None), ('InteractionDefinitionVersion', None), ('InteractionLayoutDetail', None), ('IpWhitelist', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('ListEmail', None), ('ListEmailSentResult', None), ('ListPoolUsage', None), ('ListView', None), ('LocalizedValue', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MobileConfig', None), ('MobileDevice', None), ('NamedCredential', None), ('Note', None), ('OauthConsumer', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('Package2Member', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('PendingChange', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PlatformCachePartition', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessTimeQueue', None), ('Product2', None), ('Profile', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('QuickText', None), ('RateLimitingNotification', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('SearchPromotionRule', None), ('SettingsTemplate', None), ('SiteIframeWhiteListUrl', None), ('SocialPersona', None), ('SoftphoneLayout', None), ('Solution', None), ('StaticResource', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('TwoFactorTempCode', None), ('User', None), ('UserAppMenuItem', None), ('UserLicense', None), ('UserProvAccount', None), ('UserRole', None), ('VerificationHistory', None), ('Vote', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkOrder', None), ('WorkOrderLineItem', None)])
    developer_name = models.CharField(max_length=80, verbose_name='API Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_owner_set')  # Master Detail Relationship *
    chart_type = models.CharField(max_length=255, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    grouping_field = models.CharField(max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.AccountNumber', None), ('Account.AccountSource', None), ('Account.AnnualRevenue', None), ('Account.BillingAddress', None), ('Account.BillingCity', None), ('Account.BillingCountry', None), ('Account.BillingGeocodeAccuracy', None), ('Account.BillingLatitude', None), ('Account.BillingLongitude', None), ('Account.BillingPostalCode', None), ('Account.BillingState', None), ('Account.BillingStreet', None), ('Account.CleanStatus', None), ('Account.CreatedById', None), ('Account.CreatedDate', None), ('Account.DandbCompanyId', None), ('Account.Description', None), ('Account.DunsNumber', None), ('Account.Fax', None), ('Account.Id', None), ('Account.Industry', None), ('Account.IsDeleted', None), ('Account.Jigsaw', None), ('Account.JigsawCompanyId', None), ('Account.LastActivityDate', None), ('Account.LastModifiedById', None), ('Account.LastModifiedDate', None), ('Account.LastReferencedDate', None), ('Account.LastViewedDate', None), ('Account.MasterRecordId', None), ('Account.NaicsCode', None), ('Account.NaicsDesc', None), ('Account.Name', None), ('Account.NumberOfEmployees', None), ('Account.OwnerId', None), ('Account.Ownership', None), ('Account.ParentId', None), ('Account.Phone', None), ('Account.PhotoUrl', None), ('Account.Rating', None), ('Account.ShippingAddress', None), ('Account.ShippingCity', None), ('Account.ShippingCountry', None), ('Account.ShippingGeocodeAccuracy', None), ('Account.ShippingLatitude', None), ('Account.ShippingLongitude', None), ('Account.ShippingPostalCode', None), ('Account.ShippingState', None), ('Account.ShippingStreet', None), ('Account.Sic', None), ('Account.SicDesc', None), ('Account.Site', None), ('Account.SystemModstamp', None), ('Account.TickerSymbol', None), ('Account.Tradestyle', None), ('Account.Type', None), ('Account.Website', None), ('Account.YearStarted', None), ('Asset.AccountId', None), ('Asset.ContactId', None), ('Asset.CreatedById', None), ('Asset.CreatedDate', None), ('Asset.Description', None), ('Asset.Id', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsDeleted', None), ('Asset.LastModifiedById', None), ('Asset.LastModifiedDate', None), ('Asset.LastReferencedDate', None), ('Asset.LastViewedDate', None), ('Asset.Name', None), ('Asset.OwnerId', None), ('Asset.ParentId', None), ('Asset.Price', None), ('Asset.Product2Id', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.RootAssetId', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.SystemModstamp', None), ('Asset.UsageEndDate', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.CampaignMemberRecordTypeId', None), ('Campaign.CreatedById', None), ('Campaign.CreatedDate', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.Id', None), ('Campaign.IsActive', None), ('Campaign.IsDeleted', None), ('Campaign.LastActivityDate', None), ('Campaign.LastModifiedById', None), ('Campaign.LastModifiedDate', None), ('Campaign.LastReferencedDate', None), ('Campaign.LastViewedDate', None), ('Campaign.Name', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.OwnerId', None), ('Campaign.ParentId', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.SystemModstamp', None), ('Campaign.Type', None), ('Case.AccountId', None), ('Case.AssetId', None), ('Case.CaseNumber', None), ('Case.ClosedDate', None), ('Case.ContactEmail', None), ('Case.ContactFax', None), ('Case.ContactId', None), ('Case.ContactMobile', None), ('Case.ContactPhone', None), ('Case.CreatedById', None), ('Case.CreatedDate', None), ('Case.Description', None), ('Case.Id', None), ('Case.IsClosed', None), ('Case.IsDeleted', None), ('Case.IsEscalated', None), ('Case.LastModifiedById', None), ('Case.LastModifiedDate', None), ('Case.LastReferencedDate', None), ('Case.LastViewedDate', None), ('Case.Origin', None), ('Case.OwnerId', None), ('Case.ParentId', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Status', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.SystemModstamp', None), ('Case.Type', None), ('CollaborationGroup.AnnouncementId', None), ('CollaborationGroup.BannerPhotoUrl', None), ('CollaborationGroup.CanHaveGuests', None), ('CollaborationGroup.CollaborationType', None), ('CollaborationGroup.CreatedById', None), ('CollaborationGroup.CreatedDate', None), ('CollaborationGroup.Description', None), ('CollaborationGroup.FullPhotoUrl', None), ('CollaborationGroup.GroupEmail', None), ('CollaborationGroup.HasPrivateFieldsAccess', None), ('CollaborationGroup.Id', None), ('CollaborationGroup.InformationBody', None), ('CollaborationGroup.InformationTitle', None), ('CollaborationGroup.IsArchived', None), ('CollaborationGroup.IsAutoArchiveDisabled', None), ('CollaborationGroup.IsBroadcast', None), ('CollaborationGroup.LastFeedModifiedDate', None), ('CollaborationGroup.LastModifiedById', None), ('CollaborationGroup.LastModifiedDate', None), ('CollaborationGroup.LastReferencedDate', None), ('CollaborationGroup.LastViewedDate', None), ('CollaborationGroup.MediumPhotoUrl', None), ('CollaborationGroup.MemberCount', None), ('CollaborationGroup.Name', None), ('CollaborationGroup.OwnerId', None), ('CollaborationGroup.SmallPhotoUrl', None), ('CollaborationGroup.SystemModstamp', None), ('Contact.AccountId', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.Birthdate', None), ('Contact.CleanStatus', None), ('Contact.CreatedById', None), ('Contact.CreatedDate', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.Email', None), ('Contact.EmailBouncedDate', None), ('Contact.EmailBouncedReason', None), ('Contact.Fax', None), ('Contact.FirstName', None), ('Contact.HomePhone', None), ('Contact.Id', None), ('Contact.IsDeleted', None), ('Contact.IsEmailBounced', None), ('Contact.Jigsaw', None), ('Contact.JigsawContactId', None), ('Contact.LastActivityDate', None), ('Contact.LastCURequestDate', None), ('Contact.LastCUUpdateDate', None), ('Contact.LastModifiedById', None), ('Contact.LastModifiedDate', None), ('Contact.LastName', None), ('Contact.LastReferencedDate', None), ('Contact.LastViewedDate', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MailingCity', None), ('Contact.MailingCountry', None), ('Contact.MailingGeocodeAccuracy', None), ('Contact.MailingLatitude', None), ('Contact.MailingLongitude', None), ('Contact.MailingPostalCode', None), ('Contact.MailingState', None), ('Contact.MailingStreet', None), ('Contact.MasterRecordId', None), ('Contact.MobilePhone', None), ('Contact.Name', None), ('Contact.OtherAddress', None), ('Contact.OtherCity', None), ('Contact.OtherCountry', None), ('Contact.OtherGeocodeAccuracy', None), ('Contact.OtherLatitude', None), ('Contact.OtherLongitude', None), ('Contact.OtherPhone', None), ('Contact.OtherPostalCode', None), ('Contact.OtherState', None), ('Contact.OtherStreet', None), ('Contact.OwnerId', None), ('Contact.Phone', None), ('Contact.PhotoUrl', None), ('Contact.RecordTypeId', None), ('Contact.ReportsToId', None), ('Contact.Salutation', None), ('Contact.SystemModstamp', None), ('Contact.Title', None), ('ContentVersion.Checksum', None), ('ContentVersion.ContentDocumentId', None), ('ContentVersion.ContentLocation', None), ('ContentVersion.ContentModifiedById', None), ('ContentVersion.ContentModifiedDate', None), ('ContentVersion.ContentSize', None), ('ContentVersion.ContentUrl', None), ('ContentVersion.CreatedById', None), ('ContentVersion.CreatedDate', None), ('ContentVersion.Description', None), ('ContentVersion.ExternalDataSourceId', None), ('ContentVersion.ExternalDocumentInfo1', None), ('ContentVersion.ExternalDocumentInfo2', None), ('ContentVersion.FeaturedContentBoost', None), ('ContentVersion.FeaturedContentDate', None), ('ContentVersion.FileExtension', None), ('ContentVersion.FileType', None), ('ContentVersion.FirstPublishLocationId', None), ('ContentVersion.Id', None), ('ContentVersion.IsAssetEnabled', None), ('ContentVersion.IsDeleted', None), ('ContentVersion.IsLatest', None), ('ContentVersion.IsMajorVersion', None), ('ContentVersion.LastModifiedById', None), ('ContentVersion.LastModifiedDate', None), ('ContentVersion.NegativeRatingCount', None), ('ContentVersion.Origin', None), ('ContentVersion.OwnerId', None), ('ContentVersion.PathOnClient', None), ('ContentVersion.PositiveRatingCount', None), ('ContentVersion.PublishStatus', None), ('ContentVersion.RatingCount', None), ('ContentVersion.ReasonForChange', None), ('ContentVersion.SharingOption', None), ('ContentVersion.SystemModstamp', None), ('ContentVersion.TagCsv', None), ('ContentVersion.TextPreview', None), ('ContentVersion.Title', None), ('ContentVersion.VersionData', None), ('ContentVersion.VersionNumber', None), ('Contract.AccountId', None), ('Contract.ActivatedById', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.BillingCity', None), ('Contract.BillingCountry', None), ('Contract.BillingGeocodeAccuracy', None), ('Contract.BillingLatitude', None), ('Contract.BillingLongitude', None), ('Contract.BillingPostalCode', None), ('Contract.BillingState', None), ('Contract.BillingStreet', None), ('Contract.CompanySignedDate', None), ('Contract.CompanySignedId', None), ('Contract.ContractNumber', None), ('Contract.ContractTerm', None), ('Contract.CreatedById', None), ('Contract.CreatedDate', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedId', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Id', None), ('Contract.IsDeleted', None), ('Contract.LastActivityDate', None), ('Contract.LastApprovedDate', None), ('Contract.LastModifiedById', None), ('Contract.LastModifiedDate', None), ('Contract.LastReferencedDate', None), ('Contract.LastViewedDate', None), ('Contract.OwnerExpirationNotice', None), ('Contract.OwnerId', None), ('Contract.Pricebook2Id', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Contract.Status', None), ('Contract.StatusCode', None), ('Contract.SystemModstamp', None), ('DandBCompany.Address', None), ('DandBCompany.City', None), ('DandBCompany.CompanyCurrencyIsoCode', None), ('DandBCompany.Country', None), ('DandBCompany.CountryAccessCode', None), ('DandBCompany.CreatedById', None), ('DandBCompany.CreatedDate', None), ('DandBCompany.CurrencyCode', None), ('DandBCompany.Description', None), ('DandBCompany.DomesticUltimateBusinessName', None), ('DandBCompany.DomesticUltimateDunsNumber', None), ('DandBCompany.DunsNumber', None), ('DandBCompany.EmployeeQuantityGrowthRate', None), ('DandBCompany.EmployeesHere', None), ('DandBCompany.EmployeesHereReliability', None), ('DandBCompany.EmployeesTotal', None), ('DandBCompany.EmployeesTotalReliability', None), ('DandBCompany.FamilyMembers', None), ('DandBCompany.Fax', None), ('DandBCompany.FifthNaics', None), ('DandBCompany.FifthNaicsDesc', None), ('DandBCompany.FifthSic', None), ('DandBCompany.FifthSic8', None), ('DandBCompany.FifthSic8Desc', None), ('DandBCompany.FifthSicDesc', None), ('DandBCompany.FipsMsaCode', None), ('DandBCompany.FipsMsaDesc', None), ('DandBCompany.FortuneRank', None), ('DandBCompany.FourthNaics', None), ('DandBCompany.FourthNaicsDesc', None), ('DandBCompany.FourthSic', None), ('DandBCompany.FourthSic8', None), ('DandBCompany.FourthSic8Desc', None), ('DandBCompany.FourthSicDesc', None), ('DandBCompany.GeoCodeAccuracy', None), ('DandBCompany.GeocodeAccuracyStandard', None), ('DandBCompany.GlobalUltimateBusinessName', None), ('DandBCompany.GlobalUltimateDunsNumber', None), ('DandBCompany.GlobalUltimateTotalEmployees', None), ('DandBCompany.Id', None), ('DandBCompany.ImportExportAgent', None), ('DandBCompany.IncludedInSnP500', None), ('DandBCompany.IsDeleted', None), ('DandBCompany.LastModifiedById', None), ('DandBCompany.LastModifiedDate', None), ('DandBCompany.LastReferencedDate', None), ('DandBCompany.LastViewedDate', None), ('DandBCompany.Latitude', None), ('DandBCompany.LegalStatus', None), ('DandBCompany.LocationStatus', None), ('DandBCompany.Longitude', None), ('DandBCompany.MailingAddress', None), ('DandBCompany.MailingCity', None), ('DandBCompany.MailingCountry', None), ('DandBCompany.MailingGeocodeAccuracy', None), ('DandBCompany.MailingPostalCode', None), ('DandBCompany.MailingState', None), ('DandBCompany.MailingStreet', None), ('DandBCompany.MarketingPreScreen', None), ('DandBCompany.MarketingSegmentationCluster', None), ('DandBCompany.MinorityOwned', None), ('DandBCompany.Name', None), ('DandBCompany.NationalId', None), ('DandBCompany.NationalIdType', None), ('DandBCompany.OutOfBusiness', None), ('DandBCompany.OwnOrRent', None), ('DandBCompany.ParentOrHqBusinessName', None), ('DandBCompany.ParentOrHqDunsNumber', None), ('DandBCompany.Phone', None), ('DandBCompany.PostalCode', None), ('DandBCompany.PremisesMeasure', None), ('DandBCompany.PremisesMeasureReliability', None), ('DandBCompany.PremisesMeasureUnit', None), ('DandBCompany.PrimaryNaics', None), ('DandBCompany.PrimaryNaicsDesc', None), ('DandBCompany.PrimarySic', None), ('DandBCompany.PrimarySic8', None), ('DandBCompany.PrimarySic8Desc', None), ('DandBCompany.PrimarySicDesc', None), ('DandBCompany.PriorYearEmployees', None), ('DandBCompany.PriorYearRevenue', None), ('DandBCompany.PublicIndicator', None), ('DandBCompany.SalesTurnoverGrowthRate', None), ('DandBCompany.SalesVolume', None), ('DandBCompany.SalesVolumeReliability', None), ('DandBCompany.SecondNaics', None), ('DandBCompany.SecondNaicsDesc', None), ('DandBCompany.SecondSic', None), ('DandBCompany.SecondSic8', None), ('DandBCompany.SecondSic8Desc', None), ('DandBCompany.SecondSicDesc', None), ('DandBCompany.SixthNaics', None), ('DandBCompany.SixthNaicsDesc', None), ('DandBCompany.SixthSic', None), ('DandBCompany.SixthSic8', None), ('DandBCompany.SixthSic8Desc', None), ('DandBCompany.SixthSicDesc', None), ('DandBCompany.SmallBusiness', None), ('DandBCompany.State', None), ('DandBCompany.StockExchange', None), ('DandBCompany.StockSymbol', None), ('DandBCompany.Street', None), ('DandBCompany.Subsidiary', None), ('DandBCompany.SystemModstamp', None), ('DandBCompany.ThirdNaics', None), ('DandBCompany.ThirdNaicsDesc', None), ('DandBCompany.ThirdSic', None), ('DandBCompany.ThirdSic8', None), ('DandBCompany.ThirdSic8Desc', None), ('DandBCompany.ThirdSicDesc', None), ('DandBCompany.TradeStyle1', None), ('DandBCompany.TradeStyle2', None), ('DandBCompany.TradeStyle3', None), ('DandBCompany.TradeStyle4', None), ('DandBCompany.TradeStyle5', None), ('DandBCompany.URL', None), ('DandBCompany.UsTaxId', None), ('DandBCompany.WomenOwned', None), ('DandBCompany.YearStarted', None), ('DuplicateRecordItem.CreatedById', None), ('DuplicateRecordItem.CreatedDate', None), ('DuplicateRecordItem.DuplicateRecordSetId', None), ('DuplicateRecordItem.Id', None), ('DuplicateRecordItem.IsDeleted', None), ('DuplicateRecordItem.LastModifiedById', None), ('DuplicateRecordItem.LastModifiedDate', None), ('DuplicateRecordItem.Name', None), ('DuplicateRecordItem.RecordId', None), ('DuplicateRecordItem.SystemModstamp', None), ('DuplicateRecordSet.CreatedById', None), ('DuplicateRecordSet.CreatedDate', None), ('DuplicateRecordSet.DuplicateRuleId', None), ('DuplicateRecordSet.Id', None), ('DuplicateRecordSet.IsDeleted', None), ('DuplicateRecordSet.LastModifiedById', None), ('DuplicateRecordSet.LastModifiedDate', None), ('DuplicateRecordSet.LastReferencedDate', None), ('DuplicateRecordSet.LastViewedDate', None), ('DuplicateRecordSet.Name', None), ('DuplicateRecordSet.RecordCount', None), ('DuplicateRecordSet.SystemModstamp', None), ('EmailMessage.ActivityId', None), ('EmailMessage.BccAddress', None), ('EmailMessage.CcAddress', None), ('EmailMessage.CreatedById', None), ('EmailMessage.CreatedDate', None), ('EmailMessage.FromAddress', None), ('EmailMessage.FromName', None), ('EmailMessage.HasAttachment', None), ('EmailMessage.Headers', None), ('EmailMessage.HtmlBody', None), ('EmailMessage.Id', None), ('EmailMessage.Incoming', None), ('EmailMessage.IsDeleted', None), ('EmailMessage.IsExternallyVisible', None), ('EmailMessage.LastModifiedById', None), ('EmailMessage.LastModifiedDate', None), ('EmailMessage.MessageDate', None), ('EmailMessage.MessageIdentifier', None), ('EmailMessage.ParentId', None), ('EmailMessage.RelatedToId', None), ('EmailMessage.ReplyToEmailMessageId', None), ('EmailMessage.Status', None), ('EmailMessage.Subject', None), ('EmailMessage.SystemModstamp', None), ('EmailMessage.TextBody', None), ('EmailMessage.ThreadIdentifier', None), ('EmailMessage.ToAddress', None), ('EmailMessage.ValidatedFromAddress', None), ('FlowInterview.CreatedById', None), ('FlowInterview.CreatedDate', None), ('FlowInterview.CurrentElement', None), ('FlowInterview.Guid', None), ('FlowInterview.Id', None), ('FlowInterview.InterviewLabel', None), ('FlowInterview.IsDeleted', None), ('FlowInterview.LastModifiedById', None), ('FlowInterview.LastModifiedDate', None), ('FlowInterview.Name', None), ('FlowInterview.OwnerId', None), ('FlowInterview.PauseLabel', None), ('FlowInterview.SystemModstamp', None), ('Idea.Body', None), ('Idea.Categories', None), ('Idea.CommunityId', None), ('Idea.CreatedById', None), ('Idea.CreatedDate', None), ('Idea.CreatorFullPhotoUrl', None), ('Idea.CreatorName', None), ('Idea.CreatorSmallPhotoUrl', None), ('Idea.Id', None), ('Idea.IsDeleted', None), ('Idea.IsHtml', None), ('Idea.IsMerged', None), ('Idea.LastCommentDate', None), ('Idea.LastCommentId', None), ('Idea.LastModifiedById', None), ('Idea.LastModifiedDate', None), ('Idea.LastReferencedDate', None), ('Idea.LastViewedDate', None), ('Idea.NumComments', None), ('Idea.ParentIdeaId', None), ('Idea.RecordTypeId', None), ('Idea.Status', None), ('Idea.SystemModstamp', None), ('Idea.Title', None), ('Idea.VoteScore', None), ('Idea.VoteTotal', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.City', None), ('Lead.CleanStatus', None), ('Lead.Company', None), ('Lead.CompanyDunsNumber', None), ('Lead.ConvertedAccountId', None), ('Lead.ConvertedContactId', None), ('Lead.ConvertedDate', None), ('Lead.ConvertedOpportunityId', None), ('Lead.Country', None), ('Lead.CreatedById', None), ('Lead.CreatedDate', None), ('Lead.DandbCompanyId', None), ('Lead.Description', None), ('Lead.Email', None), ('Lead.EmailBouncedDate', None), ('Lead.EmailBouncedReason', None), ('Lead.Fax', None), ('Lead.FirstName', None), ('Lead.GeocodeAccuracy', None), ('Lead.Id', None), ('Lead.Industry', None), ('Lead.IsConverted', None), ('Lead.IsDeleted', None), ('Lead.IsUnreadByOwner', None), ('Lead.Jigsaw', None), ('Lead.JigsawContactId', None), ('Lead.LastActivityDate', None), ('Lead.LastModifiedById', None), ('Lead.LastModifiedDate', None), ('Lead.LastName', None), ('Lead.LastReferencedDate', None), ('Lead.LastViewedDate', None), ('Lead.Latitude', None), ('Lead.LeadSource', None), ('Lead.Longitude', None), ('Lead.MasterRecordId', None), ('Lead.MobilePhone', None), ('Lead.Name', None), ('Lead.NumberOfEmployees', None), ('Lead.OwnerId', None), ('Lead.Phone', None), ('Lead.PhotoUrl', None), ('Lead.PostalCode', None), ('Lead.Rating', None), ('Lead.Salutation', None), ('Lead.State', None), ('Lead.Status', None), ('Lead.Street', None), ('Lead.SystemModstamp', None), ('Lead.Title', None), ('Lead.Website', None), ('Macro.CreatedById', None), ('Macro.CreatedDate', None), ('Macro.Description', None), ('Macro.Id', None), ('Macro.IsDeleted', None), ('Macro.LastModifiedById', None), ('Macro.LastModifiedDate', None), ('Macro.LastReferencedDate', None), ('Macro.LastViewedDate', None), ('Macro.Name', None), ('Macro.OwnerId', None), ('Macro.SystemModstamp', None), ('Opportunity.AccountId', None), ('Opportunity.Amount', None), ('Opportunity.CampaignId', None), ('Opportunity.CloseDate', None), ('Opportunity.CreatedById', None), ('Opportunity.CreatedDate', None), ('Opportunity.Description', None), ('Opportunity.ExpectedRevenue', None), ('Opportunity.Fiscal', None), ('Opportunity.FiscalQuarter', None), ('Opportunity.FiscalYear', None), ('Opportunity.ForecastCategory', None), ('Opportunity.ForecastCategoryName', None), ('Opportunity.HasOpenActivity', None), ('Opportunity.HasOpportunityLineItem', None), ('Opportunity.HasOverdueTask', None), ('Opportunity.Id', None), ('Opportunity.IsClosed', None), ('Opportunity.IsDeleted', None), ('Opportunity.IsPrivate', None), ('Opportunity.IsWon', None), ('Opportunity.LastActivityDate', None), ('Opportunity.LastModifiedById', None), ('Opportunity.LastModifiedDate', None), ('Opportunity.LastReferencedDate', None), ('Opportunity.LastViewedDate', None), ('Opportunity.LeadSource', None), ('Opportunity.Name', None), ('Opportunity.NextStep', None), ('Opportunity.OwnerId', None), ('Opportunity.Pricebook2Id', None), ('Opportunity.Probability', None), ('Opportunity.StageName', None), ('Opportunity.SystemModstamp', None), ('Opportunity.TotalOpportunityQuantity', None), ('Opportunity.Type', None), ('Order.AccountId', None), ('Order.ActivatedById', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillingCity', None), ('Order.BillingCountry', None), ('Order.BillingGeocodeAccuracy', None), ('Order.BillingLatitude', None), ('Order.BillingLongitude', None), ('Order.BillingPostalCode', None), ('Order.BillingState', None), ('Order.BillingStreet', None), ('Order.BillToContactId', None), ('Order.CompanyAuthorizedById', None), ('Order.CompanyAuthorizedDate', None), ('Order.ContractId', None), ('Order.CreatedById', None), ('Order.CreatedDate', None), ('Order.CustomerAuthorizedById', None), ('Order.CustomerAuthorizedDate', None), ('Order.Description', None), ('Order.EffectiveDate', None), ('Order.EndDate', None), ('Order.Id', None), ('Order.IsDeleted', None), ('Order.IsReductionOrder', None), ('Order.LastModifiedById', None), ('Order.LastModifiedDate', None), ('Order.LastReferencedDate', None), ('Order.LastViewedDate', None), ('Order.Name', None), ('Order.OrderNumber', None), ('Order.OrderReferenceNumber', None), ('Order.OriginalOrderId', None), ('Order.OwnerId', None), ('Order.PoDate', None), ('Order.PoNumber', None), ('Order.Pricebook2Id', None), ('Order.ShippingAddress', None), ('Order.ShippingCity', None), ('Order.ShippingCountry', None), ('Order.ShippingGeocodeAccuracy', None), ('Order.ShippingLatitude', None), ('Order.ShippingLongitude', None), ('Order.ShippingPostalCode', None), ('Order.ShippingState', None), ('Order.ShippingStreet', None), ('Order.ShipToContactId', None), ('Order.Status', None), ('Order.StatusCode', None), ('Order.SystemModstamp', None), ('Order.TotalAmount', None), ('Order.Type', None), ('Pricebook2.CreatedById', None), ('Pricebook2.CreatedDate', None), ('Pricebook2.Description', None), ('Pricebook2.Id', None), ('Pricebook2.IsActive', None), ('Pricebook2.IsArchived', None), ('Pricebook2.IsDeleted', None), ('Pricebook2.IsStandard', None), ('Pricebook2.LastModifiedById', None), ('Pricebook2.LastModifiedDate', None), ('Pricebook2.LastReferencedDate', None), ('Pricebook2.LastViewedDate', None), ('Pricebook2.Name', None), ('Pricebook2.SystemModstamp', None), ('PricebookEntry.CreatedById', None), ('PricebookEntry.CreatedDate', None), ('PricebookEntry.Id', None), ('PricebookEntry.IsActive', None), ('PricebookEntry.IsDeleted', None), ('PricebookEntry.LastModifiedById', None), ('PricebookEntry.LastModifiedDate', None), ('PricebookEntry.Name', None), ('PricebookEntry.Pricebook2Id', None), ('PricebookEntry.Product2Id', None), ('PricebookEntry.ProductCode', None), ('PricebookEntry.SystemModstamp', None), ('PricebookEntry.UnitPrice', None), ('PricebookEntry.UseStandardPrice', None), ('Product2.CreatedById', None), ('Product2.CreatedDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSourceId', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.Id', None), ('Product2.IsActive', None), ('Product2.IsDeleted', None), ('Product2.LastModifiedById', None), ('Product2.LastModifiedDate', None), ('Product2.LastReferencedDate', None), ('Product2.LastViewedDate', None), ('Product2.Name', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.SystemModstamp', None), ('QuickText.Category', None), ('QuickText.Channel', None), ('QuickText.CreatedById', None), ('QuickText.CreatedDate', None), ('QuickText.Id', None), ('QuickText.IsDeleted', None), ('QuickText.LastModifiedById', None), ('QuickText.LastModifiedDate', None), ('QuickText.LastReferencedDate', None), ('QuickText.LastViewedDate', None), ('QuickText.Message', None), ('QuickText.Name', None), ('QuickText.OwnerId', None), ('QuickText.SystemModstamp', None), ('Solution.CreatedById', None), ('Solution.CreatedDate', None), ('Solution.Id', None), ('Solution.IsDeleted', None), ('Solution.IsHtml', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.IsReviewed', None), ('Solution.LastModifiedById', None), ('Solution.LastModifiedDate', None), ('Solution.LastReferencedDate', None), ('Solution.LastViewedDate', None), ('Solution.OwnerId', None), ('Solution.SolutionName', None), ('Solution.SolutionNote', None), ('Solution.SolutionNumber', None), ('Solution.Status', None), ('Solution.SystemModstamp', None), ('Solution.TimesUsed', None), ('Topic.CreatedById', None), ('Topic.CreatedDate', None), ('Topic.Description', None), ('Topic.Id', None), ('Topic.Name', None), ('Topic.SystemModstamp', None), ('Topic.TalkingAbout', None), ('User.AboutMe', None), ('User.AccountId', None), ('User.Address', None), ('User.Alias', None), ('User.BadgeText', None), ('User.BannerPhotoUrl', None), ('User.CallCenterId', None), ('User.City', None), ('User.CommunityNickname', None), ('User.CompanyName', None), ('User.ContactId', None), ('User.Country', None), ('User.CreatedById', None), ('User.CreatedDate', None), ('User.DefaultGroupNotificationFrequency', None), ('User.DelegatedApproverId', None), ('User.Department', None), ('User.DigestFrequency', None), ('User.Division', None), ('User.Email', None), ('User.EmailEncodingKey', None), ('User.EmailPreferencesAutoBcc', None), ('User.EmailPreferencesAutoBccStayInTouch', None), ('User.EmailPreferencesStayInTouchReminder', None), ('User.EmployeeNumber', None), ('User.Extension', None), ('User.Fax', None), ('User.FederationIdentifier', None), ('User.FirstName', None), ('User.ForecastEnabled', None), ('User.FullPhotoUrl', None), ('User.GeocodeAccuracy', None), ('User.Id', None), ('User.IsActive', None), ('User.IsProfilePhotoActive', None), ('User.JigsawImportLimitOverride', None), ('User.LanguageLocaleKey', None), ('User.LastLoginDate', None), ('User.LastModifiedById', None), ('User.LastModifiedDate', None), ('User.LastName', None), ('User.LastPasswordChangeDate', None), ('User.LastReferencedDate', None), ('User.LastViewedDate', None), ('User.Latitude', None), ('User.LocaleSidKey', None), ('User.Longitude', None), ('User.ManagerId', None), ('User.MediumBannerPhotoUrl', None), ('User.MediumPhotoUrl', None), ('User.MobilePhone', None), ('User.Name', None), ('User.OfflinePdaTrialExpirationDate', None), ('User.OfflineTrialExpirationDate', None), ('User.Phone', None), ('User.PostalCode', None), ('User.ProfileId', None), ('User.ReceivesAdminInfoEmails', None), ('User.ReceivesInfoEmails', None), ('User.SenderEmail', None), ('User.SenderName', None), ('User.Signature', None), ('User.SmallBannerPhotoUrl', None), ('User.SmallPhotoUrl', None), ('User.State', None), ('User.StayInTouchNote', None), ('User.StayInTouchSignature', None), ('User.StayInTouchSubject', None), ('User.Street', None), ('User.SystemModstamp', None), ('User.TimeZoneSidKey', None), ('User.Title', None), ('User.Username', None), ('User.UserPermissionsCallCenterAutoLogin', None), ('User.UserPermissionsChatterAnswersUser', None), ('User.UserPermissionsInteractionUser', None), ('User.UserPermissionsJigsawProspectingUser', None), ('User.UserPermissionsKnowledgeUser', None), ('User.UserPermissionsMarketingUser', None), ('User.UserPermissionsMobileUser', None), ('User.UserPermissionsOfflineUser', None), ('User.UserPermissionsSFContentUser', None), ('User.UserPermissionsSiteforceContributorUser', None), ('User.UserPermissionsSiteforcePublisherUser', None), ('User.UserPermissionsSupportUser', None), ('User.UserPermissionsWorkDotComUserFeature', None), ('User.UserPreferencesActivityRemindersPopup', None), ('User.UserPreferencesApexPagesDeveloperMode', None), ('User.UserPreferencesCacheDiagnostics', None), ('User.UserPreferencesContentEmailAsAndWhen', None), ('User.UserPreferencesContentNoEmail', None), ('User.UserPreferencesCreateLEXAppsWTShown', None), ('User.UserPreferencesDisableAllFeedsEmail', None), ('User.UserPreferencesDisableBookmarkEmail', None), ('User.UserPreferencesDisableChangeCommentEmail', None), ('User.UserPreferencesDisableEndorsementEmail', None), ('User.UserPreferencesDisableFeedbackEmail', None), ('User.UserPreferencesDisableFileShareNotificationsForApi', None), ('User.UserPreferencesDisableFollowersEmail', None), ('User.UserPreferencesDisableLaterCommentEmail', None), ('User.UserPreferencesDisableLikeEmail', None), ('User.UserPreferencesDisableMentionsPostEmail', None), ('User.UserPreferencesDisableMessageEmail', None), ('User.UserPreferencesDisableProfilePostEmail', None), ('User.UserPreferencesDisableSharePostEmail', None), ('User.UserPreferencesDisableWorkEmail', None), ('User.UserPreferencesDisCommentAfterLikeEmail', None), ('User.UserPreferencesDisMentionsCommentEmail', None), ('User.UserPreferencesDisProfPostCommentEmail', None), ('User.UserPreferencesEnableAutoSubForFeeds', None), ('User.UserPreferencesEventRemindersCheckboxDefault', None), ('User.UserPreferencesFavoritesWTShown', None), ('User.UserPreferencesGlobalNavBarWTShown', None), ('User.UserPreferencesGlobalNavGridMenuWTShown', None), ('User.UserPreferencesHideBiggerPhotoCallout', None), ('User.UserPreferencesHideChatterOnboardingSplash', None), ('User.UserPreferencesHideCSNDesktopTask', None), ('User.UserPreferencesHideCSNGetChatterMobileTask', None), ('User.UserPreferencesHideEndUserOnboardingAssistantModal', None), ('User.UserPreferencesHideLightningMigrationModal', None), ('User.UserPreferencesHideS1BrowserUI', None), ('User.UserPreferencesHideSecondChatterOnboardingSplash', None), ('User.UserPreferencesHideSfxWelcomeMat', None), ('User.UserPreferencesJigsawListUser', None), ('User.UserPreferencesLightningExperiencePreferred', None), ('User.UserPreferencesPathAssistantCollapsed', None), ('User.UserPreferencesPreviewLightning', None), ('User.UserPreferencesReminderSoundOff', None), ('User.UserPreferencesShowCityToExternalUsers', None), ('User.UserPreferencesShowCityToGuestUsers', None), ('User.UserPreferencesShowCountryToExternalUsers', None), ('User.UserPreferencesShowCountryToGuestUsers', None), ('User.UserPreferencesShowEmailToExternalUsers', None), ('User.UserPreferencesShowEmailToGuestUsers', None), ('User.UserPreferencesShowFaxToExternalUsers', None), ('User.UserPreferencesShowFaxToGuestUsers', None), ('User.UserPreferencesShowManagerToExternalUsers', None), ('User.UserPreferencesShowManagerToGuestUsers', None), ('User.UserPreferencesShowMobilePhoneToExternalUsers', None), ('User.UserPreferencesShowMobilePhoneToGuestUsers', None), ('User.UserPreferencesShowPostalCodeToExternalUsers', None), ('User.UserPreferencesShowPostalCodeToGuestUsers', None), ('User.UserPreferencesShowProfilePicToGuestUsers', None), ('User.UserPreferencesShowStateToExternalUsers', None), ('User.UserPreferencesShowStateToGuestUsers', None), ('User.UserPreferencesShowStreetAddressToExternalUsers', None), ('User.UserPreferencesShowStreetAddressToGuestUsers', None), ('User.UserPreferencesShowTitleToExternalUsers', None), ('User.UserPreferencesShowTitleToGuestUsers', None), ('User.UserPreferencesShowWorkPhoneToExternalUsers', None), ('User.UserPreferencesShowWorkPhoneToGuestUsers', None), ('User.UserPreferencesSortFeedByComment', None), ('User.UserPreferencesTaskRemindersCheckboxDefault', None), ('User.UserRoleId', None), ('User.UserType', None), ('UserAppMenuItem.ApplicationId', None), ('UserAppMenuItem.AppMenuItemId', None), ('UserAppMenuItem.Description', None), ('UserAppMenuItem.IconUrl', None), ('UserAppMenuItem.Id', None), ('UserAppMenuItem.InfoUrl', None), ('UserAppMenuItem.IsUsingAdminAuthorization', None), ('UserAppMenuItem.IsVisible', None), ('UserAppMenuItem.Label', None), ('UserAppMenuItem.LogoUrl', None), ('UserAppMenuItem.MobileStartUrl', None), ('UserAppMenuItem.Name', None), ('UserAppMenuItem.SortOrder', None), ('UserAppMenuItem.StartUrl', None), ('UserAppMenuItem.Type', None), ('UserAppMenuItem.UserSortOrder', None), ('UserProvisioningRequest.AppName', None), ('UserProvisioningRequest.ApprovalStatus', None), ('UserProvisioningRequest.ConnectedAppId', None), ('UserProvisioningRequest.CreatedById', None), ('UserProvisioningRequest.CreatedDate', None), ('UserProvisioningRequest.ExternalUserId', None), ('UserProvisioningRequest.Id', None), ('UserProvisioningRequest.IsDeleted', None), ('UserProvisioningRequest.LastModifiedById', None), ('UserProvisioningRequest.LastModifiedDate', None), ('UserProvisioningRequest.ManagerId', None), ('UserProvisioningRequest.Name', None), ('UserProvisioningRequest.Operation', None), ('UserProvisioningRequest.OwnerId', None), ('UserProvisioningRequest.ParentId', None), ('UserProvisioningRequest.RetryCount', None), ('UserProvisioningRequest.SalesforceUserId', None), ('UserProvisioningRequest.ScheduleDate', None), ('UserProvisioningRequest.State', None), ('UserProvisioningRequest.SystemModstamp', None), ('UserProvisioningRequest.UserProvAccountId', None), ('UserProvisioningRequest.UserProvConfigId', None), ('WorkOrder.AccountId', None), ('WorkOrder.Address', None), ('WorkOrder.AssetId', None), ('WorkOrder.BusinessHoursId', None), ('WorkOrder.CaseId', None), ('WorkOrder.City', None), ('WorkOrder.ContactId', None), ('WorkOrder.Country', None), ('WorkOrder.CreatedById', None), ('WorkOrder.CreatedDate', None), ('WorkOrder.Description', None), ('WorkOrder.Discount', None), ('WorkOrder.Duration', None), ('WorkOrder.DurationInMinutes', None), ('WorkOrder.DurationType', None), ('WorkOrder.EndDate', None), ('WorkOrder.GeocodeAccuracy', None), ('WorkOrder.GrandTotal', None), ('WorkOrder.Id', None), ('WorkOrder.IsClosed', None), ('WorkOrder.IsDeleted', None), ('WorkOrder.LastModifiedById', None), ('WorkOrder.LastModifiedDate', None), ('WorkOrder.LastReferencedDate', None), ('WorkOrder.LastViewedDate', None), ('WorkOrder.Latitude', None), ('WorkOrder.LineItemCount', None), ('WorkOrder.Longitude', None), ('WorkOrder.OwnerId', None), ('WorkOrder.ParentWorkOrderId', None), ('WorkOrder.PostalCode', None), ('WorkOrder.Pricebook2Id', None), ('WorkOrder.Priority', None), ('WorkOrder.RootWorkOrderId', None), ('WorkOrder.ServiceAppointmentCount', None), ('WorkOrder.StartDate', None), ('WorkOrder.State', None), ('WorkOrder.Status', None), ('WorkOrder.StatusCategory', None), ('WorkOrder.Street', None), ('WorkOrder.Subject', None), ('WorkOrder.Subtotal', None), ('WorkOrder.SystemModstamp', None), ('WorkOrder.Tax', None), ('WorkOrder.TotalPrice', None), ('WorkOrder.WorkOrderNumber', None), ('WorkOrderLineItem.Address', None), ('WorkOrderLineItem.AssetId', None), ('WorkOrderLineItem.City', None), ('WorkOrderLineItem.Country', None), ('WorkOrderLineItem.CreatedById', None), ('WorkOrderLineItem.CreatedDate', None), ('WorkOrderLineItem.Description', None), ('WorkOrderLineItem.Discount', None), ('WorkOrderLineItem.Duration', None), ('WorkOrderLineItem.DurationInMinutes', None), ('WorkOrderLineItem.DurationType', None), ('WorkOrderLineItem.EndDate', None), ('WorkOrderLineItem.GeocodeAccuracy', None), ('WorkOrderLineItem.Id', None), ('WorkOrderLineItem.IsClosed', None), ('WorkOrderLineItem.IsDeleted', None), ('WorkOrderLineItem.LastModifiedById', None), ('WorkOrderLineItem.LastModifiedDate', None), ('WorkOrderLineItem.LastReferencedDate', None), ('WorkOrderLineItem.LastViewedDate', None), ('WorkOrderLineItem.Latitude', None), ('WorkOrderLineItem.LineItemNumber', None), ('WorkOrderLineItem.ListPrice', None), ('WorkOrderLineItem.Longitude', None), ('WorkOrderLineItem.OrderId', None), ('WorkOrderLineItem.ParentWorkOrderLineItemId', None), ('WorkOrderLineItem.PostalCode', None), ('WorkOrderLineItem.PricebookEntryId', None), ('WorkOrderLineItem.Priority', None), ('WorkOrderLineItem.Product2Id', None), ('WorkOrderLineItem.Quantity', None), ('WorkOrderLineItem.RootWorkOrderLineItemId', None), ('WorkOrderLineItem.ServiceAppointmentCount', None), ('WorkOrderLineItem.StartDate', None), ('WorkOrderLineItem.State', None), ('WorkOrderLineItem.Status', None), ('WorkOrderLineItem.StatusCategory', None), ('WorkOrderLineItem.Street', None), ('WorkOrderLineItem.Subject', None), ('WorkOrderLineItem.Subtotal', None), ('WorkOrderLineItem.SystemModstamp', None), ('WorkOrderLineItem.TotalPrice', None), ('WorkOrderLineItem.UnitPrice', None), ('WorkOrderLineItem.WorkOrderId', None)], blank=True, null=True)
    aggregate_field = models.CharField(max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.AccountNumber', None), ('Account.AccountSource', None), ('Account.AnnualRevenue', None), ('Account.BillingAddress', None), ('Account.BillingCity', None), ('Account.BillingCountry', None), ('Account.BillingGeocodeAccuracy', None), ('Account.BillingLatitude', None), ('Account.BillingLongitude', None), ('Account.BillingPostalCode', None), ('Account.BillingState', None), ('Account.BillingStreet', None), ('Account.CleanStatus', None), ('Account.CreatedById', None), ('Account.CreatedDate', None), ('Account.DandbCompanyId', None), ('Account.Description', None), ('Account.DunsNumber', None), ('Account.Fax', None), ('Account.Id', None), ('Account.Industry', None), ('Account.IsDeleted', None), ('Account.Jigsaw', None), ('Account.JigsawCompanyId', None), ('Account.LastActivityDate', None), ('Account.LastModifiedById', None), ('Account.LastModifiedDate', None), ('Account.LastReferencedDate', None), ('Account.LastViewedDate', None), ('Account.MasterRecordId', None), ('Account.NaicsCode', None), ('Account.NaicsDesc', None), ('Account.Name', None), ('Account.NumberOfEmployees', None), ('Account.OwnerId', None), ('Account.Ownership', None), ('Account.ParentId', None), ('Account.Phone', None), ('Account.PhotoUrl', None), ('Account.Rating', None), ('Account.ShippingAddress', None), ('Account.ShippingCity', None), ('Account.ShippingCountry', None), ('Account.ShippingGeocodeAccuracy', None), ('Account.ShippingLatitude', None), ('Account.ShippingLongitude', None), ('Account.ShippingPostalCode', None), ('Account.ShippingState', None), ('Account.ShippingStreet', None), ('Account.Sic', None), ('Account.SicDesc', None), ('Account.Site', None), ('Account.SystemModstamp', None), ('Account.TickerSymbol', None), ('Account.Tradestyle', None), ('Account.Type', None), ('Account.Website', None), ('Account.YearStarted', None), ('Asset.AccountId', None), ('Asset.ContactId', None), ('Asset.CreatedById', None), ('Asset.CreatedDate', None), ('Asset.Description', None), ('Asset.Id', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsDeleted', None), ('Asset.LastModifiedById', None), ('Asset.LastModifiedDate', None), ('Asset.LastReferencedDate', None), ('Asset.LastViewedDate', None), ('Asset.Name', None), ('Asset.OwnerId', None), ('Asset.ParentId', None), ('Asset.Price', None), ('Asset.Product2Id', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.RootAssetId', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.SystemModstamp', None), ('Asset.UsageEndDate', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.CampaignMemberRecordTypeId', None), ('Campaign.CreatedById', None), ('Campaign.CreatedDate', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.Id', None), ('Campaign.IsActive', None), ('Campaign.IsDeleted', None), ('Campaign.LastActivityDate', None), ('Campaign.LastModifiedById', None), ('Campaign.LastModifiedDate', None), ('Campaign.LastReferencedDate', None), ('Campaign.LastViewedDate', None), ('Campaign.Name', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.OwnerId', None), ('Campaign.ParentId', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.SystemModstamp', None), ('Campaign.Type', None), ('Case.AccountId', None), ('Case.AssetId', None), ('Case.CaseNumber', None), ('Case.ClosedDate', None), ('Case.ContactEmail', None), ('Case.ContactFax', None), ('Case.ContactId', None), ('Case.ContactMobile', None), ('Case.ContactPhone', None), ('Case.CreatedById', None), ('Case.CreatedDate', None), ('Case.Description', None), ('Case.Id', None), ('Case.IsClosed', None), ('Case.IsDeleted', None), ('Case.IsEscalated', None), ('Case.LastModifiedById', None), ('Case.LastModifiedDate', None), ('Case.LastReferencedDate', None), ('Case.LastViewedDate', None), ('Case.Origin', None), ('Case.OwnerId', None), ('Case.ParentId', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Status', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.SystemModstamp', None), ('Case.Type', None), ('CollaborationGroup.AnnouncementId', None), ('CollaborationGroup.BannerPhotoUrl', None), ('CollaborationGroup.CanHaveGuests', None), ('CollaborationGroup.CollaborationType', None), ('CollaborationGroup.CreatedById', None), ('CollaborationGroup.CreatedDate', None), ('CollaborationGroup.Description', None), ('CollaborationGroup.FullPhotoUrl', None), ('CollaborationGroup.GroupEmail', None), ('CollaborationGroup.HasPrivateFieldsAccess', None), ('CollaborationGroup.Id', None), ('CollaborationGroup.InformationBody', None), ('CollaborationGroup.InformationTitle', None), ('CollaborationGroup.IsArchived', None), ('CollaborationGroup.IsAutoArchiveDisabled', None), ('CollaborationGroup.IsBroadcast', None), ('CollaborationGroup.LastFeedModifiedDate', None), ('CollaborationGroup.LastModifiedById', None), ('CollaborationGroup.LastModifiedDate', None), ('CollaborationGroup.LastReferencedDate', None), ('CollaborationGroup.LastViewedDate', None), ('CollaborationGroup.MediumPhotoUrl', None), ('CollaborationGroup.MemberCount', None), ('CollaborationGroup.Name', None), ('CollaborationGroup.OwnerId', None), ('CollaborationGroup.SmallPhotoUrl', None), ('CollaborationGroup.SystemModstamp', None), ('Contact.AccountId', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.Birthdate', None), ('Contact.CleanStatus', None), ('Contact.CreatedById', None), ('Contact.CreatedDate', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.Email', None), ('Contact.EmailBouncedDate', None), ('Contact.EmailBouncedReason', None), ('Contact.Fax', None), ('Contact.FirstName', None), ('Contact.HomePhone', None), ('Contact.Id', None), ('Contact.IsDeleted', None), ('Contact.IsEmailBounced', None), ('Contact.Jigsaw', None), ('Contact.JigsawContactId', None), ('Contact.LastActivityDate', None), ('Contact.LastCURequestDate', None), ('Contact.LastCUUpdateDate', None), ('Contact.LastModifiedById', None), ('Contact.LastModifiedDate', None), ('Contact.LastName', None), ('Contact.LastReferencedDate', None), ('Contact.LastViewedDate', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MailingCity', None), ('Contact.MailingCountry', None), ('Contact.MailingGeocodeAccuracy', None), ('Contact.MailingLatitude', None), ('Contact.MailingLongitude', None), ('Contact.MailingPostalCode', None), ('Contact.MailingState', None), ('Contact.MailingStreet', None), ('Contact.MasterRecordId', None), ('Contact.MobilePhone', None), ('Contact.Name', None), ('Contact.OtherAddress', None), ('Contact.OtherCity', None), ('Contact.OtherCountry', None), ('Contact.OtherGeocodeAccuracy', None), ('Contact.OtherLatitude', None), ('Contact.OtherLongitude', None), ('Contact.OtherPhone', None), ('Contact.OtherPostalCode', None), ('Contact.OtherState', None), ('Contact.OtherStreet', None), ('Contact.OwnerId', None), ('Contact.Phone', None), ('Contact.PhotoUrl', None), ('Contact.RecordTypeId', None), ('Contact.ReportsToId', None), ('Contact.Salutation', None), ('Contact.SystemModstamp', None), ('Contact.Title', None), ('ContentVersion.Checksum', None), ('ContentVersion.ContentDocumentId', None), ('ContentVersion.ContentLocation', None), ('ContentVersion.ContentModifiedById', None), ('ContentVersion.ContentModifiedDate', None), ('ContentVersion.ContentSize', None), ('ContentVersion.ContentUrl', None), ('ContentVersion.CreatedById', None), ('ContentVersion.CreatedDate', None), ('ContentVersion.Description', None), ('ContentVersion.ExternalDataSourceId', None), ('ContentVersion.ExternalDocumentInfo1', None), ('ContentVersion.ExternalDocumentInfo2', None), ('ContentVersion.FeaturedContentBoost', None), ('ContentVersion.FeaturedContentDate', None), ('ContentVersion.FileExtension', None), ('ContentVersion.FileType', None), ('ContentVersion.FirstPublishLocationId', None), ('ContentVersion.Id', None), ('ContentVersion.IsAssetEnabled', None), ('ContentVersion.IsDeleted', None), ('ContentVersion.IsLatest', None), ('ContentVersion.IsMajorVersion', None), ('ContentVersion.LastModifiedById', None), ('ContentVersion.LastModifiedDate', None), ('ContentVersion.NegativeRatingCount', None), ('ContentVersion.Origin', None), ('ContentVersion.OwnerId', None), ('ContentVersion.PathOnClient', None), ('ContentVersion.PositiveRatingCount', None), ('ContentVersion.PublishStatus', None), ('ContentVersion.RatingCount', None), ('ContentVersion.ReasonForChange', None), ('ContentVersion.SharingOption', None), ('ContentVersion.SystemModstamp', None), ('ContentVersion.TagCsv', None), ('ContentVersion.TextPreview', None), ('ContentVersion.Title', None), ('ContentVersion.VersionData', None), ('ContentVersion.VersionNumber', None), ('Contract.AccountId', None), ('Contract.ActivatedById', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.BillingCity', None), ('Contract.BillingCountry', None), ('Contract.BillingGeocodeAccuracy', None), ('Contract.BillingLatitude', None), ('Contract.BillingLongitude', None), ('Contract.BillingPostalCode', None), ('Contract.BillingState', None), ('Contract.BillingStreet', None), ('Contract.CompanySignedDate', None), ('Contract.CompanySignedId', None), ('Contract.ContractNumber', None), ('Contract.ContractTerm', None), ('Contract.CreatedById', None), ('Contract.CreatedDate', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedId', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Id', None), ('Contract.IsDeleted', None), ('Contract.LastActivityDate', None), ('Contract.LastApprovedDate', None), ('Contract.LastModifiedById', None), ('Contract.LastModifiedDate', None), ('Contract.LastReferencedDate', None), ('Contract.LastViewedDate', None), ('Contract.OwnerExpirationNotice', None), ('Contract.OwnerId', None), ('Contract.Pricebook2Id', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Contract.Status', None), ('Contract.StatusCode', None), ('Contract.SystemModstamp', None), ('DandBCompany.Address', None), ('DandBCompany.City', None), ('DandBCompany.CompanyCurrencyIsoCode', None), ('DandBCompany.Country', None), ('DandBCompany.CountryAccessCode', None), ('DandBCompany.CreatedById', None), ('DandBCompany.CreatedDate', None), ('DandBCompany.CurrencyCode', None), ('DandBCompany.Description', None), ('DandBCompany.DomesticUltimateBusinessName', None), ('DandBCompany.DomesticUltimateDunsNumber', None), ('DandBCompany.DunsNumber', None), ('DandBCompany.EmployeeQuantityGrowthRate', None), ('DandBCompany.EmployeesHere', None), ('DandBCompany.EmployeesHereReliability', None), ('DandBCompany.EmployeesTotal', None), ('DandBCompany.EmployeesTotalReliability', None), ('DandBCompany.FamilyMembers', None), ('DandBCompany.Fax', None), ('DandBCompany.FifthNaics', None), ('DandBCompany.FifthNaicsDesc', None), ('DandBCompany.FifthSic', None), ('DandBCompany.FifthSic8', None), ('DandBCompany.FifthSic8Desc', None), ('DandBCompany.FifthSicDesc', None), ('DandBCompany.FipsMsaCode', None), ('DandBCompany.FipsMsaDesc', None), ('DandBCompany.FortuneRank', None), ('DandBCompany.FourthNaics', None), ('DandBCompany.FourthNaicsDesc', None), ('DandBCompany.FourthSic', None), ('DandBCompany.FourthSic8', None), ('DandBCompany.FourthSic8Desc', None), ('DandBCompany.FourthSicDesc', None), ('DandBCompany.GeoCodeAccuracy', None), ('DandBCompany.GeocodeAccuracyStandard', None), ('DandBCompany.GlobalUltimateBusinessName', None), ('DandBCompany.GlobalUltimateDunsNumber', None), ('DandBCompany.GlobalUltimateTotalEmployees', None), ('DandBCompany.Id', None), ('DandBCompany.ImportExportAgent', None), ('DandBCompany.IncludedInSnP500', None), ('DandBCompany.IsDeleted', None), ('DandBCompany.LastModifiedById', None), ('DandBCompany.LastModifiedDate', None), ('DandBCompany.LastReferencedDate', None), ('DandBCompany.LastViewedDate', None), ('DandBCompany.Latitude', None), ('DandBCompany.LegalStatus', None), ('DandBCompany.LocationStatus', None), ('DandBCompany.Longitude', None), ('DandBCompany.MailingAddress', None), ('DandBCompany.MailingCity', None), ('DandBCompany.MailingCountry', None), ('DandBCompany.MailingGeocodeAccuracy', None), ('DandBCompany.MailingPostalCode', None), ('DandBCompany.MailingState', None), ('DandBCompany.MailingStreet', None), ('DandBCompany.MarketingPreScreen', None), ('DandBCompany.MarketingSegmentationCluster', None), ('DandBCompany.MinorityOwned', None), ('DandBCompany.Name', None), ('DandBCompany.NationalId', None), ('DandBCompany.NationalIdType', None), ('DandBCompany.OutOfBusiness', None), ('DandBCompany.OwnOrRent', None), ('DandBCompany.ParentOrHqBusinessName', None), ('DandBCompany.ParentOrHqDunsNumber', None), ('DandBCompany.Phone', None), ('DandBCompany.PostalCode', None), ('DandBCompany.PremisesMeasure', None), ('DandBCompany.PremisesMeasureReliability', None), ('DandBCompany.PremisesMeasureUnit', None), ('DandBCompany.PrimaryNaics', None), ('DandBCompany.PrimaryNaicsDesc', None), ('DandBCompany.PrimarySic', None), ('DandBCompany.PrimarySic8', None), ('DandBCompany.PrimarySic8Desc', None), ('DandBCompany.PrimarySicDesc', None), ('DandBCompany.PriorYearEmployees', None), ('DandBCompany.PriorYearRevenue', None), ('DandBCompany.PublicIndicator', None), ('DandBCompany.SalesTurnoverGrowthRate', None), ('DandBCompany.SalesVolume', None), ('DandBCompany.SalesVolumeReliability', None), ('DandBCompany.SecondNaics', None), ('DandBCompany.SecondNaicsDesc', None), ('DandBCompany.SecondSic', None), ('DandBCompany.SecondSic8', None), ('DandBCompany.SecondSic8Desc', None), ('DandBCompany.SecondSicDesc', None), ('DandBCompany.SixthNaics', None), ('DandBCompany.SixthNaicsDesc', None), ('DandBCompany.SixthSic', None), ('DandBCompany.SixthSic8', None), ('DandBCompany.SixthSic8Desc', None), ('DandBCompany.SixthSicDesc', None), ('DandBCompany.SmallBusiness', None), ('DandBCompany.State', None), ('DandBCompany.StockExchange', None), ('DandBCompany.StockSymbol', None), ('DandBCompany.Street', None), ('DandBCompany.Subsidiary', None), ('DandBCompany.SystemModstamp', None), ('DandBCompany.ThirdNaics', None), ('DandBCompany.ThirdNaicsDesc', None), ('DandBCompany.ThirdSic', None), ('DandBCompany.ThirdSic8', None), ('DandBCompany.ThirdSic8Desc', None), ('DandBCompany.ThirdSicDesc', None), ('DandBCompany.TradeStyle1', None), ('DandBCompany.TradeStyle2', None), ('DandBCompany.TradeStyle3', None), ('DandBCompany.TradeStyle4', None), ('DandBCompany.TradeStyle5', None), ('DandBCompany.URL', None), ('DandBCompany.UsTaxId', None), ('DandBCompany.WomenOwned', None), ('DandBCompany.YearStarted', None), ('DuplicateRecordItem.CreatedById', None), ('DuplicateRecordItem.CreatedDate', None), ('DuplicateRecordItem.DuplicateRecordSetId', None), ('DuplicateRecordItem.Id', None), ('DuplicateRecordItem.IsDeleted', None), ('DuplicateRecordItem.LastModifiedById', None), ('DuplicateRecordItem.LastModifiedDate', None), ('DuplicateRecordItem.Name', None), ('DuplicateRecordItem.RecordId', None), ('DuplicateRecordItem.SystemModstamp', None), ('DuplicateRecordSet.CreatedById', None), ('DuplicateRecordSet.CreatedDate', None), ('DuplicateRecordSet.DuplicateRuleId', None), ('DuplicateRecordSet.Id', None), ('DuplicateRecordSet.IsDeleted', None), ('DuplicateRecordSet.LastModifiedById', None), ('DuplicateRecordSet.LastModifiedDate', None), ('DuplicateRecordSet.LastReferencedDate', None), ('DuplicateRecordSet.LastViewedDate', None), ('DuplicateRecordSet.Name', None), ('DuplicateRecordSet.RecordCount', None), ('DuplicateRecordSet.SystemModstamp', None), ('EmailMessage.ActivityId', None), ('EmailMessage.BccAddress', None), ('EmailMessage.CcAddress', None), ('EmailMessage.CreatedById', None), ('EmailMessage.CreatedDate', None), ('EmailMessage.FromAddress', None), ('EmailMessage.FromName', None), ('EmailMessage.HasAttachment', None), ('EmailMessage.Headers', None), ('EmailMessage.HtmlBody', None), ('EmailMessage.Id', None), ('EmailMessage.Incoming', None), ('EmailMessage.IsDeleted', None), ('EmailMessage.IsExternallyVisible', None), ('EmailMessage.LastModifiedById', None), ('EmailMessage.LastModifiedDate', None), ('EmailMessage.MessageDate', None), ('EmailMessage.MessageIdentifier', None), ('EmailMessage.ParentId', None), ('EmailMessage.RelatedToId', None), ('EmailMessage.ReplyToEmailMessageId', None), ('EmailMessage.Status', None), ('EmailMessage.Subject', None), ('EmailMessage.SystemModstamp', None), ('EmailMessage.TextBody', None), ('EmailMessage.ThreadIdentifier', None), ('EmailMessage.ToAddress', None), ('EmailMessage.ValidatedFromAddress', None), ('FlowInterview.CreatedById', None), ('FlowInterview.CreatedDate', None), ('FlowInterview.CurrentElement', None), ('FlowInterview.Guid', None), ('FlowInterview.Id', None), ('FlowInterview.InterviewLabel', None), ('FlowInterview.IsDeleted', None), ('FlowInterview.LastModifiedById', None), ('FlowInterview.LastModifiedDate', None), ('FlowInterview.Name', None), ('FlowInterview.OwnerId', None), ('FlowInterview.PauseLabel', None), ('FlowInterview.SystemModstamp', None), ('Idea.Body', None), ('Idea.Categories', None), ('Idea.CommunityId', None), ('Idea.CreatedById', None), ('Idea.CreatedDate', None), ('Idea.CreatorFullPhotoUrl', None), ('Idea.CreatorName', None), ('Idea.CreatorSmallPhotoUrl', None), ('Idea.Id', None), ('Idea.IsDeleted', None), ('Idea.IsHtml', None), ('Idea.IsMerged', None), ('Idea.LastCommentDate', None), ('Idea.LastCommentId', None), ('Idea.LastModifiedById', None), ('Idea.LastModifiedDate', None), ('Idea.LastReferencedDate', None), ('Idea.LastViewedDate', None), ('Idea.NumComments', None), ('Idea.ParentIdeaId', None), ('Idea.RecordTypeId', None), ('Idea.Status', None), ('Idea.SystemModstamp', None), ('Idea.Title', None), ('Idea.VoteScore', None), ('Idea.VoteTotal', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.City', None), ('Lead.CleanStatus', None), ('Lead.Company', None), ('Lead.CompanyDunsNumber', None), ('Lead.ConvertedAccountId', None), ('Lead.ConvertedContactId', None), ('Lead.ConvertedDate', None), ('Lead.ConvertedOpportunityId', None), ('Lead.Country', None), ('Lead.CreatedById', None), ('Lead.CreatedDate', None), ('Lead.DandbCompanyId', None), ('Lead.Description', None), ('Lead.Email', None), ('Lead.EmailBouncedDate', None), ('Lead.EmailBouncedReason', None), ('Lead.Fax', None), ('Lead.FirstName', None), ('Lead.GeocodeAccuracy', None), ('Lead.Id', None), ('Lead.Industry', None), ('Lead.IsConverted', None), ('Lead.IsDeleted', None), ('Lead.IsUnreadByOwner', None), ('Lead.Jigsaw', None), ('Lead.JigsawContactId', None), ('Lead.LastActivityDate', None), ('Lead.LastModifiedById', None), ('Lead.LastModifiedDate', None), ('Lead.LastName', None), ('Lead.LastReferencedDate', None), ('Lead.LastViewedDate', None), ('Lead.Latitude', None), ('Lead.LeadSource', None), ('Lead.Longitude', None), ('Lead.MasterRecordId', None), ('Lead.MobilePhone', None), ('Lead.Name', None), ('Lead.NumberOfEmployees', None), ('Lead.OwnerId', None), ('Lead.Phone', None), ('Lead.PhotoUrl', None), ('Lead.PostalCode', None), ('Lead.Rating', None), ('Lead.Salutation', None), ('Lead.State', None), ('Lead.Status', None), ('Lead.Street', None), ('Lead.SystemModstamp', None), ('Lead.Title', None), ('Lead.Website', None), ('Macro.CreatedById', None), ('Macro.CreatedDate', None), ('Macro.Description', None), ('Macro.Id', None), ('Macro.IsDeleted', None), ('Macro.LastModifiedById', None), ('Macro.LastModifiedDate', None), ('Macro.LastReferencedDate', None), ('Macro.LastViewedDate', None), ('Macro.Name', None), ('Macro.OwnerId', None), ('Macro.SystemModstamp', None), ('Opportunity.AccountId', None), ('Opportunity.Amount', None), ('Opportunity.CampaignId', None), ('Opportunity.CloseDate', None), ('Opportunity.CreatedById', None), ('Opportunity.CreatedDate', None), ('Opportunity.Description', None), ('Opportunity.ExpectedRevenue', None), ('Opportunity.Fiscal', None), ('Opportunity.FiscalQuarter', None), ('Opportunity.FiscalYear', None), ('Opportunity.ForecastCategory', None), ('Opportunity.ForecastCategoryName', None), ('Opportunity.HasOpenActivity', None), ('Opportunity.HasOpportunityLineItem', None), ('Opportunity.HasOverdueTask', None), ('Opportunity.Id', None), ('Opportunity.IsClosed', None), ('Opportunity.IsDeleted', None), ('Opportunity.IsPrivate', None), ('Opportunity.IsWon', None), ('Opportunity.LastActivityDate', None), ('Opportunity.LastModifiedById', None), ('Opportunity.LastModifiedDate', None), ('Opportunity.LastReferencedDate', None), ('Opportunity.LastViewedDate', None), ('Opportunity.LeadSource', None), ('Opportunity.Name', None), ('Opportunity.NextStep', None), ('Opportunity.OwnerId', None), ('Opportunity.Pricebook2Id', None), ('Opportunity.Probability', None), ('Opportunity.StageName', None), ('Opportunity.SystemModstamp', None), ('Opportunity.TotalOpportunityQuantity', None), ('Opportunity.Type', None), ('Order.AccountId', None), ('Order.ActivatedById', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillingCity', None), ('Order.BillingCountry', None), ('Order.BillingGeocodeAccuracy', None), ('Order.BillingLatitude', None), ('Order.BillingLongitude', None), ('Order.BillingPostalCode', None), ('Order.BillingState', None), ('Order.BillingStreet', None), ('Order.BillToContactId', None), ('Order.CompanyAuthorizedById', None), ('Order.CompanyAuthorizedDate', None), ('Order.ContractId', None), ('Order.CreatedById', None), ('Order.CreatedDate', None), ('Order.CustomerAuthorizedById', None), ('Order.CustomerAuthorizedDate', None), ('Order.Description', None), ('Order.EffectiveDate', None), ('Order.EndDate', None), ('Order.Id', None), ('Order.IsDeleted', None), ('Order.IsReductionOrder', None), ('Order.LastModifiedById', None), ('Order.LastModifiedDate', None), ('Order.LastReferencedDate', None), ('Order.LastViewedDate', None), ('Order.Name', None), ('Order.OrderNumber', None), ('Order.OrderReferenceNumber', None), ('Order.OriginalOrderId', None), ('Order.OwnerId', None), ('Order.PoDate', None), ('Order.PoNumber', None), ('Order.Pricebook2Id', None), ('Order.ShippingAddress', None), ('Order.ShippingCity', None), ('Order.ShippingCountry', None), ('Order.ShippingGeocodeAccuracy', None), ('Order.ShippingLatitude', None), ('Order.ShippingLongitude', None), ('Order.ShippingPostalCode', None), ('Order.ShippingState', None), ('Order.ShippingStreet', None), ('Order.ShipToContactId', None), ('Order.Status', None), ('Order.StatusCode', None), ('Order.SystemModstamp', None), ('Order.TotalAmount', None), ('Order.Type', None), ('Pricebook2.CreatedById', None), ('Pricebook2.CreatedDate', None), ('Pricebook2.Description', None), ('Pricebook2.Id', None), ('Pricebook2.IsActive', None), ('Pricebook2.IsArchived', None), ('Pricebook2.IsDeleted', None), ('Pricebook2.IsStandard', None), ('Pricebook2.LastModifiedById', None), ('Pricebook2.LastModifiedDate', None), ('Pricebook2.LastReferencedDate', None), ('Pricebook2.LastViewedDate', None), ('Pricebook2.Name', None), ('Pricebook2.SystemModstamp', None), ('PricebookEntry.CreatedById', None), ('PricebookEntry.CreatedDate', None), ('PricebookEntry.Id', None), ('PricebookEntry.IsActive', None), ('PricebookEntry.IsDeleted', None), ('PricebookEntry.LastModifiedById', None), ('PricebookEntry.LastModifiedDate', None), ('PricebookEntry.Name', None), ('PricebookEntry.Pricebook2Id', None), ('PricebookEntry.Product2Id', None), ('PricebookEntry.ProductCode', None), ('PricebookEntry.SystemModstamp', None), ('PricebookEntry.UnitPrice', None), ('PricebookEntry.UseStandardPrice', None), ('Product2.CreatedById', None), ('Product2.CreatedDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSourceId', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.Id', None), ('Product2.IsActive', None), ('Product2.IsDeleted', None), ('Product2.LastModifiedById', None), ('Product2.LastModifiedDate', None), ('Product2.LastReferencedDate', None), ('Product2.LastViewedDate', None), ('Product2.Name', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.SystemModstamp', None), ('QuickText.Category', None), ('QuickText.Channel', None), ('QuickText.CreatedById', None), ('QuickText.CreatedDate', None), ('QuickText.Id', None), ('QuickText.IsDeleted', None), ('QuickText.LastModifiedById', None), ('QuickText.LastModifiedDate', None), ('QuickText.LastReferencedDate', None), ('QuickText.LastViewedDate', None), ('QuickText.Message', None), ('QuickText.Name', None), ('QuickText.OwnerId', None), ('QuickText.SystemModstamp', None), ('Solution.CreatedById', None), ('Solution.CreatedDate', None), ('Solution.Id', None), ('Solution.IsDeleted', None), ('Solution.IsHtml', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.IsReviewed', None), ('Solution.LastModifiedById', None), ('Solution.LastModifiedDate', None), ('Solution.LastReferencedDate', None), ('Solution.LastViewedDate', None), ('Solution.OwnerId', None), ('Solution.SolutionName', None), ('Solution.SolutionNote', None), ('Solution.SolutionNumber', None), ('Solution.Status', None), ('Solution.SystemModstamp', None), ('Solution.TimesUsed', None), ('Topic.CreatedById', None), ('Topic.CreatedDate', None), ('Topic.Description', None), ('Topic.Id', None), ('Topic.Name', None), ('Topic.SystemModstamp', None), ('Topic.TalkingAbout', None), ('User.AboutMe', None), ('User.AccountId', None), ('User.Address', None), ('User.Alias', None), ('User.BadgeText', None), ('User.BannerPhotoUrl', None), ('User.CallCenterId', None), ('User.City', None), ('User.CommunityNickname', None), ('User.CompanyName', None), ('User.ContactId', None), ('User.Country', None), ('User.CreatedById', None), ('User.CreatedDate', None), ('User.DefaultGroupNotificationFrequency', None), ('User.DelegatedApproverId', None), ('User.Department', None), ('User.DigestFrequency', None), ('User.Division', None), ('User.Email', None), ('User.EmailEncodingKey', None), ('User.EmailPreferencesAutoBcc', None), ('User.EmailPreferencesAutoBccStayInTouch', None), ('User.EmailPreferencesStayInTouchReminder', None), ('User.EmployeeNumber', None), ('User.Extension', None), ('User.Fax', None), ('User.FederationIdentifier', None), ('User.FirstName', None), ('User.ForecastEnabled', None), ('User.FullPhotoUrl', None), ('User.GeocodeAccuracy', None), ('User.Id', None), ('User.IsActive', None), ('User.IsProfilePhotoActive', None), ('User.JigsawImportLimitOverride', None), ('User.LanguageLocaleKey', None), ('User.LastLoginDate', None), ('User.LastModifiedById', None), ('User.LastModifiedDate', None), ('User.LastName', None), ('User.LastPasswordChangeDate', None), ('User.LastReferencedDate', None), ('User.LastViewedDate', None), ('User.Latitude', None), ('User.LocaleSidKey', None), ('User.Longitude', None), ('User.ManagerId', None), ('User.MediumBannerPhotoUrl', None), ('User.MediumPhotoUrl', None), ('User.MobilePhone', None), ('User.Name', None), ('User.OfflinePdaTrialExpirationDate', None), ('User.OfflineTrialExpirationDate', None), ('User.Phone', None), ('User.PostalCode', None), ('User.ProfileId', None), ('User.ReceivesAdminInfoEmails', None), ('User.ReceivesInfoEmails', None), ('User.SenderEmail', None), ('User.SenderName', None), ('User.Signature', None), ('User.SmallBannerPhotoUrl', None), ('User.SmallPhotoUrl', None), ('User.State', None), ('User.StayInTouchNote', None), ('User.StayInTouchSignature', None), ('User.StayInTouchSubject', None), ('User.Street', None), ('User.SystemModstamp', None), ('User.TimeZoneSidKey', None), ('User.Title', None), ('User.Username', None), ('User.UserPermissionsCallCenterAutoLogin', None), ('User.UserPermissionsChatterAnswersUser', None), ('User.UserPermissionsInteractionUser', None), ('User.UserPermissionsJigsawProspectingUser', None), ('User.UserPermissionsKnowledgeUser', None), ('User.UserPermissionsMarketingUser', None), ('User.UserPermissionsMobileUser', None), ('User.UserPermissionsOfflineUser', None), ('User.UserPermissionsSFContentUser', None), ('User.UserPermissionsSiteforceContributorUser', None), ('User.UserPermissionsSiteforcePublisherUser', None), ('User.UserPermissionsSupportUser', None), ('User.UserPermissionsWorkDotComUserFeature', None), ('User.UserPreferencesActivityRemindersPopup', None), ('User.UserPreferencesApexPagesDeveloperMode', None), ('User.UserPreferencesCacheDiagnostics', None), ('User.UserPreferencesContentEmailAsAndWhen', None), ('User.UserPreferencesContentNoEmail', None), ('User.UserPreferencesCreateLEXAppsWTShown', None), ('User.UserPreferencesDisableAllFeedsEmail', None), ('User.UserPreferencesDisableBookmarkEmail', None), ('User.UserPreferencesDisableChangeCommentEmail', None), ('User.UserPreferencesDisableEndorsementEmail', None), ('User.UserPreferencesDisableFeedbackEmail', None), ('User.UserPreferencesDisableFileShareNotificationsForApi', None), ('User.UserPreferencesDisableFollowersEmail', None), ('User.UserPreferencesDisableLaterCommentEmail', None), ('User.UserPreferencesDisableLikeEmail', None), ('User.UserPreferencesDisableMentionsPostEmail', None), ('User.UserPreferencesDisableMessageEmail', None), ('User.UserPreferencesDisableProfilePostEmail', None), ('User.UserPreferencesDisableSharePostEmail', None), ('User.UserPreferencesDisableWorkEmail', None), ('User.UserPreferencesDisCommentAfterLikeEmail', None), ('User.UserPreferencesDisMentionsCommentEmail', None), ('User.UserPreferencesDisProfPostCommentEmail', None), ('User.UserPreferencesEnableAutoSubForFeeds', None), ('User.UserPreferencesEventRemindersCheckboxDefault', None), ('User.UserPreferencesFavoritesWTShown', None), ('User.UserPreferencesGlobalNavBarWTShown', None), ('User.UserPreferencesGlobalNavGridMenuWTShown', None), ('User.UserPreferencesHideBiggerPhotoCallout', None), ('User.UserPreferencesHideChatterOnboardingSplash', None), ('User.UserPreferencesHideCSNDesktopTask', None), ('User.UserPreferencesHideCSNGetChatterMobileTask', None), ('User.UserPreferencesHideEndUserOnboardingAssistantModal', None), ('User.UserPreferencesHideLightningMigrationModal', None), ('User.UserPreferencesHideS1BrowserUI', None), ('User.UserPreferencesHideSecondChatterOnboardingSplash', None), ('User.UserPreferencesHideSfxWelcomeMat', None), ('User.UserPreferencesJigsawListUser', None), ('User.UserPreferencesLightningExperiencePreferred', None), ('User.UserPreferencesPathAssistantCollapsed', None), ('User.UserPreferencesPreviewLightning', None), ('User.UserPreferencesReminderSoundOff', None), ('User.UserPreferencesShowCityToExternalUsers', None), ('User.UserPreferencesShowCityToGuestUsers', None), ('User.UserPreferencesShowCountryToExternalUsers', None), ('User.UserPreferencesShowCountryToGuestUsers', None), ('User.UserPreferencesShowEmailToExternalUsers', None), ('User.UserPreferencesShowEmailToGuestUsers', None), ('User.UserPreferencesShowFaxToExternalUsers', None), ('User.UserPreferencesShowFaxToGuestUsers', None), ('User.UserPreferencesShowManagerToExternalUsers', None), ('User.UserPreferencesShowManagerToGuestUsers', None), ('User.UserPreferencesShowMobilePhoneToExternalUsers', None), ('User.UserPreferencesShowMobilePhoneToGuestUsers', None), ('User.UserPreferencesShowPostalCodeToExternalUsers', None), ('User.UserPreferencesShowPostalCodeToGuestUsers', None), ('User.UserPreferencesShowProfilePicToGuestUsers', None), ('User.UserPreferencesShowStateToExternalUsers', None), ('User.UserPreferencesShowStateToGuestUsers', None), ('User.UserPreferencesShowStreetAddressToExternalUsers', None), ('User.UserPreferencesShowStreetAddressToGuestUsers', None), ('User.UserPreferencesShowTitleToExternalUsers', None), ('User.UserPreferencesShowTitleToGuestUsers', None), ('User.UserPreferencesShowWorkPhoneToExternalUsers', None), ('User.UserPreferencesShowWorkPhoneToGuestUsers', None), ('User.UserPreferencesSortFeedByComment', None), ('User.UserPreferencesTaskRemindersCheckboxDefault', None), ('User.UserRoleId', None), ('User.UserType', None), ('UserAppMenuItem.ApplicationId', None), ('UserAppMenuItem.AppMenuItemId', None), ('UserAppMenuItem.Description', None), ('UserAppMenuItem.IconUrl', None), ('UserAppMenuItem.Id', None), ('UserAppMenuItem.InfoUrl', None), ('UserAppMenuItem.IsUsingAdminAuthorization', None), ('UserAppMenuItem.IsVisible', None), ('UserAppMenuItem.Label', None), ('UserAppMenuItem.LogoUrl', None), ('UserAppMenuItem.MobileStartUrl', None), ('UserAppMenuItem.Name', None), ('UserAppMenuItem.SortOrder', None), ('UserAppMenuItem.StartUrl', None), ('UserAppMenuItem.Type', None), ('UserAppMenuItem.UserSortOrder', None), ('UserProvisioningRequest.AppName', None), ('UserProvisioningRequest.ApprovalStatus', None), ('UserProvisioningRequest.ConnectedAppId', None), ('UserProvisioningRequest.CreatedById', None), ('UserProvisioningRequest.CreatedDate', None), ('UserProvisioningRequest.ExternalUserId', None), ('UserProvisioningRequest.Id', None), ('UserProvisioningRequest.IsDeleted', None), ('UserProvisioningRequest.LastModifiedById', None), ('UserProvisioningRequest.LastModifiedDate', None), ('UserProvisioningRequest.ManagerId', None), ('UserProvisioningRequest.Name', None), ('UserProvisioningRequest.Operation', None), ('UserProvisioningRequest.OwnerId', None), ('UserProvisioningRequest.ParentId', None), ('UserProvisioningRequest.RetryCount', None), ('UserProvisioningRequest.SalesforceUserId', None), ('UserProvisioningRequest.ScheduleDate', None), ('UserProvisioningRequest.State', None), ('UserProvisioningRequest.SystemModstamp', None), ('UserProvisioningRequest.UserProvAccountId', None), ('UserProvisioningRequest.UserProvConfigId', None), ('WorkOrder.AccountId', None), ('WorkOrder.Address', None), ('WorkOrder.AssetId', None), ('WorkOrder.BusinessHoursId', None), ('WorkOrder.CaseId', None), ('WorkOrder.City', None), ('WorkOrder.ContactId', None), ('WorkOrder.Country', None), ('WorkOrder.CreatedById', None), ('WorkOrder.CreatedDate', None), ('WorkOrder.Description', None), ('WorkOrder.Discount', None), ('WorkOrder.Duration', None), ('WorkOrder.DurationInMinutes', None), ('WorkOrder.DurationType', None), ('WorkOrder.EndDate', None), ('WorkOrder.GeocodeAccuracy', None), ('WorkOrder.GrandTotal', None), ('WorkOrder.Id', None), ('WorkOrder.IsClosed', None), ('WorkOrder.IsDeleted', None), ('WorkOrder.LastModifiedById', None), ('WorkOrder.LastModifiedDate', None), ('WorkOrder.LastReferencedDate', None), ('WorkOrder.LastViewedDate', None), ('WorkOrder.Latitude', None), ('WorkOrder.LineItemCount', None), ('WorkOrder.Longitude', None), ('WorkOrder.OwnerId', None), ('WorkOrder.ParentWorkOrderId', None), ('WorkOrder.PostalCode', None), ('WorkOrder.Pricebook2Id', None), ('WorkOrder.Priority', None), ('WorkOrder.RootWorkOrderId', None), ('WorkOrder.ServiceAppointmentCount', None), ('WorkOrder.StartDate', None), ('WorkOrder.State', None), ('WorkOrder.Status', None), ('WorkOrder.StatusCategory', None), ('WorkOrder.Street', None), ('WorkOrder.Subject', None), ('WorkOrder.Subtotal', None), ('WorkOrder.SystemModstamp', None), ('WorkOrder.Tax', None), ('WorkOrder.TotalPrice', None), ('WorkOrder.WorkOrderNumber', None), ('WorkOrderLineItem.Address', None), ('WorkOrderLineItem.AssetId', None), ('WorkOrderLineItem.City', None), ('WorkOrderLineItem.Country', None), ('WorkOrderLineItem.CreatedById', None), ('WorkOrderLineItem.CreatedDate', None), ('WorkOrderLineItem.Description', None), ('WorkOrderLineItem.Discount', None), ('WorkOrderLineItem.Duration', None), ('WorkOrderLineItem.DurationInMinutes', None), ('WorkOrderLineItem.DurationType', None), ('WorkOrderLineItem.EndDate', None), ('WorkOrderLineItem.GeocodeAccuracy', None), ('WorkOrderLineItem.Id', None), ('WorkOrderLineItem.IsClosed', None), ('WorkOrderLineItem.IsDeleted', None), ('WorkOrderLineItem.LastModifiedById', None), ('WorkOrderLineItem.LastModifiedDate', None), ('WorkOrderLineItem.LastReferencedDate', None), ('WorkOrderLineItem.LastViewedDate', None), ('WorkOrderLineItem.Latitude', None), ('WorkOrderLineItem.LineItemNumber', None), ('WorkOrderLineItem.ListPrice', None), ('WorkOrderLineItem.Longitude', None), ('WorkOrderLineItem.OrderId', None), ('WorkOrderLineItem.ParentWorkOrderLineItemId', None), ('WorkOrderLineItem.PostalCode', None), ('WorkOrderLineItem.PricebookEntryId', None), ('WorkOrderLineItem.Priority', None), ('WorkOrderLineItem.Product2Id', None), ('WorkOrderLineItem.Quantity', None), ('WorkOrderLineItem.RootWorkOrderLineItemId', None), ('WorkOrderLineItem.ServiceAppointmentCount', None), ('WorkOrderLineItem.StartDate', None), ('WorkOrderLineItem.State', None), ('WorkOrderLineItem.Status', None), ('WorkOrderLineItem.StatusCategory', None), ('WorkOrderLineItem.Street', None), ('WorkOrderLineItem.Subject', None), ('WorkOrderLineItem.Subtotal', None), ('WorkOrderLineItem.SystemModstamp', None), ('WorkOrderLineItem.TotalPrice', None), ('WorkOrderLineItem.UnitPrice', None), ('WorkOrderLineItem.WorkOrderId', None)], blank=True, null=True)
    aggregate_type = models.CharField(max_length=255, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChart'
        verbose_name = 'List View Chart'
        verbose_name_plural = 'List View Charts'
        # keyPrefix = '0Dd'



class ListViewChartInstance(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='ListView Chart Instance ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_view_chart = models.ForeignKey(ListViewChart, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='API Name', sf_read_only=models.READ_ONLY)
    source_entity = models.CharField(max_length=255, verbose_name='Entity', sf_read_only=models.READ_ONLY)
    list_view_context = models.ForeignKey(ListView, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    chart_type = models.CharField(max_length=255, verbose_name='TODO, use alias', sf_read_only=models.READ_ONLY, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    is_last_viewed = models.BooleanField(verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, default=False)
    data_query = models.TextField(verbose_name='SOQL Query for Chart Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(verbose_name='Editable', sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(verbose_name='Deletable', sf_read_only=models.READ_ONLY, default=False)
    grouping_field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChartInstance'
        verbose_name = 'List View Chart Instance'
        verbose_name_plural = 'List View Chart Instances'
        # keyPrefix = '0De'



class LoginGeo(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='logingeo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='logingeo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    login_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    country_iso = models.CharField(max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subdivision = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginGeo'
        verbose_name = 'Login Geo Data'
        verbose_name_plural = 'Login Geo Data'
        # keyPrefix = '04F'



class LoginHistory(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    login_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    login_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(max_length=255, verbose_name='Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authentication_service = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [AuthProvider, SamlSsoConfig]
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    tls_protocol = models.CharField(max_length=40, verbose_name='TLS Protocol', sf_read_only=models.READ_ONLY, choices=[('TLS 1.0', 'TLS 1.0'), ('TLS 1.1', 'TLS 1.1'), ('TLS 1.2', 'TLS 1.2'), ('Unknown', 'Unknown')], blank=True, null=True)
    cipher_suite = models.CharField(max_length=40, verbose_name='TLS Cipher Suite', sf_read_only=models.READ_ONLY, choices=[('AES128-GCM-SHA256', 'AES128-GCM-SHA256'), ('AES128-SHA', 'AES128-SHA'), ('AES128-SHA256', 'AES128-SHA256'), ('AES256-GCM-SHA384', 'AES256-GCM-SHA384'), ('AES256-SHA', 'AES256-SHA'), ('AES256-SHA256', 'AES256-SHA256'), ('DES-CBC3-SHA', 'DES-CBC3-SHA'), ('DHE-RSA-AES128-GCM-SHA256', 'DHE-RSA-AES128-GCM-SHA256'), ('DHE-RSA-AES128-SHA', 'DHE-RSA-AES128-SHA'), ('DHE-RSA-AES256-GCM-SHA384', 'DHE-RSA-AES256-GCM-SHA384'), ('DHE-RSA-AES256-SHA', 'DHE-RSA-AES256-SHA'), ('DHE-RSA-DES-CBC3-SHA', 'DHE-RSA-DES-CBC3-SHA'), ('ECDH-ECDSA-AES128-GCM-SHA256', 'ECDH-ECDSA-AES128-GCM-SHA256'), ('ECDH-ECDSA-AES128-SHA256', 'ECDH-ECDSA-AES128-SHA256'), ('ECDH-ECDSA-AES256-GCM-SHA384', 'ECDH-ECDSA-AES256-GCM-SHA384'), ('ECDH-ECDSA-AES256-SHA384', 'ECDH-ECDSA-AES256-SHA384'), ('ECDH-RSA-AES128-GCM-SHA256', 'ECDH-RSA-AES128-GCM-SHA256'), ('ECDH-RSA-AES128-SHA256', 'ECDH-RSA-AES128-SHA256'), ('ECDH-RSA-AES256-GCM-SHA384', 'ECDH-RSA-AES256-GCM-SHA384'), ('ECDH-RSA-AES256-SHA384', 'ECDH-RSA-AES256-SHA384'), ('ECDHE-ECDSA-AES128-GCM-SHA256', 'ECDHE-ECDSA-AES128-GCM-SHA256'), ('ECDHE-ECDSA-AES128-SHA256', 'ECDHE-ECDSA-AES128-SHA256'), ('ECDHE-ECDSA-AES256-GCM-SHA384', 'ECDHE-ECDSA-AES256-GCM-SHA384'), ('ECDHE-ECDSA-AES256-SHA384', 'ECDHE-ECDSA-AES256-SHA384'), ('ECDHE-RSA-AES128-CBC-SHA', 'ECDHE-RSA-AES128-CBC-SHA'), ('ECDHE-RSA-AES128-GCM-SHA256', 'ECDHE-RSA-AES128-GCM-SHA256'), ('ECDHE-RSA-AES128-SHA', 'ECDHE-RSA-AES128-SHA'), ('ECDHE-RSA-AES128-SHA256', 'ECDHE-RSA-AES128-SHA256'), ('ECDHE-RSA-AES256-CBC-SHA', 'ECDHE-RSA-AES256-CBC-SHA'), ('ECDHE-RSA-AES256-GCM-SHA384', 'ECDHE-RSA-AES256-GCM-SHA384'), ('ECDHE-RSA-AES256-SHA', 'ECDHE-RSA-AES256-SHA'), ('ECDHE-RSA-AES256-SHA384', 'ECDHE-RSA-AES256-SHA384'), ('ECDHE-RSA-DES-CBC3-SHA', 'ECDHE-RSA-DES-CBC3-SHA'), ('Unknown', 'Unknown')], blank=True, null=True)
    browser = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    platform = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    application = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    client_version = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_type = models.CharField(max_length=64, verbose_name='API Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.CharField(max_length=32, verbose_name='API Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_iso = models.CharField(max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginHistory'
        verbose_name = 'Login History'
        verbose_name_plural = 'Login History'
        # keyPrefix = '0Ya'



class LoginIp(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_authenticated = models.BooleanField(verbose_name='IsAuthenticated', sf_read_only=models.READ_ONLY, default=False)
    challenge_sent_date = models.DateTimeField(verbose_name='Challenge SentDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    challenge_method = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Email', None), ('SMS', None), ('TOTP_CHOICE', None), ('TOTP_ONLY', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginIp'
        verbose_name = 'Login IP'
        verbose_name_plural = 'Login IP'
        # keyPrefix = '710'



class LookedUpFromActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem]
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Not Started', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LookedUpFromActivity'
        verbose_name = 'Lookups from Activity'
        verbose_name_plural = 'Lookups from Activities'
        # keyPrefix = 'None'



class Macro(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Macro Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macro_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macro_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Macro'
        verbose_name = 'Macro'
        verbose_name_plural = 'Macros'
        # keyPrefix = '0JZ'



class MacroHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('Name', 'Macro Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MacroHistory'
        verbose_name = 'Macro History'
        verbose_name_plural = 'Macro History'
        # keyPrefix = 'None'



class MacroInstruction(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Macro Instruction Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macroinstruction_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macroinstruction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    operation = models.CharField(max_length=255, choices=[('Select', 'select'), ('Set', 'set'), ('Insert', 'insert'), ('Submit', 'submit'), ('Close', 'close')])
    target = models.CharField(max_length=255, choices=[('Field.CollaborationGroup.CollaborationType', 'Access Type'), ('Field.Account.Name.begin', 'Account Name'), ('Field.Account.Name', 'Account Name'), ('Field.Contact.AccountId', 'Account Name'), ('Field.Opportunity.AccountId', 'Account Name'), ('Field.Account.Name.end', 'Account Name'), ('Tab.Account', 'Active Account Tab'), ('Tab.AssetRelationship', 'Active Asset Relationship Tab'), ('Tab.Asset', 'Active Asset Tab'), ('Tab.Campaign', 'Active Campaign Tab'), ('Tab.Case', 'Active Case Tab'), ('Tab.Contact', 'Active Contact Tab'), ('Tab.Contract', 'Active Contract Tab'), ('Tab.Event', 'Active Event Tab'), ('Tab.FeedItem', 'Active Feed Item Tab'), ('Tab.CollaborationGroup', 'Active Group Tab'), ('Tab.Lead', 'Active Lead Tab'), ('Tab.Opportunity', 'Active Opportunity Tab'), ('Tab.Order', 'Active Order Tab'), ('Tab.Product2', 'Active Product Tab'), ('Tab.Task', 'Active Task Tab'), ('Tab.User', 'Active User Tab'), ('Tab.WorkOrderLineItem', 'Active Work Order Line Item Tab'), ('Tab.WorkOrder', 'Active Work Order Tab'), ('QuickAction.CollaborationGroup.NewGroupMember', 'Add Member Action'), ('QuickAction.CollaborationGroup.NewGroupRecord', 'Add Record Action'), ('Field.Event.IsAllDayEvent', 'All-Day Event'), ('Field.CollaborationGroup.CanHaveGuests', 'Allow customers'), ('Field.Opportunity.Amount', 'Amount'), ('Field.Task.OwnerId', 'Assigned To'), ('Field.Event.OwnerId', 'Assigned To'), ('Field.OutgoingEmail.ContentDocumentIds.end', 'Attachments'), ('Field.OutgoingEmail.AttachmentIds.end', 'Attachments'), ('Field.OutgoingEmail.BccAddress', 'BCC'), ('Field.OutgoingEmail.BccAddress.begin', 'BCC'), ('Field.OutgoingEmail.BccAddress.end', 'BCC'), ('Field.Note.Body.begin', 'Body'), ('Field.Note.Body.end', 'Body'), ('Field.Note.Body.cursor', 'Body'), ('Field.Note.Body', 'Body'), ('Field.Case.OwnerId', 'Case Owner'), ('Field.OutgoingEmail.CcAddress.end', 'CC'), ('Field.OutgoingEmail.CcAddress.begin', 'CC'), ('Field.OutgoingEmail.CcAddress', 'CC'), ('QuickAction.Task.Defer', 'Change Date Action'), ('QuickAction.Task.Defer_0', 'Change Date Action'), ('QuickAction.Task.UpdatePriority_0', 'Change Priority Action'), ('QuickAction.Task.UpdatePriority', 'Change Priority Action'), ('QuickAction.Task.UpdateStatus', 'Change Status Action'), ('QuickAction.Task.UpdateStatus_0', 'Change Status Action'), ('Field.Opportunity.CloseDate', 'Close Date'), ('Field.Task.Description.end', 'Comments'), ('Field.Task.Description.cursor', 'Comments'), ('Field.Task.Description', 'Comments'), ('Field.Task.Description.begin', 'Comments'), ('Field.Lead.Company.begin', 'Company'), ('Field.Lead.Company.end', 'Company'), ('Field.Lead.Company', 'Company'), ('Field.Case.ContactId', 'Contact Name'), ('QuickAction.FeedItem.NewTaskFromFeedItem', 'Create New Task Action'), ('Field.CollaborationGroup.Description.begin', 'Description'), ('Field.Case.Description.cursor', 'Description'), ('Field.CollaborationGroup.Description', 'Description'), ('Field.Case.Description', 'Description'), ('Field.CollaborationGroup.Description.cursor', 'Description'), ('Field.CollaborationGroup.Description.end', 'Description'), ('Field.Case.Description.end', 'Description'), ('Field.Case.Description.begin', 'Description'), ('Field.Task.ActivityDate', 'Due Date'), ('QuickAction.Task.EditDescription_0', 'Edit Comments Action'), ('QuickAction.Task.EditDescription', 'Edit Comments Action'), ('Field.Lead.Email', 'Email'), ('Field.Contact.Email', 'Email'), ('QuickAction.SendEmail', 'Email Action'), ('Field.OutgoingEmail.EmailTemplateId', 'Email Template'), ('Field.Event.EndDateTime', 'End'), ('Field.Contact.FirstName.end', 'First Name'), ('Field.Lead.FirstName.begin', 'First Name'), ('Field.Contact.FirstName.begin', 'First Name'), ('Field.Lead.FirstName.end', 'First Name'), ('Field.Lead.FirstName', 'First Name'), ('Field.Contact.FirstName', 'First Name'), ('Field.OutgoingEmail.ValidatedFromAddress', 'From'), ('Field.CollaborationGroupRecord.CollaborationGroupId', 'Group'), ('Field.CollaborationGroupMember.CollaborationGroupId', 'Group'), ('Field.CollaborationGroupMember.CollaborationRole', 'Group Member Role'), ('Field.OutgoingEmail.HtmlBody.begin', 'HTML Body'), ('Field.OutgoingEmail.HtmlBody.end', 'HTML Body'), ('Field.OutgoingEmail.HtmlBody.cursor', 'HTML Body'), ('Field.OutgoingEmail.HtmlBody', 'HTML Body'), ('Field.Account.Industry', 'Industry'), ('Field.Lead.LastName.end', 'Last Name'), ('Field.Lead.LastName', 'Last Name'), ('Field.Contact.LastName.begin', 'Last Name'), ('Field.Contact.LastName', 'Last Name'), ('Field.Lead.LastName.begin', 'Last Name'), ('Field.Contact.LastName.end', 'Last Name'), ('Field.Event.Location', 'Location'), ('Field.Event.Location.end', 'Location'), ('Field.Event.Location.begin', 'Location'), ('QuickAction.LogACall', 'Log a Call Action'), ('Field.CollaborationGroupMember.MemberId', 'Member'), ('Field.CollaborationGroup.Name.begin', 'Name'), ('Field.Event.WhoId', 'Name'), ('Field.CollaborationGroup.Name.end', 'Name'), ('Field.Task.WhoId', 'Name'), ('Field.CollaborationGroup.Name', 'Name'), ('QuickAction.NewAccount', 'New Account Action'), ('QuickAction.NewCase', 'New Case Action'), ('QuickAction.Case.NewChildCase', 'New Child Case Action'), ('QuickAction.NewEvent', 'New Event Action'), ('QuickAction.NewGroup', 'New Group Action'), ('QuickAction.NewLead', 'New Lead Action'), ('QuickAction.NewNote', 'New Note Action'), ('QuickAction.NewOpportunity', 'New Opportunity Action'), ('QuickAction.NewTask', 'New Task Action'), ('Field.Opportunity.NextStep', 'Next Step'), ('Field.Opportunity.NextStep.end', 'Next Step'), ('Field.Opportunity.NextStep.begin', 'Next Step'), ('Field.Opportunity.Name.begin', 'Opportunity Name'), ('Field.Opportunity.Name', 'Opportunity Name'), ('Field.Opportunity.Name.end', 'Opportunity Name'), ('Field.Case.ParentId', 'Parent Case'), ('Field.Contact.Phone', 'Phone'), ('Field.Account.Phone', 'Phone'), ('Field.Lead.Phone', 'Phone'), ('Field.Case.Priority', 'Priority'), ('Field.Task.Priority', 'Priority'), ('Field.Note.IsPrivate', 'Private'), ('Field.CollaborationGroupRecord.RecordId', 'Record'), ('Field.OutgoingEmail.RelatedToId', 'Related To'), ('Field.Task.WhatId', 'Related To'), ('Field.Event.WhatId', 'Related To'), ('Field.Lead.Salutation', 'Salutation'), ('Field.Contact.Salutation', 'Salutation'), ('Field.Opportunity.StageName', 'Stage'), ('Field.Event.StartDateTime', 'Start'), ('Field.Case.Status', 'Status'), ('Field.Task.Status', 'Status'), ('Field.OutgoingEmail.Subject', 'Subject'), ('Field.OutgoingEmail.Subject.begin', 'Subject'), ('Field.Case.Subject', 'Subject'), ('Field.Event.Subject', 'Subject'), ('Field.Case.Subject.end', 'Subject'), ('Field.OutgoingEmail.Subject.end', 'Subject'), ('Field.Case.Subject.begin', 'Subject'), ('Field.Task.Subject', 'Subject'), ('Field.Contact.Title.end', 'Title'), ('Field.Lead.Title.begin', 'Title'), ('Field.Lead.Title', 'Title'), ('Field.Note.Title.begin', 'Title'), ('Field.Note.Title', 'Title'), ('Field.Contact.Title.begin', 'Title'), ('Field.Contact.Title', 'Title'), ('Field.Lead.Title.end', 'Title'), ('Field.Note.Title.end', 'Title'), ('Field.OutgoingEmail.ToAddress.end', 'To'), ('Field.OutgoingEmail.ToAddress.begin', 'To'), ('Field.OutgoingEmail.ToAddress', 'To'), ('Field.Account.Type', 'Type'), ('QuickAction.Case._LightningUpdateCase', 'Update Case Action'), ('QuickAction.Contact._LightningRelatedContact', 'Update Contact Action'), ('Field.Account.Website', 'Website')], blank=True, null=True)
    value = models.TextField(blank=True, null=True)
    value_record = models.CharField(max_length=15, verbose_name='Value Record ID', blank=True, null=True)
    sort_order = models.IntegerField()
    class Meta(models.Model.Meta):
        db_table = 'MacroInstruction'
        verbose_name = 'Macro Instruction'
        verbose_name_plural = 'Macro Instructions'
        # keyPrefix = '0Ji'



class MacroShare(models.Model):
    parent = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'MacroShare'
        verbose_name = 'Macro Share'
        verbose_name_plural = 'Macro Share'
        # keyPrefix = 'None'



class MailmergeTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80)
    description = models.CharField(max_length=255, blank=True, null=True)
    filename = models.CharField(max_length=255, verbose_name='File', sf_read_only=models.NOT_UPDATEABLE)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.NOT_UPDATEABLE)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mailmergetemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mailmergetemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    security_options_attachment_scanned_for_xss = models.BooleanField(db_column='SecurityOptionsAttachmentScannedForXSS', verbose_name='Attachment has been scanned for XSS')
    security_options_attachment_has_xssthreat = models.BooleanField(db_column='SecurityOptionsAttachmentHasXSSThreat', verbose_name='XSS threat was detected in the attachment')
    security_options_attachment_scannedfor_flash = models.BooleanField(verbose_name='Attachment has been scanned for Flash Injection')
    security_options_attachment_has_flash = models.BooleanField(verbose_name='Flash Injection was detected in the attachment')
    class Meta(models.Model.Meta):
        db_table = 'MailmergeTemplate'
        verbose_name = 'Mail Merge Template'
        verbose_name_plural = 'Mail Merge Template'
        # keyPrefix = '01H'



class MatchingRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Lead', None)])
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingrule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    match_engine = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('ExactMatchEngine', 'Exact Match Engine'), ('FuzzyMatchEngine', 'Fuzzy Match Engine')], blank=True, null=True)
    boolean_filter = models.CharField(max_length=255, verbose_name='Advanced Logic', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_status = models.CharField(max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, default='Inactive', choices=[('Inactive', 'Inactive'), ('DeactivationFailed', 'Deactivation Failed'), ('Activating', 'Activating'), ('Deactivating', 'Deactivating'), ('Active', 'Active'), ('ActivationFailed', 'Activation Failed')])
    sobject_subtype = models.CharField(max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MatchingRule'
        verbose_name = 'Matching Rule'
        verbose_name_plural = 'Matching Rules'
        # keyPrefix = '0JD'



class MatchingRuleItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingruleitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingruleitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    matching_rule = models.ForeignKey(MatchingRule, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountNumber', None), ('AccountSource', None), ('Active', None), ('Address', None), ('AssistantName', None), ('AssistantPhone', None), ('BillingAddress', None), ('BillingCity', None), ('BillingCountry', None), ('BillingPostalCode', None), ('BillingState', None), ('BillingStreet', None), ('City', None), ('CleanStatus', None), ('CleanStatus', None), ('CleanStatus', None), ('Company', None), ('CompanyDunsNumber', None), ('Country', None), ('CurrentGenerators', None), ('CustomerPriority', None), ('Department', None), ('DunsNumber', None), ('Email', None), ('Email', None), ('EmailBouncedReason', None), ('Fax', None), ('Fax', None), ('Fax', None), ('FirstName', None), ('FirstName', None), ('HomePhone', None), ('Industry', None), ('Industry', None), ('Jigsaw', None), ('Jigsaw', None), ('Jigsaw', None), ('Languages', None), ('LastName', None), ('LastName', None), ('LeadSource', None), ('LeadSource', None), ('Level', None), ('MailingAddress', None), ('MailingCity', None), ('MailingCountry', None), ('MailingPostalCode', None), ('MailingState', None), ('MailingStreet', None), ('MobilePhone', None), ('MobilePhone', None), ('NaicsCode', None), ('NaicsDesc', None), ('Name', None), ('Name', None), ('Name', None), ('NumberOfEmployees', None), ('NumberOfEmployees', None), ('NumberofLocations', None), ('NumberofLocations', None), ('OtherAddress', None), ('OtherCity', None), ('OtherCountry', None), ('OtherPhone', None), ('OtherPostalCode', None), ('OtherState', None), ('OtherStreet', None), ('Ownership', None), ('Parent', None), ('Phone', None), ('Phone', None), ('Phone', None), ('PostalCode', None), ('Primary', None), ('ProductInterest', None), ('Rating', None), ('Rating', None), ('ReportsTo', None), ('Salutation', None), ('Salutation', None), ('ShippingAddress', None), ('ShippingCity', None), ('ShippingCountry', None), ('ShippingPostalCode', None), ('ShippingState', None), ('ShippingStreet', None), ('Sic', None), ('SICCode', None), ('SicDesc', None), ('Site', None), ('SLA', None), ('SLASerialNumber', None), ('State', None), ('Status', None), ('Street', None), ('TextName', None), ('TickerSymbol', None), ('Title', None), ('Title', None), ('Tradestyle', None), ('Type', None), ('UpsellOpportunity', None), ('Website', None), ('Website', None), ('YearStarted', None)], blank=True, null=True)
    matching_method = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Exact', 'Exact'), ('FirstName', 'Fuzzy: First Name'), ('LastName', 'Fuzzy: Last Name'), ('CompanyName', 'Fuzzy: Company Name'), ('Phone', 'Fuzzy: Phone'), ('City', 'Fuzzy: City'), ('Street', 'Fuzzy: Street'), ('Zip', 'Fuzzy: ZIP'), ('Title', 'Fuzzy: Title')], blank=True, null=True)
    blank_value_behavior = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='MatchBlanks', choices=[('MatchBlanks', 'Match When Both Blank'), ('NullNotAllowed', 'Does Not Match If Null')])
    class Meta(models.Model.Meta):
        db_table = 'MatchingRuleItem'
        verbose_name = 'Matching Rule Item'
        verbose_name_plural = 'Matching Rule Items'
        # keyPrefix = '0JE'



class Name(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountCleanInfo', None), ('AccountContactRole', None), ('Announcement', None), ('Asset', None), ('AssistantRecommendation', None), ('BackgroundOperation', None), ('Campaign', None), ('Case', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Contact', None), ('ContactCleanInfo', None), ('ContentDistribution', None), ('ContentDocument', None), ('ContentFolder', None), ('ContentVersion', None), ('Contract', None), ('DandBCompany', None), ('Dashboard', None), ('DashboardComponent', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DatacloudOwnedEntity', None), ('DatacloudPurchaseUsage', None), ('Document', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('FileSearchActivity', None), ('FlowInterview', None), ('Idea', None), ('IdeaComment', None), ('InstalledMobileApp', None), ('Lead', None), ('LeadCleanInfo', None), ('Macro', None), ('MacroInstruction', None), ('Opportunity', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('ProcessInstanceNode', None), ('Product2', None), ('Queue', None), ('QuickText', None), ('Report', None), ('SearchActivity', None), ('SearchPromotionRule', None), ('SelfServiceUser', None), ('Solution', None), ('StreamingChannel', None), ('Task', None), ('TodayGoal', None), ('Topic', None), ('User', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserProvAccount', None), ('UserProvAccountStaging', None), ('UserProvisioningLog', None), ('UserProvisioningRequest', None), ('UserProvMockTarget', None), ('WorkOrder', None), ('WorkOrderLineItem', None)], blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, related_name='name_userrole_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='name_recordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, related_name='name_profile_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    username = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Name'
        verbose_name = 'Name'
        verbose_name_plural = 'Names'
        # keyPrefix = 'None'



class NamedCredential(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='namedcredential_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='namedcredential_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    endpoint = models.TextField(verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    principal_type = models.CharField(max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    callout_options_generate_authorization_header = models.BooleanField(verbose_name='GenerateAuthorizationHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_header = models.BooleanField(verbose_name='AllowMergeFieldsInHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_body = models.BooleanField(verbose_name='AllowMergeFieldsInBody', sf_read_only=models.READ_ONLY)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'NamedCredential'
        verbose_name = 'Named Credential'
        verbose_name_plural = 'Named Credentials'
        # keyPrefix = '0XA'



class Note(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Contact, Contract, Lead, Opportunity, Order, Product2, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    title = models.CharField(max_length=80)
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    body = models.TextField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='note_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='note_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='note_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Note'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '002'



class NoteAndAttachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_note = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Contact, Contract, Lead, Opportunity, Order, Product2, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_private = models.BooleanField(verbose_name='Private', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_owner_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'NoteAndAttachment'
        verbose_name = 'Note and Attachment'
        verbose_name_plural = 'Notes and Attachments'
        # keyPrefix = 'None'



class OauthToken(models.Model):
    access_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    request_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_name = models.CharField(max_length=255, verbose_name='Application Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    use_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    delete_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_menu_item = models.ForeignKey(AppMenuItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OauthToken'
        verbose_name = 'Oauth Token'
        verbose_name_plural = 'Oauth Tokens'
        # keyPrefix = '0CQ'



class ObjectPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('AccountBrand', None), ('AccountRelationship', None), ('ActionPlan', None), ('ActionPlanTemplate', None), ('ActiveScratchOrg', None), ('AddOnDefinition', None), ('Address', None), ('AggregationRow', None), ('Asset', None), ('Cadence', None), ('CadenceStep', None), ('CadenceStepTracker', None), ('CadenceTracker', None), ('Campaign', None), ('CareDiagnosis', None), ('CarePreauth', None), ('CarePreauthItem', None), ('CareRequest', None), ('CareRequestDrug', None), ('CareRequestItem', None), ('Case', None), ('Certification', None), ('CertificationDef', None), ('CertificationSectionDef', None), ('CertificationStep', None), ('CertificationStepDef', None), ('ChannelProgram', None), ('ChannelProgramLevel', None), ('ChannelProgramMember', None), ('CloudServiceProvider', None), ('CloudServiceProviderApi', None), ('ConsumptionSchedule', None), ('Contact', None), ('ContactEmail', None), ('ContactPhone', None), ('ContactRequest', None), ('ContactWeb', None), ('Contract', None), ('ContractLineItem', None), ('CoverageBenefit', None), ('CoverageBenefitItem', None), ('DandBCompany', None), ('DataSharingCustomerLocal', None), ('Document', None), ('DuplicateRecordSet', None), ('EditionDefinition', None), ('Employee', None), ('EngagementProgram', None), ('EngagementProgramNode', None), ('EngagementProgramVersion', None), ('Entitlement', None), ('EntitlementContact', None), ('EnvironmentHubInvitation', None), ('EnvironmentHubMember', None), ('FtestAccountChild', None), ('FtestChild', None), ('FtestConcrete', None), ('FtestConcrete2', None), ('FtestConcrete3', None), ('FtestConcrete4', None), ('FtestConcrete5', None), ('FtestConcrete6', None), ('FtestConcrete7', None), ('FtestConcrete8', None), ('FtestConcreteNoDefault', None), ('FtestConcreteNoDefault2', None), ('FtestConcreteNoDefault3', None), ('FtestConcreteNoSup', None), ('FtestConcreteNoSup2', None), ('FtestConcreteNoSup3', None), ('FtestError', None), ('FtestErrorChild', None), ('FtestGrandChild', None), ('FtestHiddenName', None), ('FtestMain', None), ('FtestOffCoreRecord', None), ('FtestPerson', None), ('FtestVirtualMain', None), ('Goal', None), ('GoalLink', None), ('Idea', None), ('IdeaTheme', None), ('IdentityDocument', None), ('IncludedLicenseDefinition', None), ('Individual', None), ('Lead', None), ('LicensingError', None), ('LicensingRequest', None), ('LiveAgentSession', None), ('LiveChatTranscript', None), ('LiveChatVisitor', None), ('Location', None), ('Macro', None), ('MaintenancePlan', None), ('ManagementAddOnLicense', None), ('ManagementEditionLicense', None), ('ManagementPlatformLicense', None), ('ManagementUserLicense', None), ('MemberPlan', None), ('MessagingEndUser', None), ('MessagingSession', None), ('Metric', None), ('MetricDataLink', None), ('MyCustomObject', None), ('NamespaceRegistry', None), ('OperatingHours', None), ('Opportunity', None), ('Order', None), ('OrderDeliveryGroup', None), ('OrderDeliveryGroupLine', None), ('OrderDeliveryMethod', None), ('OrderPriceAdjustDistrLine', None), ('OrgSnapshot', None), ('PartnerFundAllocation', None), ('PartnerFundClaim', None), ('PartnerFundRequest', None), ('PartnerMarketingBudget', None), ('PersonEducation', None), ('PersonEmployment', None), ('PersonList', None), ('PlanBenefit', None), ('PlanBenefitItem', None), ('PlatformLicenseDefinition', None), ('Pricebook2', None), ('Product2', None), ('ProductItem', None), ('ProductRequest', None), ('ProductTransfer', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PurchaserPlan', None), ('PurchaserPlanAssn', None), ('PushTopic', None), ('Question', None), ('QuickText', None), ('Quote', None), ('RegisteredMobileDevice', None), ('ReturnOrder', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ScratchOrgInfo', None), ('ServiceAppointment', None), ('ServiceContract', None), ('ServiceCrew', None), ('ServiceResource', None), ('ServiceTerritory', None), ('ServiceTerritoryWorkType', None), ('SettingUsageDefinition', None), ('SettingUsageMap', None), ('ShapeRepresentation', None), ('Shipment', None), ('SignupRequest', None), ('SocialPost', None), ('Solution', None), ('SOSSession', None), ('StreamingChannel', None), ('Survey', None), ('SurveyInvitation', None), ('SurveyResponse', None), ('SurveySubject', None), ('Tenant', None), ('TenantParameterMap', None), ('TimeSheet', None), ('UsageEntitlement', None), ('UsageFactor', None), ('UserLicenseDefinition', None), ('WorkCapacityLimit', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkGoal', None), ('WorkGoalCollaborator', None), ('WorkGoalLink', None), ('WorkOrder', None), ('WorkPerformanceCycle', None), ('WorkReward', None), ('WorkRewardFund', None), ('WorkRewardFundType', None), ('WorkType', None), ('WorkTypeGroup', None), ('WorkUpgradeAction', None), ('WorkUpgradeCustomer', None), ('WorkUpgradeUser', None)])
    permissions_create = models.BooleanField(verbose_name='Create Records')
    permissions_read = models.BooleanField(verbose_name='Read Records')
    permissions_edit = models.BooleanField(verbose_name='Edit Records')
    permissions_delete = models.BooleanField(verbose_name='Delete Records')
    permissions_view_all_records = models.BooleanField(verbose_name='Read All Records')
    permissions_modify_all_records = models.BooleanField(verbose_name='Edit All Records')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='objectpermissions_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='objectpermissions_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ObjectPermissions'
        verbose_name = 'Object Permissions'
        verbose_name_plural = 'Object Permissions'
        # keyPrefix = '110'



class OpenActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Not Started', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey(EmailMessage, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpenActivity'
        verbose_name = 'Open Activity'
        verbose_name_plural = 'Open Activities'
        # keyPrefix = 'None'



class Opportunity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    name = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    stage_name = models.CharField(max_length=40, verbose_name='Stage', choices=[('Prospecting', 'Prospecting'), ('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Value Proposition', 'Value Proposition'), ('Id. Decision Makers', 'Id. Decision Makers'), ('Perception Analysis', 'Perception Analysis'), ('Proposal/Price Quote', 'Proposal/Price Quote'), ('Negotiation/Review', 'Negotiation/Review'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Expected Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_opportunity_quantity = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Quantity', blank=True, null=True)
    close_date = models.DateField()
    type = models.CharField(max_length=40, verbose_name='Opportunity Type', choices=[('Existing Customer - Upgrade', 'Existing Customer - Upgrade'), ('Existing Customer - Replacement', 'Existing Customer - Replacement'), ('Existing Customer - Downgrade', 'Existing Customer - Downgrade'), ('New Customer', 'New Customer')], blank=True, null=True)
    next_step = models.CharField(max_length=255, blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Web', 'Web'), ('Phone Inquiry', 'Phone Inquiry'), ('Partner Referral', 'Partner Referral'), ('Purchased List', 'Purchased List'), ('Other', 'Other')], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, blank=True, null=True)
    has_opportunity_line_item = models.BooleanField(verbose_name='Has Line Item', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_quarter = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_year = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal = models.CharField(max_length=6, verbose_name='Fiscal Period', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_open_activity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_overdue_task = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    delivery_installation_status = models.CharField(custom=True, max_length=255, verbose_name='Delivery/Installation Status', choices=[('In progress', 'In progress'), ('Yet to begin', 'Yet to begin'), ('Completed', 'Completed')], blank=True, null=True)
    tracking_number = models.CharField(custom=True, max_length=12, blank=True, null=True)
    order_number = models.CharField(custom=True, max_length=8, blank=True, null=True)
    current_generators = models.CharField(custom=True, max_length=100, verbose_name='Current Generator(s)', blank=True, null=True)
    main_competitors = models.CharField(custom=True, max_length=100, verbose_name='Main Competitor(s)', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Opportunity'
        verbose_name = 'Opportunity'
        verbose_name_plural = 'Opportunities'
        # keyPrefix = '006'



class OpportunityCompetitor(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    competitor_name = models.CharField(max_length=40, blank=True, null=True)
    strengths = models.CharField(max_length=1000, blank=True, null=True)
    weaknesses = models.CharField(max_length=1000, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycompetitor_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycompetitor_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityCompetitor'
        verbose_name = 'Opportunity: Competitor'
        verbose_name_plural = 'Opportunity: Competitor'
        # keyPrefix = '00J'



class OpportunityContactRole(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityContactRole'
        verbose_name = 'Opportunity Contact Role'
        verbose_name_plural = 'Opportunity Contact Role'
        # keyPrefix = '00K'



class OpportunityFeed(models.Model):
    parent = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunityfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunityfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFeed'
        verbose_name = 'Opportunity Feed'
        verbose_name_plural = 'Opportunity Feed'
        # keyPrefix = 'None'



class OpportunityFieldHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Amount', 'Amount'), ('CloseDate', 'Close Date'), ('Contract', 'Contract'), ('created', 'Created.'), ('opportunityCreatedFromLead', 'Created by lead convert'), ('CurrentGenerators__c', 'Current Generator(s)'), ('DeliveryInstallationStatus__c', 'Delivery/Installation Status'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('ForecastCategoryName', 'Forecast Category'), ('LeadSource', 'Lead Source'), ('MainCompetitors__c', 'Main Competitor(s)'), ('NextStep', 'Next Step'), ('Name', 'Opportunity Name'), ('Owner', 'Opportunity Owner'), ('OrderNumber__c', 'Order Number'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Campaign', 'Primary Campaign Source'), ('IsPrivate', 'Private'), ('Probability', 'Probability (%)'), ('TotalOpportunityQuantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StageName', 'Stage'), ('TrackingNumber__c', 'Tracking Number'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFieldHistory'
        verbose_name = 'Opportunity Field History'
        verbose_name_plural = 'Opportunity Field History'
        # keyPrefix = 'None'



class OpportunityHistory(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    stage_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Prospecting', 'Prospecting'), ('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Value Proposition', 'Value Proposition'), ('Id. Decision Makers', 'Id. Decision Makers'), ('Perception Analysis', 'Perception Analysis'), ('Proposal/Price Quote', 'Proposal/Price Quote'), ('Negotiation/Review', 'Negotiation/Review'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    close_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_category = models.CharField(max_length=40, verbose_name='To ForecastCategory', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityHistory'
        verbose_name = 'Opportunity History'
        verbose_name_plural = 'Opportunity History'
        # keyPrefix = '008'



class OpportunityLineItem(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=376, verbose_name='Opportunity Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Sales Price', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(verbose_name='Date', blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitylineitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitylineitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityLineItem'
        verbose_name = 'Opportunity Product'
        verbose_name_plural = 'Opportunity Product'
        # keyPrefix = '00k'



class OpportunityPartner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitypartner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitypartner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityPartner'
        verbose_name = 'Opportunity Partner'
        verbose_name_plural = 'Opportunity Partner'
        # keyPrefix = 'None'



class OpportunityShare(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    opportunity_access_level = models.CharField(max_length=40, verbose_name='Opportunity Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityShare'
        verbose_name = 'Opportunity Share'
        verbose_name_plural = 'Opportunity Share'
        # keyPrefix = '00t'



class OpportunityStage(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    default_probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitystage_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitystage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityStage'
        verbose_name = 'Opportunity Stage'
        verbose_name_plural = 'Opportunity Stage'
        # keyPrefix = '01J'



class Order(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    contract = models.ForeignKey(Contract, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    original_order = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    effective_date = models.DateField(verbose_name='Order Start Date')
    end_date = models.DateField(verbose_name='Order End Date', blank=True, null=True)
    is_reduction_order = models.BooleanField(verbose_name='Reduction Order', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, choices=[('Draft', 'Draft'), ('Activated', 'Activated')])
    description = models.TextField(blank=True, null=True)
    customer_authorized_by = models.ForeignKey(Contact, models.DO_NOTHING, related_name='order_customerauthorizedby_set', blank=True, null=True)
    customer_authorized_date = models.DateField(blank=True, null=True)
    company_authorized_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_companyauthorizedby_set', blank=True, null=True)
    company_authorized_date = models.DateField(blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Order Type', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='Order Name', blank=True, null=True)
    po_date = models.DateField(verbose_name='PO Date', blank=True, null=True)
    po_number = models.CharField(max_length=80, verbose_name='PO Number', blank=True, null=True)
    order_reference_number = models.CharField(max_length=80, blank=True, null=True)
    bill_to_contact = models.ForeignKey(Contact, models.DO_NOTHING, related_name='order_billtocontact_set', blank=True, null=True)
    ship_to_contact = models.ForeignKey(Contact, models.DO_NOTHING, related_name='order_shiptocontact_set', blank=True, null=True)
    activated_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_activatedby_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.NOT_CREATEABLE, choices=[('D', 'Draft'), ('A', 'Activated'), ('C', 'Cancelled'), ('E', 'Expired')])
    order_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    total_amount = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Order Amount', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Order'
        verbose_name = 'Order'
        verbose_name_plural = 'Orders'
        # keyPrefix = '801'



class OrderFeed(models.Model):
    parent = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderFeed'
        verbose_name = 'Order Feed'
        verbose_name_plural = 'Order Feed'
        # keyPrefix = 'None'



class OrderHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('BillToContact', 'Bill To Contact'), ('CompanyAuthorizedBy', 'Company Authorized By'), ('CompanyAuthorizedDate', 'Company Authorized Date'), ('Contract', 'Contract Number'), ('created', 'Created.'), ('CustomerAuthorizedBy', 'Customer Authorized By'), ('CustomerAuthorizedDate', 'Customer Authorized Date'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('Opportunity', 'Opportunity'), ('orderActivated', 'Order Activated.'), ('orderApproved', 'Order Approved.'), ('orderCancelled', 'Order Canceled.'), ('orderDeactivated', 'Order Deactivated.'), ('EndDate', 'Order End Date'), ('orderExpired', 'Order Expired.'), ('Name', 'Order Name'), ('Owner', 'Order Owner'), ('OrderReferenceNumber', 'Order Reference Number'), ('EffectiveDate', 'Order Start Date'), ('orderSubmitted', 'Order Submitted.'), ('Type', 'Order Type'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PoDate', 'PO Date'), ('PoNumber', 'PO Number'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('ShipToContact', 'Ship To Contact'), ('Status', 'Status'), ('StatusCode', 'Status Category')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderHistory'
        verbose_name = 'Order History'
        verbose_name_plural = 'Order History'
        # keyPrefix = 'None'



class OrderItem(models.Model):
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    original_order_item = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    available_quantity = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=18, decimal_places=2)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(verbose_name='Start Date', blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    order_item_number = models.CharField(max_length=30, verbose_name='Order Product Number', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OrderItem'
        verbose_name = 'Order Product'
        verbose_name_plural = 'Order Products'
        # keyPrefix = '802'



class OrderItemFeed(models.Model):
    parent = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemFeed'
        verbose_name = 'Order Product Feed'
        verbose_name_plural = 'Order Product Feed'
        # keyPrefix = 'None'



class OrderItemHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order_item = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('Description', 'Line Description'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ServiceDate', 'Start Date'), ('UnitPrice', 'Unit Price')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemHistory'
        verbose_name = 'Order Product History'
        verbose_name_plural = 'Order Product History'
        # keyPrefix = 'None'



class OrderShare(models.Model):
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    order_access_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, verbose_name='Apex Sharing Reason ID', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OrderShare'
        verbose_name = 'Order Share'
        verbose_name_plural = 'Order Share'
        # keyPrefix = '0Fy'



class OrgWideEmailAddress(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orgwideemailaddress_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orgwideemailaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    address = models.EmailField(verbose_name='Email Address')
    display_name = models.CharField(max_length=300)
    is_allow_all_profiles = models.BooleanField(verbose_name='Allow All Profiles', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'OrgWideEmailAddress'
        verbose_name = 'Organization-wide From Email Address'
        verbose_name_plural = 'Organization-wide From Email Addresses'
        # keyPrefix = '0D2'



class Organization(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE)
    division = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    street = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    primary_contact = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    default_locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', sf_read_only=models.NOT_CREATEABLE, choices=[('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Bosnia & Herzegovina)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('yo_BJ', 'Yoruba (Benin)')])
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', sf_read_only=models.NOT_CREATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', sf_read_only=models.NOT_CREATEABLE, default=False)
    receives_admin_info_emails = models.BooleanField(verbose_name='Info Emails Admin', sf_read_only=models.NOT_CREATEABLE, default=False)
    preferences_require_opportunity_products = models.BooleanField(verbose_name='RequireOpportunityProducts', sf_read_only=models.NOT_CREATEABLE)
    preferences_transaction_security_policy = models.BooleanField(verbose_name='TransactionSecurityPolicy', sf_read_only=models.NOT_CREATEABLE)
    preferences_terminate_oldest_session = models.BooleanField(verbose_name='TerminateOldestSession', sf_read_only=models.NOT_CREATEABLE)
    fiscal_year_start_month = models.IntegerField(verbose_name='Fiscal Year Starts In', sf_read_only=models.READ_ONLY, blank=True, null=True)
    uses_start_date_as_fiscal_year_name = models.BooleanField(verbose_name='Fiscal Year Name by Start', sf_read_only=models.READ_ONLY, default=False)
    default_account_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_contact_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByParent', 'Controlled By Parent')], blank=True, null=True)
    default_opportunity_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_lead_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_case_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_calendar_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='HideDetailsInsert', choices=[('HideDetails', 'Hide Details'), ('HideDetailsInsert', 'Hide Details and Add Events'), ('ShowDetails', 'Show Details'), ('ShowDetailsInsert', 'Show Details and Add Events'), ('AllowEdits', 'Full Access')], blank=True, null=True)
    default_pricebook_access = models.CharField(max_length=40, verbose_name='Default Price Book Access', sf_read_only=models.READ_ONLY, choices=[('None', 'No Access'), ('Read', 'View Only'), ('ReadSelect', 'Use')], blank=True, null=True)
    default_campaign_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    compliance_bcc_email = models.EmailField(verbose_name='Compliance BCC Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_skin = models.CharField(max_length=40, verbose_name='UI Skin', sf_read_only=models.NOT_CREATEABLE, default='Theme3', choices=[('Theme1', 'salesforce.com Classic'), ('Theme2', 'Salesforce'), ('PortalDefault', 'Portal Default'), ('Webstore', 'Webstore'), ('Theme3', 'Aloha')], blank=True, null=True)
    signup_country_iso_code = models.CharField(max_length=2, verbose_name='Signup Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trial_expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    organization_type = models.CharField(max_length=40, verbose_name='Edition', sf_read_only=models.READ_ONLY, choices=[('Team Edition', None), ('Professional Edition', None), ('Enterprise Edition', None), ('Developer Edition', None), ('Personal Edition', None), ('Unlimited Edition', None), ('Contact Manager Edition', None), ('Base Edition', None)], blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    instance_name = models.CharField(max_length=5, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_sandbox = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    web_to_case_default_origin = models.CharField(max_length=40, verbose_name='Web to Cases Default Origin', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    monthly_page_views_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_read_only = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='organization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='organization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'



class OutgoingEmail(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    validated_from_address = models.CharField(max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, choices=[('jbaack@accelerantsys.com', 'Jim Baack <jbaack@accelerantsys.com>')], blank=True, null=True)
    to_address = models.CharField(max_length=4000, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    cc_address = models.CharField(max_length=4000, verbose_name='CC', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    bcc_address = models.CharField(max_length=4000, verbose_name='BCC', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    subject = models.CharField(max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    text_body = models.TextField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    html_body = models.TextField(verbose_name='HTML Body', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem]
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Contact, Lead]
    class Meta(models.Model.Meta):
        db_table = 'OutgoingEmail'
        verbose_name = 'Outgoing Email'
        verbose_name_plural = 'Outgoing Emails'
        # keyPrefix = '0Q1'



class OutgoingEmailRelation(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    outgoing_email_id = models.CharField(max_length=255, verbose_name='Outgoing Email ID', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    relation_address = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OutgoingEmailRelation'
        verbose_name = 'Outgoing Email Relation'
        verbose_name_plural = 'Outgoing Email Relations'
        # keyPrefix = '0Q3'



class OwnedContentDocument(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_owner_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_name = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_data_source_type = models.CharField(max_length=80, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('Datacloud', None), ('Datajourney', None), ('Identity', None), ('OData', None), ('OData4', None), ('OpenSearch', None), ('outgoingemail', None), ('SfdcOrg', None), ('SimpleURL', None), ('Wrapper', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OwnedContentDocument'
        verbose_name = 'User Owned File'
        verbose_name_plural = 'User Owned File'
        # keyPrefix = 'None'



class OwnerChangeOptionInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    default_value = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OwnerChangeOptionInfo'
        verbose_name = 'Change Owner Option Info'
        verbose_name_plural = 'Change Owner Options Info'
        # keyPrefix = '0Cy'



class PackageLicense(models.Model):
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Trial', 'Trial'), ('Free', 'Free'), ('Active', 'Active')])
    is_provisioned = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    allowed_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PackageLicense'
        verbose_name = 'Package License'
        verbose_name_plural = 'Package License'
        # keyPrefix = '050'



class Partner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_from = models.ForeignKey(Account, models.DO_NOTHING, related_name='partner_accountfrom_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, related_name='partner_accountto_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Partner'
        verbose_name = 'Partner'
        verbose_name_plural = 'Partner'
        # keyPrefix = '00I'



class PartnerRole(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    reverse_role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partnerrole_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partnerrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PartnerRole'
        verbose_name = 'Partner Role Value'
        verbose_name_plural = 'Partner Role Value'
        # keyPrefix = 'None'



class Period(models.Model):
    fiscal_year_settings = models.ForeignKey(FiscalYearSettings, models.DO_NOTHING, related_name='period_fiscalyearsettings_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True, null=True)
    start_date = models.DateField(sf_read_only=models.READ_ONLY)
    end_date = models.DateField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_forecast_period = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    quarter_label = models.CharField(max_length=40, verbose_name='Quarter Name', sf_read_only=models.READ_ONLY, default='Spring', choices=[('Spring', 'Spring'), ('Summer', 'Summer'), ('Fall', 'Fall'), ('Winter', 'Winter')], blank=True, null=True)
    period_label = models.CharField(max_length=40, verbose_name='Period Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fully_qualified_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Period'
        verbose_name = 'Period'
        verbose_name_plural = 'Period'
        # keyPrefix = '026'



class PermissionSet(models.Model):
    name = models.CharField(max_length=80, verbose_name='Permission Set Name')
    label = models.CharField(max_length=80, verbose_name='Permission Set Label')
    license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [PermissionSetLicense, UserLicense]
    profile = models.ForeignKey('Profile', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_owned_by_profile = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_custom = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    permissions_email_single = models.BooleanField(verbose_name='Send Email')
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email')
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks')
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events')
    permissions_export_report = models.BooleanField(verbose_name='Export Reports')
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts')
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export')
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users')
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates')
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data')
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases')
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists')
    permissions_edit_knowledge = models.BooleanField(verbose_name='Manage Articles')
    permissions_manage_knowledge = models.BooleanField(verbose_name='Manage Salesforce Knowledge')
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions')
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application')
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields')
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports')
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration')
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record')
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder')
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts')
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders')
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads')
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads')
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads')
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data')
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents')
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data')
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads')
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates')
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User')
    permissions_manage_encryption_keys = models.BooleanField(verbose_name='Manage Encryption Keys')
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts')
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter')
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests')
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps')
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder')
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories')
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads')
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires')
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards')
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders')
    permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages')
    permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages')
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups')
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price')
    permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages')
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete')
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions')
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers')
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms')
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals')
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations')
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages')
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations')
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries')
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup')
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories')
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex')
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations')
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled')
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types')
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments')
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases')
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content')
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries')
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions')
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties')
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files')
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync')
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots')
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports')
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays')
    permissions_manage_dynamic_dashboards = models.BooleanField(verbose_name='Manage Dynamic Dashboards')
    permissions_custom_sidebar_on_all_pages = models.BooleanField(verbose_name='Show Custom Sidebar On All Pages')
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow')
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards")
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter')
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users')
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License')
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds')
    permissions_manage_knowledge_import_export = models.BooleanField(verbose_name='Manage Knowledge Article Import/Export')
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates')
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration')
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages')
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option')
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links')
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins')
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files')
    permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities')
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers')
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows')
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards')
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders')
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders')
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders')
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports')
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders')
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders')
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders')
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards')
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports')
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users')
    permissions_allow_universal_search = models.BooleanField(verbose_name='Knowledge One')
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub')
    permissions_work_calibration_user = models.BooleanField(verbose_name='Enable Work.com Calibration')
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views')
    permissions_work_dot_com_user_perm = models.BooleanField(verbose_name='Enable Work.com')
    permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities')
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console')
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins')
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics')
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics')
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics')
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics')
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features')
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect')
    permissions_allow_view_knowledge = models.BooleanField(verbose_name='Allow View Knowledge')
    permissions_manage_search_promotion_rules = models.BooleanField(verbose_name='Manage Promoted Search Terms')
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps')
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link')
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets')
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets')
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles')
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses')
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing')
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users')
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies')
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies')
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions')
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups')
    permissions_modify_secure_agents = models.BooleanField(verbose_name='Modify Secure Agents')
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API')
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User')
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations')
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo")
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records')
    permissions_share_internal_articles = models.BooleanField(verbose_name='Share internal Knowledge articles externally')
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations')
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails')
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts')
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own')
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects')
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface')
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI')
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce')
    permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users')
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics')
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports')
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards')
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence')
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment')
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment')
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads')
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role')
    permissions_access_cmc = models.BooleanField(db_column='PermissionsAccessCMC', verbose_name='Access Community Management')
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check')
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check')
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities')
    description = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_activation_required = models.BooleanField(verbose_name='Session Activation Required', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSet'
        verbose_name = 'Permission Set'
        verbose_name_plural = 'Permission Sets'
        # keyPrefix = '0PS'



class PermissionSetAssignment(models.Model):
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    assignee = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetAssignment'
        verbose_name = 'Permission Set Assignment'
        verbose_name_plural = 'Permission Set Assignments'
        # keyPrefix = '0Pa'



class PermissionSetLicense(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Permission Set License Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    permission_set_license_key = models.CharField(max_length=81, sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    expiration_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    maximum_permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    maximum_permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    maximum_permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_knowledge = models.BooleanField(verbose_name='Manage Articles', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_knowledge = models.BooleanField(verbose_name='Manage Salesforce Knowledge', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    maximum_permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_encryption_keys = models.BooleanField(verbose_name='Manage Encryption Keys', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    maximum_permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    maximum_permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    maximum_permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_dynamic_dashboards = models.BooleanField(verbose_name='Manage Dynamic Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_sidebar_on_all_pages = models.BooleanField(verbose_name='Show Custom Sidebar On All Pages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    maximum_permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_flow_uflrequired = models.BooleanField(db_column='MaximumPermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_knowledge_import_export = models.BooleanField(verbose_name='Manage Knowledge Article Import/Export', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_email_ic = models.BooleanField(db_column='MaximumPermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links', sf_read_only=models.READ_ONLY)
    maximum_permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_universal_search = models.BooleanField(verbose_name='Knowledge One', sf_read_only=models.READ_ONLY)
    maximum_permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    maximum_permissions_work_calibration_user = models.BooleanField(verbose_name='Enable Work.com Calibration', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    maximum_permissions_work_dot_com_user_perm = models.BooleanField(verbose_name='Enable Work.com', sf_read_only=models.READ_ONLY)
    maximum_permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities', sf_read_only=models.READ_ONLY)
    maximum_permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    maximum_permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_view_knowledge = models.BooleanField(verbose_name='Allow View Knowledge', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_search_promotion_rules = models.BooleanField(verbose_name='Manage Promoted Search Terms', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_secure_agents = models.BooleanField(verbose_name='Modify Secure Agents', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    maximum_permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    maximum_permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    maximum_permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    maximum_permissions_share_internal_articles = models.BooleanField(verbose_name='Share internal Knowledge articles externally', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    maximum_permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    maximum_permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    maximum_permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.READ_ONLY)
    maximum_permissions_access_cmc = models.BooleanField(db_column='MaximumPermissionsAccessCMC', verbose_name='Access Community Management', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicense'
        verbose_name = 'Permission Set License'
        verbose_name_plural = 'Permission Set Licenses'
        # keyPrefix = '0PL'



class PermissionSetLicenseAssign(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey(PermissionSetLicense, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    assignee = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_assignee_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicenseAssign'
        verbose_name = 'Permission Set License Assignment'
        verbose_name_plural = 'Permission Set License Assignments'
        # keyPrefix = '2LA'



class PicklistValueInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value = models.CharField(max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default_value = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    valid_for = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_particle_id = models.CharField(max_length=150, verbose_name='Entity Particle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PicklistValueInfo'
        verbose_name = 'Picklist Value Info'
        verbose_name_plural = 'Picklist Value Info'
        # keyPrefix = '4pv'



class PlatformAction(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Platform Action ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('QuickAction', 'Quick Action'), ('StandardButton', 'Standard Button'), ('CustomButton', 'Custom Button'), ('ProductivityAction', 'Productivity (Highlight) Action'), ('ActionLink', 'ActionLink'), ('InvocableAction', 'Invocable Action')])
    subtype = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, verbose_name='API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Describe', 'Target is for describing the action'), ('Invoke', 'Target is for invoking the action'), ('Visualforce', 'Target is for a visualforce page')], blank=True, null=True)
    confirmation_message = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_id = models.CharField(max_length=18, verbose_name='Group ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    is_group_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    category = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')], blank=True, null=True)
    invocation_status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', 'New'), ('Pending', 'Pending'), ('Successful', 'Successful'), ('Failed', 'Failed')], blank=True, null=True)
    invoked_by_user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_entity = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    action_list_context = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('ListView', 'Header for a list view'), ('RelatedList', 'Header for a related list'), ('ListViewRecord', 'View for a list view record'), ('RelatedListRecord', 'View for a related list record'), ('Record', 'View page for a record'), ('FeedElement', 'An element in the Feed'), ('Chatter', 'Chatter specific view'), ('Global', 'View page for Global'), ('Flexipage', 'View for Lightning Page'), ('MruList', 'Header for an MRU list'), ('MruRow', 'View for a MRU list record'), ('RecordEdit', 'Edit page for a record'), ('Photo', 'View for an entity photo detail component'), ('BannerPhoto', 'View for an entity Banner photo detail component'), ('ObjectHomeChart', 'View for object home charts'), ('ListViewDefinition', 'View for a list view definition'), ('Dockable', 'View for dockable actions'), ('Lookup', 'View for lookup'), ('Assistant', 'View for Assistant'), ('ActionDefinition', 'Definition for runtime visible actions')], blank=True, null=True)
    device_format = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='Phone', choices=[('Phone', 'Phone'), ('Tablet', 'Tablet'), ('Desktop', 'Desktop'), ('Aloha', 'Aloha')], blank=True, null=True)
    icon_content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_height = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_width = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(verbose_name='Icon URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mass_action = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_source_entity = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    section = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Page', 'Page Actions'), ('ActivityComposer', 'Activity Composer Actions'), ('CollaborateComposer', 'Collaboration Composer Actions'), ('SingleActionLinks', 'Single Action Links')], blank=True, null=True)
    related_list_record_id = models.CharField(max_length=255, verbose_name='Related List Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformAction'
        verbose_name = 'Platform Action'
        verbose_name_plural = 'Platform Actions'
        # keyPrefix = '0JV'



class PlatformCachePartition(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    is_default_partition = models.BooleanField(verbose_name='Default Partition', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'PlatformCachePartition'
        verbose_name = 'Platform Cache Partition'
        verbose_name_plural = 'Platform Cache Partitions'
        # keyPrefix = '0Er'



class PlatformCachePartitionType(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartitiontype_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartitiontype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    platform_cache_partition = models.ForeignKey(PlatformCachePartition, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    cache_type = models.CharField(max_length=255, choices=[('Session', None), ('Organization', None)])
    allocated_capacity = models.IntegerField(blank=True, null=True)
    allocated_purchased_capacity = models.IntegerField(verbose_name='Allocated Namespaced Purchased Capacity', blank=True, null=True)
    allocated_trial_capacity = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformCachePartitionType'
        verbose_name = 'Platform Cache Partition Type'
        verbose_name_plural = 'Platform Cache Partition Types'
        # keyPrefix = '0Ev'



class Pricebook2(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Price Book Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebook2_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebook2_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    is_standard = models.BooleanField(verbose_name='Is Standard Price Book', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2'
        verbose_name = 'Price Book'
        verbose_name_plural = 'Price Books'
        # keyPrefix = '01s'



class Pricebook2History(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('IsArchived', 'Archived'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('IsStandard', 'Is Standard Price Book'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Price Book Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2History'
        verbose_name = 'Price Book History'
        verbose_name_plural = 'Price Book History'
        # keyPrefix = 'None'



class PricebookEntry(models.Model):
    name = models.CharField(max_length=255, verbose_name='Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='List Price')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    use_standard_price = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebookentry_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebookentry_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PricebookEntry'
        verbose_name = 'Price Book Entry'
        verbose_name_plural = 'Price Book Entries'
        # keyPrefix = '01u'



class ProcessDefinition(models.Model):
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=40, verbose_name='Process Definition Type', sf_read_only=models.READ_ONLY, default='Approval', choices=[('Approval', 'Approval Process'), ('State', 'State-based Process')])
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('Campaign', None), ('Case', None), ('Contact', None), ('Contract', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('ExchangeUserMapping', None), ('Goal', None), ('KnowledgeArticle', None), ('KnowledgeArticleVersion', None), ('Lead', None), ('Metric', None), ('Opportunity', None), ('Order', None), ('OrgDeleteRequest', None), ('Product2', None), ('Solution', None), ('StreamingChannel', None), ('UserProvisioningRequest', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPerformanceCycle', None)])
    lock_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Total', None), ('Admin', None), ('Owner', None), ('Workitem', None), ('Node', None), ('none', None)])
    state = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Obsolete', 'Obsolete')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processdefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processdefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessDefinition'
        verbose_name = 'Process Definition'
        verbose_name_plural = 'Process Definition'
        # keyPrefix = '04a'



class ProcessInstance(models.Model):
    process_definition = models.ForeignKey(ProcessDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    target_object = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Campaign, Case, Contact, Contract, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, Lead, Opportunity, Order, Product2, Solution, StreamingChannel, UserProvisioningRequest, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')])
    completed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_actor = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_lastactor_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    submitted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_submittedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstance'
        verbose_name = 'Process Instance'
        verbose_name_plural = 'Process Instance'
        # keyPrefix = '04g'



class ProcessInstanceHistory(models.Model):
    is_pending = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    target_object = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contact, Contract, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, Lead, Opportunity, Order, Product2, Solution, StreamingChannel, UserProvisioningRequest, WorkOrder, WorkOrderLineItem]
    step_status = models.CharField(max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True, null=True)
    process_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancehistory_originalactor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancehistory_actor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    reminders_sent = models.IntegerField(verbose_name='RemindersSent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    comments = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceHistory'
        verbose_name = 'Process Instance History'
        verbose_name_plural = 'Process Instance History'
        # keyPrefix = 'None'



class ProcessInstanceNode(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    process_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    node_status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True, null=True)
    completed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_actor = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_lastactor_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    process_node_name = models.CharField(max_length=255, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceNode'
        verbose_name = 'Process Instance Node'
        verbose_name_plural = 'Process Instance Node'
        # keyPrefix = '0OO'



class ProcessInstanceStep(models.Model):
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    step_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True, null=True)
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancestep_originalactor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancestep_actor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    comments = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    step_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    elapsed_time_in_days = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceStep'
        verbose_name = 'Process Instance Step'
        verbose_name_plural = 'Process Instance Step'
        # keyPrefix = '04h'



class ProcessInstanceWorkitem(models.Model):
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE)  # Master Detail Relationship *
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstanceworkitem_originalactor_set', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstanceworkitem_actor_set', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User]
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceWorkitem'
        verbose_name = 'Approval Request'
        verbose_name_plural = 'Approval Requests'
        # keyPrefix = '04i'



class ProcessNode(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    process_definition = models.ForeignKey(ProcessDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessNode'
        verbose_name = 'Process Node'
        verbose_name_plural = 'Process Node'
        # keyPrefix = '04b'



class Product2(models.Model):
    name = models.CharField(max_length=255, verbose_name='Product Name')
    product_code = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(verbose_name='Product Description', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    family = models.CharField(max_length=40, verbose_name='Product Family', choices=[('None', 'None')], blank=True, null=True)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, blank=True, null=True)
    external_id = models.CharField(max_length=255, verbose_name='External ID', blank=True, null=True)
    display_url = models.URLField(verbose_name='Display URL', blank=True, null=True)
    quantity_unit_of_measure = models.CharField(max_length=40, choices=[('Each', 'Each')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2'
        verbose_name = 'Product'
        verbose_name_plural = 'Products'
        # keyPrefix = '01t'



class Product2Feed(models.Model):
    parent = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2feed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2feed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2Feed'
        verbose_name = 'Product Feed'
        verbose_name_plural = 'Product Feed'
        # keyPrefix = 'None'



class Product2History(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('created', 'Created.'), ('DisplayUrl', 'Display URL'), ('ExternalDataSource', 'External Data Source'), ('ExternalId', 'External ID'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ProductCode', 'Product Code'), ('Description', 'Product Description'), ('Family', 'Product Family'), ('Name', 'Product Name'), ('StockKeepingUnit', 'Product SKU'), ('QuantityUnitOfMeasure', 'Quantity Unit Of Measure'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2History'
        verbose_name = 'Product History'
        verbose_name_plural = 'Product History'
        # keyPrefix = 'None'



class Profile(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE)
    permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.NOT_CREATEABLE)
    permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.NOT_CREATEABLE)
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.NOT_CREATEABLE)
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_knowledge = models.BooleanField(verbose_name='Manage Articles', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_knowledge = models.BooleanField(verbose_name='Manage Salesforce Knowledge', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.NOT_CREATEABLE)
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.NOT_CREATEABLE)
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.NOT_CREATEABLE)
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.NOT_CREATEABLE)
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_encryption_keys = models.BooleanField(verbose_name='Manage Encryption Keys', sf_read_only=models.NOT_CREATEABLE)
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.NOT_CREATEABLE)
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.NOT_CREATEABLE)
    permissions_install_multiforce = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_publish_multiforce = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_multiforce = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.NOT_CREATEABLE)
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.NOT_CREATEABLE)
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.NOT_CREATEABLE)
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.NOT_CREATEABLE)
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_dynamic_dashboards = models.BooleanField(verbose_name='Manage Dynamic Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_custom_sidebar_on_all_pages = models.BooleanField(verbose_name='Show Custom Sidebar On All Pages', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.NOT_CREATEABLE)
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_knowledge_import_export = models.BooleanField(verbose_name='Manage Knowledge Article Import/Export', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_email_ic = models.BooleanField(db_column='PermissionsAllowEmailIC', verbose_name='Email-Based Identity Verification Option', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links', sf_read_only=models.NOT_CREATEABLE)
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.NOT_CREATEABLE)
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_universal_search = models.BooleanField(verbose_name='Knowledge One', sf_read_only=models.NOT_CREATEABLE)
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.NOT_CREATEABLE)
    permissions_work_calibration_user = models.BooleanField(verbose_name='Enable Work.com Calibration', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.NOT_CREATEABLE)
    permissions_work_dot_com_user_perm = models.BooleanField(verbose_name='Enable Work.com', sf_read_only=models.NOT_CREATEABLE)
    permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities', sf_read_only=models.NOT_CREATEABLE)
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.NOT_CREATEABLE)
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.NOT_CREATEABLE)
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.NOT_CREATEABLE)
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_view_knowledge = models.BooleanField(verbose_name='Allow View Knowledge', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_search_promotion_rules = models.BooleanField(verbose_name='Manage Promoted Search Terms', sf_read_only=models.NOT_CREATEABLE)
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.NOT_CREATEABLE)
    permissions_modify_secure_agents = models.BooleanField(verbose_name='Modify Secure Agents', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.NOT_CREATEABLE)
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.NOT_CREATEABLE)
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.NOT_CREATEABLE)
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.NOT_CREATEABLE)
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.NOT_CREATEABLE)
    permissions_share_internal_articles = models.BooleanField(verbose_name='Share internal Knowledge articles externally', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.NOT_CREATEABLE)
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.NOT_CREATEABLE)
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.NOT_CREATEABLE)
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.NOT_CREATEABLE)
    permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.NOT_CREATEABLE)
    permissions_access_cmc = models.BooleanField(db_column='PermissionsAccessCMC', verbose_name='Access Community Management', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.NOT_CREATEABLE)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'



class Publisher(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Publisher Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=70, verbose_name='Publisher Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=70, verbose_name='Publisher Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_salesforce = models.BooleanField(verbose_name='Is Salesforce the Publisher?', sf_read_only=models.READ_ONLY, default=False)
    major_version = models.IntegerField(verbose_name='Publisher Major Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    minor_version = models.IntegerField(verbose_name='Publisher Minor Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Publisher'
        verbose_name = 'Publisher'
        verbose_name_plural = 'Publishers'
        # keyPrefix = '4pb'



class PushTopic(models.Model):
    name = models.CharField(max_length=25, verbose_name='Topic Name')
    query = models.CharField(max_length=1300, verbose_name='SOQL Query')
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version')
    is_active = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    notify_for_fields = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Select', None), ('Where', None), ('Referenced', None), ('All', None)])
    notify_for_operations = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Create', None), ('Update', None), ('All', None), ('Extended', None)])
    description = models.CharField(max_length=400, blank=True, null=True)
    notify_for_operation_create = models.BooleanField(verbose_name='Create')
    notify_for_operation_update = models.BooleanField(verbose_name='Update')
    notify_for_operation_delete = models.BooleanField(verbose_name='Delete')
    notify_for_operation_undelete = models.BooleanField(verbose_name='Undelete')
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pushtopic_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pushtopic_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PushTopic'
        verbose_name = 'Push Topic'
        verbose_name_plural = 'Push Topics'
        # keyPrefix = '0IF'



class QueueSobject(models.Model):
    queue = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('Goal', None), ('Lead', None), ('Macro', None), ('Metric', None), ('Order', None), ('QuickText', None), ('Scorecard', None), ('UserProvisioningRequest', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkOrder', None), ('WorkPerformanceCycle', None)])
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'QueueSobject'
        verbose_name = 'Queue Sobject'
        verbose_name_plural = 'Queue Sobjects'
        # keyPrefix = '03g'



class QuickText(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Quick Text Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quicktext_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quicktext_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    message = models.TextField()
    category = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Greetings', 'Greetings'), ('FAQ', 'FAQ'), ('Closings', 'Closings')], blank=True, null=True)
    channel = models.CharField(max_length=4099, default=models.DEFAULTED_ON_CREATE, choices=[('Email', 'Email'), ('Portal', 'Portal'), ('Phone', 'Phone'), ('Internal', 'Internal'), ('Event', 'Event'), ('Task', 'Task')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickText'
        verbose_name = 'Quick Text'
        verbose_name_plural = 'Quick Text'
        # keyPrefix = '574'



class QuickTextHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    quick_text = models.ForeignKey(QuickText, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Category', 'Category'), ('Channel', 'Channel'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Message', 'Message'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Quick Text Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextHistory'
        verbose_name = 'Quick Text History'
        verbose_name_plural = 'Quick Text History'
        # keyPrefix = 'None'



class QuickTextShare(models.Model):
    parent = models.ForeignKey(QuickText, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextShare'
        verbose_name = 'Quick Text Share'
        verbose_name_plural = 'Quick Text Share'
        # keyPrefix = 'None'



class RecentlyViewed(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Asset', None), ('Campaign', None), ('Case', None), ('CollaborationGroup', None), ('Contact', None), ('ContentDocument', None), ('Contract', None), ('DandBCompany', None), ('Dashboard', None), ('Document', None), ('DuplicateRecordSet', None), ('Idea', None), ('Lead', None), ('ListView', None), ('Macro', None), ('Opportunity', None), ('Order', None), ('Pricebook2', None), ('PricebookEntry', None), ('Product2', None), ('Profile', None), ('QuickText', None), ('Report', None), ('Solution', None), ('StreamingChannel', None), ('Task', None), ('Topic', None), ('User', None), ('UserAppMenuItem', None), ('WorkOrder', None), ('WorkOrderLineItem', None)], blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    language = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RecentlyViewed'
        verbose_name = 'Recently Viewed'
        verbose_name_plural = 'Recently Viewed'
        # keyPrefix = 'None'



class RecordType(models.Model):
    name = models.CharField(max_length=80)
    developer_name = models.CharField(max_length=80, verbose_name='Record Type Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    business_process = models.ForeignKey(BusinessProcess, models.DO_NOTHING, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Announcement', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('CollaborationGroup', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('ComponentResponseCache', None), ('Contact', None), ('ContentFolderDistribution', None), ('ContentVersion', None), ('Contract', None), ('CustomSettingNameIndex', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('Event', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('Goal', None), ('GoalLink', None), ('Idea', None), ('InboundSocialPost', None), ('Lead', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('Metric', None), ('MetricDataLink', None), ('Opportunity', None), ('Order', None), ('OrgDeleteRequest', None), ('PersonalizationResource', None), ('Pricebook2', None), ('Product2', None), ('QuickText', None), ('RecordAction', None), ('RecordOrigin', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SearchActivity', None), ('SearchPromotionRule', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupFlowProgress', None), ('Solution', None), ('SyncTransactionLog', None), ('Task', None), ('TransactionSecurityAction', None), ('TransactionSecurityActionEvent', None), ('UserEmailPreferredPerson', None), ('UserMetrics', None), ('UserNavItem', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPerformanceCycle', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtype_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Types'
        # keyPrefix = '012'



class RelationshipDomain(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Relationship Domain Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_info_id = models.CharField(max_length=70, verbose_name='Relationship Info ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.TextField(verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'RelationshipDomain'
        verbose_name = 'Relationship Domain'
        verbose_name_plural = 'Relationship Domains'
        # keyPrefix = '0Jv'



class RelationshipInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Relationship Info Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.TextField(verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'RelationshipInfo'
        verbose_name = 'Relationship'
        verbose_name_plural = 'Relationships'
        # keyPrefix = '0Ju'



class Report(models.Model):
    owner = models.ForeignKey(Folder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, Organization, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='report_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='report_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=40, verbose_name='Report Name', sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, verbose_name='Report Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_run_date = models.DateTimeField(verbose_name='Last Run', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    format = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Tabular', choices=[('MultiBlock', 'Joined'), ('Matrix', 'Matrix'), ('Summary', 'Summary'), ('Tabular', 'Tabular')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Report'
        verbose_name = 'Report'
        verbose_name_plural = 'Reports'
        # keyPrefix = '00O'



class ReportFeed(models.Model):
    parent = models.ForeignKey(Report, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='reportfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='reportfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ReportFeed'
        verbose_name = 'Report Feed'
        verbose_name_plural = 'Report Feed'
        # keyPrefix = 'None'



class SamlSsoConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    version = models.CharField(max_length=255, verbose_name='SAML Version', sf_read_only=models.READ_ONLY, choices=[('SAML1_1', None), ('SAML2_0', None)])
    issuer = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    options_sp_init_binding = models.BooleanField(verbose_name='SpInitBinding', sf_read_only=models.READ_ONLY)
    options_user_provisioning = models.BooleanField(verbose_name='UserProvisioning', sf_read_only=models.READ_ONLY)
    attribute_format = models.CharField(max_length=255, verbose_name='Name ID Format', sf_read_only=models.READ_ONLY, blank=True, null=True)
    attribute_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    audience = models.CharField(max_length=255, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    identity_mapping = models.CharField(max_length=255, verbose_name='SAML Identity Type', sf_read_only=models.READ_ONLY, choices=[('Username', None), ('FederationId', None), ('UserId', None)])
    identity_location = models.CharField(max_length=255, verbose_name='SAML Identity Location', sf_read_only=models.READ_ONLY, choices=[('SubjectNameId', None), ('Attribute', None)])
    saml_jit_handler = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    execution_user = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_executionuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(max_length=1500, verbose_name='Identity Provider Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    logout_url = models.CharField(max_length=1500, verbose_name='Identity Provider Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_url = models.CharField(max_length=500, verbose_name='Custom Error URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    validation_cert = models.CharField(max_length=4000, verbose_name='Identity Provider Certificate', sf_read_only=models.READ_ONLY)
    request_signature_method = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('RSA-SHA1', 'RSA-SHA1'), ('RSA-SHA256', 'RSA-SHA256')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SamlSsoConfig'
        verbose_name = 'SAML Single Sign-On Setting'
        verbose_name_plural = 'SAML Single Sign-On Settings'
        # keyPrefix = '0LE'



class Scontrol(models.Model):
    name = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.NOT_CREATEABLE)
    developer_name = models.CharField(max_length=80, verbose_name='S-Control Name', sf_read_only=models.NOT_CREATEABLE)
    description = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    encoding_key = models.CharField(max_length=40, verbose_name='Encoding', sf_read_only=models.NOT_CREATEABLE, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    html_wrapper = models.TextField(verbose_name='HTML Body', sf_read_only=models.NOT_CREATEABLE)
    filename = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    body_length = models.IntegerField(verbose_name='Binary Length', sf_read_only=models.READ_ONLY)
    binary = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_source = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.NOT_CREATEABLE, choices=[('HTML', 'HTML'), ('URL', 'URL'), ('Snippet', 'Snippet')], blank=True, null=True)
    supports_caching = models.BooleanField(verbose_name='Prebuild In Page', sf_read_only=models.NOT_CREATEABLE, default=False)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrol_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrol_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Scontrol'
        verbose_name = 'Custom S-Control'
        verbose_name_plural = 'Custom S-Controls'
        # keyPrefix = '01N'



class SearchActivity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    search_term = models.CharField(max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(max_digits=18, decimal_places=4, verbose_name='Number of Results', sf_read_only=models.READ_ONLY)
    kb_channel = models.CharField(max_length=255, verbose_name='Channel', sf_read_only=models.READ_ONLY, choices=[('AllChannels', 'All Channels'), ('App', 'Internal App'), ('Pkb', 'Public Knowledge Base'), ('Csp', 'Customer'), ('Prm', 'Partner')])
    period = models.CharField(max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    click_rank = models.DecimalField(max_digits=18, decimal_places=4, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    query_language = models.CharField(max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    clicked_record_name = models.CharField(max_length=255, verbose_name='Clicked Article Title', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SearchActivity'
        verbose_name = 'SearchActivity'
        verbose_name_plural = 'Knowledge Search Activity'
        # keyPrefix = '0JO'



class SearchLayout(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    layout_type = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fields_displayed = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    buttons_displayed = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'SearchLayout'
        verbose_name = 'Search Layout'
        verbose_name_plural = 'Search Layouts'
        # keyPrefix = '4co'



class SearchPromotionRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchpromotionrule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchpromotionrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    query = models.CharField(max_length=100, verbose_name='Term')
    class Meta(models.Model.Meta):
        db_table = 'SearchPromotionRule'
        verbose_name = 'Promoted Search Term'
        verbose_name_plural = 'Promoted Search Terms'
        # keyPrefix = '0MD'



class SecureAgent(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    agent_key = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    proxy_user = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagent_proxyuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    secure_agents_cluster = models.ForeignKey('SecureAgentsCluster', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    priority = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecureAgent'
        verbose_name = 'Secure Agent'
        verbose_name_plural = 'Secure Agents'
        # keyPrefix = '0NB'



class SecureAgentPlugin(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentplugin_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentplugin_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    secure_agent = models.ForeignKey(SecureAgent, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    plugin_name = models.CharField(max_length=64, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    plugin_type = models.CharField(max_length=255, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    requested_version = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    update_window_start = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    update_window_end = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecureAgentPlugin'
        verbose_name = 'Secure Agent Plug-in'
        verbose_name_plural = 'Secure Agent Plug-ins'
        # keyPrefix = '0ND'



class SecureAgentPluginProperty(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentpluginproperty_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentpluginproperty_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    secure_agent_plugin = models.ForeignKey(SecureAgentPlugin, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    property_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    property_value = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecureAgentPluginProperty'
        verbose_name = 'Secure Agent Plug-in Property'
        verbose_name_plural = 'Secure Agent Plug-in Properties'
        # keyPrefix = '0NE'



class SecureAgentsCluster(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentscluster_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentscluster_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecureAgentsCluster'
        verbose_name = 'Secure Agent Cluster'
        verbose_name_plural = 'Secure Agent Clusters'
        # keyPrefix = '0Qy'



class SecurityCustomBaseline(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='securitycustombaseline_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='securitycustombaseline_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    baseline = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecurityCustomBaseline'
        verbose_name = 'Security Custom Baseline'
        verbose_name_plural = 'Security Custom Baselines'
        # keyPrefix = '09v'



class SessionPermSetActivation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SessionPermSetActivation'
        verbose_name = 'Session Permission Set Activation'
        verbose_name_plural = 'Session Permission Set Activations'
        # keyPrefix = '5Pa'



class SetupAuditTrail(models.Model):
    action = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    section = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    display = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    delegate_user = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SetupAuditTrail'
        verbose_name = 'Setup Audit Trail Entry'
        verbose_name_plural = 'Setup Audit Trail Entries'
        # keyPrefix = '0Ym'



class SetupEntityAccess(models.Model):
    parent = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    setup_entity = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ApexClass, ApexPage, ConnectedApplication, CustomPermission, ExternalDataSource, NamedCredential] Master Detail Relationship *
    setup_entity_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('ApexClass', None), ('ApexPage', None), ('ConnectedApplication', None), ('ConnectedApplication', None), ('CustomPermission', None), ('ExternalDataSource', None), ('NamedCredential', None), ('TabSet', None)], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SetupEntityAccess'
        verbose_name = 'Setup Entity Access'
        verbose_name_plural = 'Setup Entity Access'
        # keyPrefix = '0J0'



class Site(models.Model):
    name = models.CharField(max_length=80, verbose_name='Site Name', sf_read_only=models.READ_ONLY)
    subdomain = models.CharField(max_length=80, verbose_name='Site Subdomain Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url_path_prefix = models.CharField(max_length=40, verbose_name='Default Web Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guest_user = models.ForeignKey('User', models.DO_NOTHING, related_name='site_guestuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, verbose_name='Site Status', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'In Maintenance')])
    admin = models.ForeignKey('User', models.DO_NOTHING, related_name='site_admin_set', sf_read_only=models.READ_ONLY)
    options_enable_feeds = models.BooleanField(verbose_name='Enable Feeds', sf_read_only=models.READ_ONLY)
    options_require_https = models.BooleanField(verbose_name='Require Secure Connections (HTTPS)', sf_read_only=models.READ_ONLY)
    options_allow_home_page = models.BooleanField(verbose_name='Enable Standard Home Page', sf_read_only=models.READ_ONLY)
    options_allow_standard_ideas_pages = models.BooleanField(verbose_name='Enable Standard Ideas Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_search = models.BooleanField(verbose_name='Enable Standard Lookup Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_lookups = models.BooleanField(verbose_name='Enable Standard Search Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_answers_pages = models.BooleanField(verbose_name='Enable Standard Answers Pages', sf_read_only=models.READ_ONLY)
    options_allow_guest_support_api = models.BooleanField(verbose_name='Guest Access to the Support API', sf_read_only=models.READ_ONLY)
    options_allow_standard_portal_pages = models.BooleanField(verbose_name='Allow Access to Standard Salesforce Pages', sf_read_only=models.READ_ONLY)
    description = models.TextField(verbose_name='Site Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=255, verbose_name='Site Label', sf_read_only=models.READ_ONLY)
    analytics_tracking_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    site_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Siteforce', 'Site.com'), ('Visualforce', 'Force.com'), ('User', 'User')])
    clickjack_protection_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='SameOriginOnly', choices=[('AllowAllFraming', 'Allow framing by any page (no protection)'), ('External', 'Allow framing of site or community pages on external domains (good protection)'), ('SameOriginOnly', 'Allow framing by the same origin only (recommended)'), ('NoFraming', "Don't allow framing by any page (most protection)")])
    daily_bandwidth_limit = models.IntegerField(verbose_name='Daily Bandwidth Limit (MB)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_bandwidth_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_request_time_limit = models.IntegerField(verbose_name='Daily Request Time Limit (min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_request_time_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='site_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='site_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Site'
        verbose_name = 'Site'
        verbose_name_plural = 'Sites'
        # keyPrefix = '0DM'



class SiteFeed(models.Model):
    parent = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sitefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sitefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteFeed'
        verbose_name = 'Site'
        verbose_name_plural = 'Site'
        # keyPrefix = 'None'



class SiteHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    site = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('siteActive', 'Active'), ('IndexPage', 'Active Site Home Page'), ('SiteAllowStandardPortalPages', 'Allow Access to Standard Salesforce Pages'), ('AnalyticsTrackingCode', 'Analytics Tracking Code'), ('siteOverride401', 'Authorization Required Page (401)'), ('siteOverrideChangePassword', 'Change Password Page'), ('ClickjackProtectionLevel', 'Clickjack Protection Level'), ('created', 'Created.'), ('SiteDeleteDomain', 'Custom Web Address'), ('siteNewDomain', 'Custom Web Address'), ('TopLevelDomain', 'Custom Web Address'), ('DefaultDomain', 'Default Site Domain'), ('siteSetPrimaryDomain', 'Default Site Domain'), ('UrlPathPrefix', 'Default Web Address'), ('siteBTDisabled', 'Disable Site'), ('siteEnableFeeds', 'Enable Feeds'), ('siteAllowStandardAnswersPages', 'Enable Standard Answers Pages'), ('siteAllowHomePage', 'Enable Standard Home Page'), ('siteAllowStandardIdeasPages', 'Enable Standard Ideas Pages'), ('siteAllowStandardSearch', 'Enable Standard Lookup Pages'), ('siteAllowStandardLookups', 'Enable Standard Search Pages'), ('feedEvent', 'Feed event'), ('siteOverrideForgotPassword', 'Forgot Password Page'), ('siteOverride500', 'Generic Error Page'), ('GuestUser', 'Guest User'), ('siteOverrideInactive', 'Inactive Site Home Page'), ('siteOverride509', 'Limit Exceeded Page (509)'), ('siteOverride503', 'Maintenance Page(500/503)'), ('sitePageLimitExceeded', 'Monthly page view limit exceeded for org'), ('siteOverrideMyProfile', 'My Profile Page'), ('NewPassTemplate', 'New Password Template'), ('NewUserTemplate', 'New User Template'), ('Options', 'Options'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('siteOverride404', 'Page Not Found Page (404)'), ('Portal', 'Portal'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('siteNewRedirect', 'redirection mappings. Created a new mapping'), ('siteDeleteRedirect', 'redirection mappings. Deleted the mapping'), ('siteChangeRedirect', 'redirection mappings. The new mapping value is'), ('siteRequireInsecurePortalAccess', 'Require Non-Secure Connections (HTTP)'), ('siteRequireHttps', 'Require Secure Connections (HTTPS)'), ('siteOverrideSelfReg', 'Self Registration Page'), ('ServerIsDown', 'Service Not Available'), ('Admin', 'Site Contact'), ('Description', 'Site Description'), ('FavoriteIcon', 'Site Favorite Icon'), ('MasterLabel', 'Site Label'), ('Language', 'Site Master Language'), ('Name', 'Site Name'), ('siteOverrideRobotsTxt', 'Site Robots.txt'), ('Status', 'Site Status'), ('Subdomain', 'Site Subdomain Prefix'), ('siteOverrideTemplate', 'Site Template'), ('SiteType', 'Site Type'), ('Guid', 'Unique ID'), ('UrlRewriterClass', 'URL Rewriter Class')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteHistory'
        verbose_name = 'Site History'
        verbose_name_plural = 'Site History'
        # keyPrefix = 'None'



class Solution(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    solution_name = models.CharField(max_length=255, verbose_name='Title')
    is_published = models.BooleanField(verbose_name='Public', default=models.DEFAULTED_ON_CREATE)
    is_published_in_public_kb = models.BooleanField(verbose_name='Visible in Public Knowledge Base', default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Draft', 'Draft'), ('Reviewed', 'Reviewed'), ('Duplicate', 'Duplicate')])
    is_reviewed = models.BooleanField(verbose_name='Reviewed', sf_read_only=models.READ_ONLY, default=False)
    solution_note = models.TextField(verbose_name='Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    times_used = models.IntegerField(verbose_name='Num Related Cases', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_html = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Solution'
        verbose_name = 'Solution'
        verbose_name_plural = 'Solutions'
        # keyPrefix = '501'



class SolutionFeed(models.Model):
    parent = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionFeed'
        verbose_name = 'Solution Feed'
        verbose_name_plural = 'Solution Feed'
        # keyPrefix = 'None'



class SolutionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPublished', 'Public'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SolutionNote', 'Solution Details'), ('SolutionName', 'Solution Title'), ('Status', 'Status'), ('IsPublishedInPublicKb', 'Visible in Public Knowledge Base')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionHistory'
        verbose_name = 'Solution History'
        verbose_name_plural = 'Solution History'
        # keyPrefix = 'None'



class SolutionStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_reviewed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SolutionStatus'
        verbose_name = 'Solution Status Value'
        verbose_name_plural = 'Solution Status Value'
        # keyPrefix = 'None'



class Stamp(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    master_label = models.CharField(max_length=50, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamp_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamp_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Stamp'
        verbose_name = 'Stamp'
        verbose_name_plural = 'Stamps'
        # keyPrefix = '1ST'



class StampAssignment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    stamp = models.ForeignKey(Stamp, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    subject = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_subject_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'StampAssignment'
        verbose_name = 'Stamp Assignment'
        verbose_name_plural = 'Stamp Assignments'
        # keyPrefix = '1SA'



class StaticResource(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    content_type = models.CharField(max_length=120, verbose_name='MIME Type')
    body_length = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY)
    body = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='staticresource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='staticresource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    cache_control = models.CharField(max_length=40, choices=[('Private', 'Private'), ('Public', 'Public')])
    class Meta(models.Model.Meta):
        db_table = 'StaticResource'
        verbose_name = 'Static Resource'
        verbose_name_plural = 'Static Resources'
        # keyPrefix = '081'



class StreamingChannel(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Streaming Channel Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='streamingchannel_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='streamingchannel_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_dynamic = models.BooleanField(verbose_name='Is Dynamically Created', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannel'
        verbose_name = 'Streaming Channel'
        verbose_name_plural = 'Streaming Channels'
        # keyPrefix = '0M6'



class StreamingChannelShare(models.Model):
    parent = models.ForeignKey(StreamingChannel, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannelShare'
        verbose_name = 'Streaming Channel Share'
        verbose_name_plural = 'Streaming Channel Share'
        # keyPrefix = 'None'



class Task(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='task_what_set', blank=True, null=True)  # Reference to tables [Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product2, Solution, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    subject = models.CharField(max_length=255, choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')])
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')])
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='task_owner_set')
    description = models.TextField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='task_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='task_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='task_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', blank=True, null=True)
    call_type = models.CharField(max_length=40, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', default=models.DEFAULTED_ON_CREATE)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Tasks', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date_only = models.DateField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Fiji', '(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (New South Wales) (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (South Australia) (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Asia/Tehran', '(GMT+03:30) Iran Standard Time (Asia/Tehran)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Time (Africa/Casablanca)'), ('Europe/Amsterdam', '(GMT+01:00) Central European Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) Eastern Greenland Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('America/Sao_Paulo', '(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/St_Johns', '(GMT-03:30) Newfoundland Standard Time (America/St_Johns)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Halifax', '(GMT-04:00) Atlantic Standard Time (America/Halifax)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('Atlantic/Bermuda', '(GMT-04:00) Atlantic Standard Time (Atlantic/Bermuda)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Indiana/Indianapolis', '(GMT-05:00) Eastern Standard Time (America/Indiana/Indianapolis)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/New_York', '(GMT-05:00) Eastern Standard Time (America/New_York)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Chicago', '(GMT-06:00) Central Standard Time (America/Chicago)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Denver', '(GMT-07:00) Mountain Standard Time (America/Denver)'), ('America/Mazatlan', '(GMT-07:00) Mountain Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Los_Angeles', '(GMT-08:00) Pacific Standard Time (America/Los_Angeles)'), ('America/Tijuana', '(GMT-08:00) Pacific Standard Time (America/Tijuana)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Anchorage', '(GMT-09:00) Alaska Standard Time (America/Anchorage)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('America/Adak', '(GMT-10:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    recurrence_regenerated_type = models.CharField(max_length=40, verbose_name='Repeat This Task', choices=[('RecurrenceRegenerateAfterDueDate', 'After due date'), ('RecurrenceRegenerateAfterToday', 'After date completed'), ('RecurrenceRegenerated', '(Task Closed)')], blank=True, null=True)
    task_subtype = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Call', 'Call')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Task'
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'
        # keyPrefix = '00T'



class TaskFeed(models.Model):
    parent = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskFeed'
        verbose_name = 'Task Feed'
        verbose_name_plural = 'Task Feed'
        # keyPrefix = 'None'



class TaskPriority(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_high_priority = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskpriority_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskpriority_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskPriority'
        verbose_name = 'Task Priority Value'
        verbose_name_plural = 'Task Priority Value'
        # keyPrefix = 'None'



class TaskStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskStatus'
        verbose_name = 'Task Status Value'
        verbose_name_plural = 'Task Status Value'
        # keyPrefix = 'None'



class TenantSecret(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantsecret_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantsecret_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    secret_value_hash = models.TextField(verbose_name='Secret Hash', sf_read_only=models.NOT_UPDATEABLE)
    description = models.TextField(blank=True, null=True)
    secret_value = models.TextField(verbose_name='Secret', blank=True, null=True)
    version = models.IntegerField(verbose_name='Seed Number', sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('ACTIVE', None), ('ARCHIVED', None), ('DESTROYED', None)], blank=True, null=True)
    type = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('Data', None), ('SearchIndex', None), ('Analytics', None), ('DeterministicData', None), ('EventBus', None)])
    source = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('HSM', None), ('UPLOADED', None)])
    secret_value_certificate = models.CharField(max_length=255, verbose_name='Secret Value Encryption Certificate', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TenantSecret'
        verbose_name = 'Tenant Secret'
        verbose_name_plural = 'Tenant Secret'
        # keyPrefix = '02G'



class TenantUsageEntitlement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantusageentitlement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantusageentitlement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    resource_group_key = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    setting = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    start_date = models.DateField(sf_read_only=models.READ_ONLY)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_amount_allowed = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    frequency = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Weekly', 'Weekly'), ('Fortnightly', 'Fortnightly'), ('Monthly', 'Monthly'), ('Once', 'Once'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    is_persistent_resource = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_rollover = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    overage_grace = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_used = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    usage_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=255, verbose_name='Setting Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TenantUsageEntitlement'
        verbose_name = 'Tenant Usage Entitlement'
        verbose_name_plural = 'Tenant Usage Entitlements'
        # keyPrefix = '0UT'



class TestSuiteMembership(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='testsuitemembership_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='testsuitemembership_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_test_suite = models.ForeignKey(ApexTestSuite, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TestSuiteMembership'
        verbose_name = 'Test Suite Membership'
        verbose_name_plural = 'Test Suite Memberships'
        # keyPrefix = '0Hd'



class ThirdPartyAccountLink(models.Model):
    third_party_account_link_key = models.CharField(max_length=255, verbose_name='Third Party Account Link Unique Key', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    handle = models.CharField(max_length=375, verbose_name='External User Handle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    remote_identifier = models.CharField(max_length=128, verbose_name='External User Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider_name = models.CharField(max_length=255, verbose_name='Single Sign-On Provider Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_not_sso_usable = models.BooleanField(verbose_name='Is Not SSO Usable', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ThirdPartyAccountLink'
        verbose_name = 'Third Party Account Link'
        verbose_name_plural = 'Third Party Account Links'
        # keyPrefix = '0Jr'



class TodayGoal(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    value = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_user_set')  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TodayGoal'
        verbose_name = 'Goal'
        verbose_name_plural = 'Goals'
        # keyPrefix = '0Jz'



class TodayGoalShare(models.Model):
    parent = models.ForeignKey(TodayGoal, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'TodayGoalShare'
        verbose_name = 'Goal Share'
        verbose_name_plural = 'Goal Share'
        # keyPrefix = 'None'



class Topic(models.Model):
    name = models.CharField(max_length=99)
    description = models.CharField(max_length=1000, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    talking_about = models.IntegerField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Topic'
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
        # keyPrefix = '0TO'



class TopicAssignment(models.Model):
    topic = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, Contact, ContentDocument, Contract, Event, FeedItem, Lead, Opportunity, Order, Solution, Task, WorkOrder, WorkOrderLineItem] Master Detail Relationship *
    entity_key_prefix = models.CharField(max_length=3, verbose_name='Record Key Prefix', sf_read_only=models.READ_ONLY)
    entity_type = models.CharField(max_length=80, verbose_name='Object Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicAssignment'
        verbose_name = 'Record'
        verbose_name_plural = 'Topic Assignments'
        # keyPrefix = '0FT'



class TopicFeed(models.Model):
    parent = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topicfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topicfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TopicFeed'
        verbose_name = 'Topic Feed'
        verbose_name_plural = 'Topic Feed'
        # keyPrefix = 'None'



class UndecidedEventRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='undecidedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='undecidedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UndecidedEventRelation'
        verbose_name = 'Undecided Event Relation'
        verbose_name_plural = 'Undecided Event Relations'
        # keyPrefix = 'None'



class User(models.Model):
    username = models.CharField(max_length=80)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    company_name = models.CharField(max_length=80, blank=True, null=True)
    division = models.CharField(max_length=80, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    title = models.CharField(max_length=80, blank=True, null=True)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField()
    email_preferences_auto_bcc = models.BooleanField(verbose_name='AutoBcc')
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(verbose_name='AutoBccStayInTouch')
    email_preferences_stay_in_touch_reminder = models.BooleanField(verbose_name='StayInTouchReminder')
    sender_email = models.EmailField(verbose_name='Email Sender Address', blank=True, null=True)
    sender_name = models.CharField(max_length=80, verbose_name='Email Sender Name', blank=True, null=True)
    signature = models.TextField(verbose_name='Email Signature', blank=True, null=True)
    stay_in_touch_subject = models.CharField(max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True, null=True)
    stay_in_touch_signature = models.TextField(verbose_name='Stay-in-Touch Email Signature', blank=True, null=True)
    stay_in_touch_note = models.CharField(max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', blank=True, null=True)
    alias = models.CharField(max_length=8)
    community_nickname = models.CharField(max_length=40, verbose_name='Nickname')
    badge_text = models.CharField(max_length=80, verbose_name='User Photo badge text overlay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Chatham', '(GMT+13:45) Chatham Daylight Time (Pacific/Chatham)'), ('Pacific/Auckland', '(GMT+13:00) New Zealand Daylight Time (Pacific/Auckland)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Fiji', '(GMT+13:00) Fiji Summer Time (Pacific/Fiji)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Australia/Lord_Howe', '(GMT+11:00) Lord Howe Daylight Time (Australia/Lord_Howe)'), ('Australia/Sydney', '(GMT+11:00) Australian Eastern Daylight Time (New South Wales) (Australia/Sydney)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Adelaide', '(GMT+10:30) Australian Central Daylight Time (South Australia) (Australia/Adelaide)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Asia/Tehran', '(GMT+03:30) Iran Standard Time (Asia/Tehran)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Asia/Beirut', '(GMT+02:00) Eastern European Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+02:00) Israel Standard Time (Asia/Jerusalem)'), ('Europe/Athens', '(GMT+02:00) Eastern European Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+02:00) Eastern European Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+02:00) Eastern European Time (Europe/Helsinki)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Time (Africa/Casablanca)'), ('Europe/Amsterdam', '(GMT+01:00) Central European Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+01:00) Central European Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+01:00) Central European Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+01:00) Central European Time (Europe/Paris)'), ('Europe/Prague', '(GMT+01:00) Central European Time (Europe/Prague)'), ('Europe/Rome', '(GMT+01:00) Central European Time (Europe/Rome)'), ('Europe/Dublin', '(GMT+00:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+00:00) Western European Time (Europe/Lisbon)'), ('Europe/London', '(GMT+00:00) Greenwich Mean Time (Europe/London)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('America/Scoresbysund', '(GMT-01:00) Eastern Greenland Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT-01:00) Azores Time (Atlantic/Azores)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('America/Sao_Paulo', '(GMT-02:00) Brasilia Summer Time (America/Sao_Paulo)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Santiago', '(GMT-03:00) Chile Summer Time (America/Santiago)'), ('America/St_Johns', '(GMT-03:30) Newfoundland Standard Time (America/St_Johns)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Halifax', '(GMT-04:00) Atlantic Standard Time (America/Halifax)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('Atlantic/Bermuda', '(GMT-04:00) Atlantic Standard Time (Atlantic/Bermuda)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Indiana/Indianapolis', '(GMT-05:00) Eastern Standard Time (America/Indiana/Indianapolis)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/New_York', '(GMT-05:00) Eastern Standard Time (America/New_York)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Chicago', '(GMT-06:00) Central Standard Time (America/Chicago)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mexico_City', '(GMT-06:00) Central Standard Time (America/Mexico_City)'), ('America/Denver', '(GMT-07:00) Mountain Standard Time (America/Denver)'), ('America/Mazatlan', '(GMT-07:00) Mountain Standard Time (America/Mazatlan)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Los_Angeles', '(GMT-08:00) Pacific Standard Time (America/Los_Angeles)'), ('America/Tijuana', '(GMT-08:00) Pacific Standard Time (America/Tijuana)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Anchorage', '(GMT-09:00) Alaska Standard Time (America/Anchorage)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('America/Adak', '(GMT-10:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, blank=True, null=True)
    locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', choices=[('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Bosnia & Herzegovina)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('yo_BJ', 'Yoruba (Benin)')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', default=models.DEFAULTED_ON_CREATE)
    receives_admin_info_emails = models.BooleanField(verbose_name='Admin Info Emails', default=models.DEFAULTED_ON_CREATE)
    email_encoding_key = models.CharField(max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    profile = models.ForeignKey(Profile, models.DO_NOTHING)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    employee_number = models.CharField(max_length=20, blank=True, null=True)
    delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Group, User]
    manager = models.ForeignKey('self', models.DO_NOTHING, related_name='user_manager_set', blank=True, null=True)
    last_login_date = models.DateTimeField(verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_password_change_date = models.DateTimeField(verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    offline_trial_expiration_date = models.DateTimeField(verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_pda_trial_expiration_date = models.DateTimeField(verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_permissions_marketing_user = models.BooleanField(verbose_name='Marketing User')
    user_permissions_offline_user = models.BooleanField(verbose_name='Offline User')
    user_permissions_call_center_auto_login = models.BooleanField(verbose_name='Auto-login To Call Center')
    user_permissions_mobile_user = models.BooleanField(verbose_name='Apex Mobile User')
    user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User')
    user_permissions_knowledge_user = models.BooleanField(verbose_name='Knowledge User')
    user_permissions_interaction_user = models.BooleanField(verbose_name='Flow User')
    user_permissions_support_user = models.BooleanField(verbose_name='Service Cloud User')
    user_permissions_jigsaw_prospecting_user = models.BooleanField(verbose_name='Data.com User')
    user_permissions_siteforce_contributor_user = models.BooleanField(verbose_name='Site.com Contributor User')
    user_permissions_siteforce_publisher_user = models.BooleanField(verbose_name='Site.com Publisher User')
    user_permissions_chatter_answers_user = models.BooleanField(verbose_name='Chatter Answers User')
    user_permissions_work_dot_com_user_feature = models.BooleanField(verbose_name='Work.com User')
    forecast_enabled = models.BooleanField(verbose_name='Allow Forecasting', default=models.DEFAULTED_ON_CREATE)
    user_preferences_activity_reminders_popup = models.BooleanField(verbose_name='ActivityRemindersPopup')
    user_preferences_event_reminders_checkbox_default = models.BooleanField(verbose_name='EventRemindersCheckboxDefault')
    user_preferences_task_reminders_checkbox_default = models.BooleanField(verbose_name='TaskRemindersCheckboxDefault')
    user_preferences_reminder_sound_off = models.BooleanField(verbose_name='ReminderSoundOff')
    user_preferences_disable_all_feeds_email = models.BooleanField(verbose_name='DisableAllFeedsEmail')
    user_preferences_disable_followers_email = models.BooleanField(verbose_name='DisableFollowersEmail')
    user_preferences_disable_profile_post_email = models.BooleanField(verbose_name='DisableProfilePostEmail')
    user_preferences_disable_change_comment_email = models.BooleanField(verbose_name='DisableChangeCommentEmail')
    user_preferences_disable_later_comment_email = models.BooleanField(verbose_name='DisableLaterCommentEmail')
    user_preferences_dis_prof_post_comment_email = models.BooleanField(verbose_name='DisProfPostCommentEmail')
    user_preferences_content_no_email = models.BooleanField(verbose_name='ContentNoEmail')
    user_preferences_content_email_as_and_when = models.BooleanField(verbose_name='ContentEmailAsAndWhen')
    user_preferences_apex_pages_developer_mode = models.BooleanField(verbose_name='ApexPagesDeveloperMode')
    user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    user_preferences_disable_mentions_post_email = models.BooleanField(verbose_name='DisableMentionsPostEmail')
    user_preferences_dis_mentions_comment_email = models.BooleanField(verbose_name='DisMentionsCommentEmail')
    user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    user_preferences_hide_chatter_onboarding_splash = models.BooleanField(verbose_name='HideChatterOnboardingSplash')
    user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(verbose_name='HideSecondChatterOnboardingSplash')
    user_preferences_dis_comment_after_like_email = models.BooleanField(verbose_name='DisCommentAfterLikeEmail')
    user_preferences_disable_like_email = models.BooleanField(verbose_name='DisableLikeEmail')
    user_preferences_sort_feed_by_comment = models.BooleanField(verbose_name='SortFeedByComment')
    user_preferences_disable_message_email = models.BooleanField(verbose_name='DisableMessageEmail')
    user_preferences_jigsaw_list_user = models.BooleanField(verbose_name='JigsawListUser')
    user_preferences_disable_bookmark_email = models.BooleanField(verbose_name='DisableBookmarkEmail')
    user_preferences_disable_share_post_email = models.BooleanField(verbose_name='DisableSharePostEmail')
    user_preferences_enable_auto_sub_for_feeds = models.BooleanField(verbose_name='EnableAutoSubForFeeds')
    user_preferences_disable_file_share_notifications_for_api = models.BooleanField(verbose_name='DisableFileShareNotificationsForApi')
    user_preferences_show_title_to_external_users = models.BooleanField(verbose_name='ShowTitleToExternalUsers')
    user_preferences_show_manager_to_external_users = models.BooleanField(verbose_name='ShowManagerToExternalUsers')
    user_preferences_show_email_to_external_users = models.BooleanField(verbose_name='ShowEmailToExternalUsers')
    user_preferences_show_work_phone_to_external_users = models.BooleanField(verbose_name='ShowWorkPhoneToExternalUsers')
    user_preferences_show_mobile_phone_to_external_users = models.BooleanField(verbose_name='ShowMobilePhoneToExternalUsers')
    user_preferences_show_fax_to_external_users = models.BooleanField(verbose_name='ShowFaxToExternalUsers')
    user_preferences_show_street_address_to_external_users = models.BooleanField(verbose_name='ShowStreetAddressToExternalUsers')
    user_preferences_show_city_to_external_users = models.BooleanField(verbose_name='ShowCityToExternalUsers')
    user_preferences_show_state_to_external_users = models.BooleanField(verbose_name='ShowStateToExternalUsers')
    user_preferences_show_postal_code_to_external_users = models.BooleanField(verbose_name='ShowPostalCodeToExternalUsers')
    user_preferences_show_country_to_external_users = models.BooleanField(verbose_name='ShowCountryToExternalUsers')
    user_preferences_show_profile_pic_to_guest_users = models.BooleanField(verbose_name='ShowProfilePicToGuestUsers')
    user_preferences_show_title_to_guest_users = models.BooleanField(verbose_name='ShowTitleToGuestUsers')
    user_preferences_show_city_to_guest_users = models.BooleanField(verbose_name='ShowCityToGuestUsers')
    user_preferences_show_state_to_guest_users = models.BooleanField(verbose_name='ShowStateToGuestUsers')
    user_preferences_show_postal_code_to_guest_users = models.BooleanField(verbose_name='ShowPostalCodeToGuestUsers')
    user_preferences_show_country_to_guest_users = models.BooleanField(verbose_name='ShowCountryToGuestUsers')
    user_preferences_disable_feedback_email = models.BooleanField(verbose_name='DisableFeedbackEmail')
    user_preferences_disable_work_email = models.BooleanField(verbose_name='DisableWorkEmail')
    user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    user_preferences_disable_endorsement_email = models.BooleanField(verbose_name='DisableEndorsementEmail')
    user_preferences_path_assistant_collapsed = models.BooleanField(verbose_name='PathAssistantCollapsed')
    user_preferences_cache_diagnostics = models.BooleanField(verbose_name='CacheDiagnostics')
    user_preferences_show_email_to_guest_users = models.BooleanField(verbose_name='ShowEmailToGuestUsers')
    user_preferences_show_manager_to_guest_users = models.BooleanField(verbose_name='ShowManagerToGuestUsers')
    user_preferences_show_work_phone_to_guest_users = models.BooleanField(verbose_name='ShowWorkPhoneToGuestUsers')
    user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(verbose_name='ShowMobilePhoneToGuestUsers')
    user_preferences_show_fax_to_guest_users = models.BooleanField(verbose_name='ShowFaxToGuestUsers')
    user_preferences_show_street_address_to_guest_users = models.BooleanField(verbose_name='ShowStreetAddressToGuestUsers')
    user_preferences_lightning_experience_preferred = models.BooleanField(verbose_name='LightningExperiencePreferred')
    user_preferences_preview_lightning = models.BooleanField(verbose_name='PreviewLightning')
    user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(verbose_name='HideEndUserOnboardingAssistantModal')
    user_preferences_hide_lightning_migration_modal = models.BooleanField(verbose_name='HideLightningMigrationModal')
    user_preferences_hide_sfx_welcome_mat = models.BooleanField(verbose_name='HideSfxWelcomeMat')
    user_preferences_hide_bigger_photo_callout = models.BooleanField(verbose_name='HideBiggerPhotoCallout')
    user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown')
    user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown')
    user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown')
    user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown')
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, blank=True, null=True)
    extension = models.CharField(max_length=40, blank=True, null=True)
    federation_identifier = models.CharField(max_length=512, verbose_name='SAML Federation ID', blank=True, null=True)
    about_me = models.TextField(blank=True, null=True)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    digest_frequency = models.CharField(max_length=40, verbose_name='Chatter Email Highlights Frequency', default=models.DEFAULTED_ON_CREATE, choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    default_group_notification_frequency = models.CharField(max_length=40, verbose_name='Default Notification Frequency when Joining Groups', default=models.DEFAULTED_ON_CREATE, choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    jigsaw_import_limit_override = models.IntegerField(verbose_name='Data.com Monthly Addition Limit', blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(verbose_name='Url for banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_banner_photo_url = models.URLField(verbose_name='Url for IOS banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_banner_photo_url = models.URLField(verbose_name='Url for Android banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_profile_photo_active = models.BooleanField(verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'



class UserAppInfo(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    form_factor = models.CharField(max_length=255, choices=[('Small', 'Phone'), ('Medium', 'Tablet'), ('Large', 'Desktop')])
    class Meta(models.Model.Meta):
        db_table = 'UserAppInfo'
        verbose_name = 'Last Used App'
        verbose_name_plural = 'Last Used App'
        # keyPrefix = '0Ds'



class UserAppMenuCustomization(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappmenucustomization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappmenucustomization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    sort_order = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomization'
        verbose_name = 'UserAppMenuCustomization'
        verbose_name_plural = 'UserAppMenuCustomizations'
        # keyPrefix = '0Nw'



class UserAppMenuCustomizationShare(models.Model):
    parent = models.ForeignKey(UserAppMenuCustomization, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomizationShare'
        verbose_name = 'UserAppMenuCustomization Share'
        verbose_name_plural = 'UserAppMenuCustomization Share'
        # keyPrefix = 'None'



class UserAppMenuItem(models.Model):
    app_menu_item_id = models.CharField(max_length=255, verbose_name='AppMenuItem ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    application_id = models.CharField(max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    label = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=250, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_using_admin_authorization = models.BooleanField(verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuItem'
        verbose_name = 'Application'
        verbose_name_plural = 'Applications'
        # keyPrefix = '07p'



class UserEntityAccess(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mergeable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_activateable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_readable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_editable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_undeletable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_fls_updatable = models.BooleanField(verbose_name='Is Field-level Security Updatable?', sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserEntityAccess'
        verbose_name = 'User Entity Access'
        verbose_name_plural = 'User Entity Access'
        # keyPrefix = '07u'



class UserFeed(models.Model):
    parent = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_parent_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFeed'
        verbose_name = 'User Feed'
        verbose_name_plural = 'User Feed'
        # keyPrefix = 'None'



class UserFieldAccess(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_updatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_accessible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFieldAccess'
        verbose_name = 'User Field Access'
        verbose_name_plural = 'User Field Access'
        # keyPrefix = '4fp'



class UserLicense(models.Model):
    license_definition_key = models.CharField(max_length=40, verbose_name='License Def. ID', sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    monthly_logins_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_logins_entitlement = models.IntegerField(verbose_name='Monthly Logins Allotted', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'



class UserListView(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    list_view = models.ForeignKey(ListView, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionKnowledgeSubmit', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTrigger', None), ('AppIpRange', None), ('AppMenuItem', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('Attachment', None), ('AuraDefinitionBundle', None), ('AuthProvider', None), ('AuthSession', None), ('BackgroundOperation', None), ('BrandTemplate', None), ('BusinessHours', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Community', None), ('ConnectedApplication', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContentAsset', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentNote', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CronTrigger', None), ('CustomEntityDefinition', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('DandBCompany', None), ('Dashboard', None), ('DashboardComponent', None), ('DatacloudCompany', None), ('DatacloudContact', None), ('DebugLevel', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EmailBrand', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EnhancedEmailTemplate', None), ('EntityHistory', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('EventType', None), ('EventTypeParameter', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FlexiPage', None), ('FlowDefinition', None), ('FlowInterview', None), ('Folder', None), ('Group', None), ('Holiday', None), ('Idea', None), ('InteractionDefinitionVersion', None), ('InteractionLayoutDetail', None), ('IpWhitelist', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('ListEmail', None), ('ListEmailSentResult', None), ('ListPoolUsage', None), ('ListView', None), ('LocalizedValue', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MobileConfig', None), ('MobileDevice', None), ('NamedCredential', None), ('Note', None), ('OauthConsumer', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('Package2Member', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('PendingChange', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PlatformCachePartition', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessTimeQueue', None), ('Product2', None), ('Profile', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('QuickText', None), ('RateLimitingNotification', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('SearchPromotionRule', None), ('SettingsTemplate', None), ('SiteIframeWhiteListUrl', None), ('SocialPersona', None), ('SoftphoneLayout', None), ('Solution', None), ('StaticResource', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('TwoFactorTempCode', None), ('User', None), ('UserAppMenuItem', None), ('UserLicense', None), ('UserProvAccount', None), ('UserRole', None), ('VerificationHistory', None), ('Vote', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkOrder', None), ('WorkOrderLineItem', None)], blank=True, null=True)
    last_viewed_chart = models.CharField(max_length=255, verbose_name='List View Chart ID', choices=[('AccountsByIndustry', None), ('CampaignsByNumberOfResponses', None), ('CampaignsByStatus', None), ('CampaignsByType', None), ('ContactsByAccount', None), ('ContactsByLeadSource', None), ('LeadsBySource', None), ('PipelineByAccount', None), ('PipelineByFiscalPeriod', None), ('PipelineByStage', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListView'
        verbose_name = 'User List View'
        verbose_name_plural = 'User List View'
        # keyPrefix = '0Na'



class UserListViewCriterion(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistviewcriterion_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistviewcriterion_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_list_view = models.ForeignKey(UserListView, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField()
    column_name = models.CharField(max_length=40)
    operation = models.CharField(max_length=255, choices=[('equals', 'equals'), ('startsWith', 'starts with'), ('contains', 'contains'), ('rangeInclusive', 'range inclusive'), ('includes', 'includes')])
    value = models.CharField(max_length=85, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListViewCriterion'
        verbose_name = 'User List View Criteria'
        verbose_name_plural = 'User List View Criteria'
        # keyPrefix = '0JU'



class UserLogin(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userlogin_user_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_frozen = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    is_password_locked = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlogin_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLogin'
        verbose_name = 'User Login'
        verbose_name_plural = 'User Login'
        # keyPrefix = '0Yw'



class UserPackageLicense(models.Model):
    package_license = models.ForeignKey(PackageLicense, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPackageLicense'
        verbose_name = 'User Package License'
        verbose_name_plural = 'User Package License'
        # keyPrefix = '051'



class UserPreference(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    preference = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='93', choices=[('57', 'Event Reminder Default Lead Time'), ('58', 'Task Reminder Default Time'), ('91', 'Prevent Logs on Load'), ('92', 'Autocomplete Apex After Key Press'), ('93', 'Visualforce Viewstate Inspector'), ('94', 'Forecasting Displayed Type'), ('96', 'Editor Theme'), ('97', 'Editor Font Size'), ('98', 'Pinned Folders'), ('99', 'Enable Query Plan'), ('100', 'Enable New Open Dialog'), ('101', 'Email Transport Type'), ('102', 'Pinned Wave Folders'), ('108', 'Density'), ('109', 'Lightning Flow Builder preferences')])
    value = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPreference'
        verbose_name = 'User Preference'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = '03u'



class UserProvAccount(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccount_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccount_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccount_salesforceuser_set', blank=True, null=True)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    external_email = models.CharField(max_length=150, blank=True, null=True)
    external_first_name = models.CharField(max_length=150, blank=True, null=True)
    external_last_name = models.CharField(max_length=150, blank=True, null=True)
    link_state = models.CharField(max_length=255, choices=[('Linked', 'Linked'), ('Duplicate', 'Duplicate'), ('Orphaned', 'Orphaned'), ('Ignored', 'Ignored')])
    status = models.CharField(max_length=255, choices=[('Active', 'Active'), ('Deactivated', 'Deactivated'), ('Deleted', 'Deleted')])
    deleted_date = models.DateTimeField(blank=True, null=True)
    is_known_link = models.BooleanField(verbose_name='Manual Override', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'UserProvAccount'
        verbose_name = 'User Provisioning Account'
        verbose_name_plural = 'User Provisioning Accounts'
        # keyPrefix = '0Ni'



class UserProvAccountStaging(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccountstaging_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccountstaging_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovaccountstaging_salesforceuser_set', blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    external_email = models.CharField(max_length=150, blank=True, null=True)
    external_first_name = models.CharField(max_length=150, blank=True, null=True)
    external_last_name = models.CharField(max_length=150, blank=True, null=True)
    link_state = models.CharField(max_length=255, choices=[('Linked', 'Linked'), ('Duplicate', 'Duplicate'), ('Orphaned', 'Orphaned'), ('Ignored', 'Ignored')])
    status = models.CharField(max_length=255, choices=[('Active', 'Active'), ('Deactivated', 'Deactivated'), ('Deleted', 'Deleted')])
    class Meta(models.Model.Meta):
        db_table = 'UserProvAccountStaging'
        verbose_name = 'User Provisioning Account Staging'
        verbose_name_plural = 'User Provisioning Account Stagings'
        # keyPrefix = '0HY'



class UserProvMockTarget(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovmocktarget_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovmocktarget_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    external_email = models.CharField(max_length=150, blank=True, null=True)
    external_first_name = models.CharField(max_length=150, blank=True, null=True)
    external_last_name = models.CharField(max_length=150, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvMockTarget'
        verbose_name = 'User Provisioning Mock Target'
        verbose_name_plural = 'User Provisioning Mock Targets'
        # keyPrefix = '0HX'



class UserProvisioningConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    enabled = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    approval_required = models.TextField(blank=True, null=True)
    user_account_mapping = models.TextField(blank=True, null=True)
    enabled_operations = models.TextField(blank=True, null=True)
    on_update_attributes = models.TextField(blank=True, null=True)
    last_recon_date_time = models.DateTimeField(verbose_name='Last Recon Date', blank=True, null=True)
    named_credential = models.ForeignKey(NamedCredential, models.DO_NOTHING, blank=True, null=True)
    recon_filter = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningConfig'
        verbose_name = 'User Provisioning Config'
        verbose_name_plural = 'User Provisioning Configs'
        # keyPrefix = '0Je'



class UserProvisioningLog(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioninglog_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioninglog_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_provisioning_request = models.ForeignKey('UserProvisioningRequest', models.DO_NOTHING, blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    external_username = models.CharField(max_length=150, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioninglog_user_set', blank=True, null=True)
    status = models.CharField(max_length=150, blank=True, null=True)
    details = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningLog'
        verbose_name = 'User Provisioning Log'
        verbose_name_plural = 'User Provisioning Logs'
        # keyPrefix = '0Hs'



class UserProvisioningRequest(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    salesforce_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_salesforceuser_set', blank=True, null=True)
    external_user_id = models.CharField(max_length=150, blank=True, null=True)
    app_name = models.CharField(max_length=150, blank=True, null=True)
    state = models.CharField(max_length=255, choices=[('New', 'New'), ('Requested', 'Requested'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Collecting', 'Collecting'), ('Collected', 'Collected'), ('Analyzing', 'Analyzing'), ('Analyzed', 'Analyzed'), ('Committing', 'Committing'), ('Retried', 'Retried'), ('Manually Completed', 'Manually Completed')])
    operation = models.CharField(max_length=255, choices=[('Create', 'Create'), ('Read', 'Read'), ('Update', 'Update'), ('Deactivate', 'Deactivate'), ('Activate', 'Activate'), ('Freeze', 'Freeze'), ('Unfreeze', 'Unfreeze'), ('Reconcile', 'Reconcile'), ('Linking', 'Linking')])
    schedule_date = models.DateTimeField(verbose_name='Scheduled Provisioning Time', blank=True, null=True)
    connected_app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)
    user_prov_config = models.ForeignKey(UserProvisioningConfig, models.DO_NOTHING, blank=True, null=True)
    user_prov_account = models.ForeignKey(UserProvAccount, models.DO_NOTHING, blank=True, null=True)
    approval_status = models.CharField(max_length=255, choices=[('Required', 'Required'), ('NotRequired', 'Not Required'), ('Approved', 'Approved'), ('Denied', 'Denied')])
    manager = models.ForeignKey(User, models.DO_NOTHING, related_name='userprovisioningrequest_manager_set', blank=True, null=True)
    retry_count = models.IntegerField(blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningRequest'
        verbose_name = 'User Provisioning Request'
        verbose_name_plural = 'User Provisioning Requests'
        # keyPrefix = '0HP'



class UserProvisioningRequestShare(models.Model):
    parent = models.ForeignKey(UserProvisioningRequest, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserProvisioningRequestShare'
        verbose_name = 'User Provisioning Request Share'
        verbose_name_plural = 'User Provisioning Request Share'
        # keyPrefix = 'None'



class UserRecordAccess(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    record_id = models.CharField(max_length=40, verbose_name='Record ID', sf_read_only=models.READ_ONLY)
    has_read_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_edit_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_delete_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_transfer_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_all_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    max_access_level = models.CharField(max_length=40, verbose_name='Maximum Access Level', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('Delete', 'Delete'), ('Transfer', 'Read/Write/Transfer'), ('All', 'Owner')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRecordAccess'
        verbose_name = 'User Record Access'
        verbose_name_plural = 'User Record Access'
        # keyPrefix = 'None'



class UserRole(models.Model):
    name = models.CharField(max_length=80)
    parent_role = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    rollup_description = models.CharField(max_length=80, verbose_name='Description', blank=True, null=True)
    opportunity_access_for_account_owner = models.CharField(max_length=40, verbose_name='Opportunity Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_for_account_owner = models.CharField(max_length=40, verbose_name='Case Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    contact_access_for_account_owner = models.CharField(max_length=40, verbose_name='Contact Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    forecast_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_forecastuser_set', blank=True, null=True)
    may_forecast_manager_share = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, blank=True, null=True)
    portal_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    portal_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None'), ('CustomerPortal', 'Customer Portal'), ('Partner', 'Partner Portal')], blank=True, null=True)
    portal_account_owner = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_portalaccountowner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'



class UserShare(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='usershare_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    user_access_level = models.CharField(max_length=40, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='usershare_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserShare'
        verbose_name = 'User Share'
        verbose_name_plural = 'User Share'
        # keyPrefix = '0N2'



class VerificationHistory(models.Model):
    event_group = models.IntegerField(verbose_name='Verification Attempt', sf_read_only=models.READ_ONLY)
    verification_time = models.DateTimeField(verbose_name='Time', sf_read_only=models.READ_ONLY)
    verification_method = models.CharField(max_length=255, verbose_name='Method', sf_read_only=models.READ_ONLY, choices=[('Totp', 'One-time password'), ('Sms', 'Text message'), ('Email', 'Email message'), ('SalesforceAuthenticator', 'Salesforce Authenticator'), ('TempCode', 'Temporary code'), ('U2F', 'U2F security key'), ('LL', 'Lightning Login'), ('EnableLL', 'Lightning Login'), ('Password', 'Password')], blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_user_set', sf_read_only=models.READ_ONLY)
    activity = models.CharField(max_length=255, verbose_name='User Activity', sf_read_only=models.READ_ONLY, choices=[('Registration', 'Register for verification'), ('ExtraVerification', 'Perform an operation that requires extra verification'), ('Login', 'Log in to Salesforce'), ('AccessReports', 'Access reports'), ('ExportPrintReports', 'Export and print reports'), ('ConnectedApp', 'Access a connected app'), ('Apex', 'Apex-defined activity'), ('TempCode', 'Generate a temporary verification code'), ('EnableLL', 'Enroll in Lightning Login'), ('ConnectTotp', 'Connect a One-Time Password Generator'), ('ConnectToopher', 'Connect Salesforce Authenticator'), ('ConnectU2F', 'Connect a U2F Security Key'), ('ChangeEmail', 'Change your email address')])
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Initiated', 'Initiated'), ('InProgress', 'User challenged; waiting for response'), ('Succeeded', 'Succeeded'), ('Denied', 'Access denied'), ('RecoverableError', 'Failed: Recoverable error'), ('FailedGeneralError', 'Failed: General error'), ('FailedInvalidCode', 'Failed: Invalid verification code'), ('FailedTooManyAttempts', 'Failed: Too many attempts'), ('AutomatedSuccess', 'Succeeded: Automated response'), ('ReportedDenied', 'Access denied: Flagged by user'), ('FailedPasswordLockout', 'Failed: Password Lockout'), ('FailedInvalidPassword', 'Failed: Invalid Password')])
    login_history = models.ForeignKey(LoginHistory, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(max_length=200, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    remarks = models.CharField(max_length=255, verbose_name='Activity Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    resource = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    policy = models.CharField(max_length=255, verbose_name='Triggered By', sf_read_only=models.READ_ONLY, choices=[('HighAssurance', 'High assurance session required'), ('PageAccess', 'Access a protected page'), ('ProfilePolicy', 'Profile session level policy'), ('TwoFactorAuthentication', 'Two-factor authentication required'), ('DeviceActivation', 'Activation'), ('ExtraVerification', 'Extra Verification'), ('LightningLogin', 'Lightning Login'), ('EnableLightningLogin', 'Enroll in Lightning Login'), ('CustomApex', 'Apex method'), ('PasswordlessLogin', 'Passwordless Login')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'VerificationHistory'
        verbose_name = 'Identity Verification History'
        verbose_name_plural = 'Identity Verification History'
        # keyPrefix = '0Qt'



class Vote(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Idea, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Idea, IdeaComment, Solution] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Vote Type', choices=[('Up', None), ('Down', None), ('1', None), ('2', None), ('3', None), ('4', None), ('5', None)])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='vote_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='vote_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Vote'
        verbose_name = 'Vote'
        verbose_name_plural = 'Votes'
        # keyPrefix = '083'



class WebLink(models.Model):
    page_or_sobject_type = models.CharField(max_length=40, verbose_name='Page Or sObject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Activity', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('ContentVersion', None), ('Contract', None), ('CustomPageItem', None), ('DandBCompany', None), ('DashboardComponent', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('Goal', None), ('GoalLink', None), ('Idea', None), ('Lead', None), ('Macro', None), ('Metric', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Product2', None), ('QuickText', None), ('RecordAction', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SocialPersona', None), ('Solution', None), ('Task', None), ('User', None), ('UserProvisioningRequest', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkOrder', None), ('WorkOrderLineItem', None), ('WorkPerformanceCycle', None)])
    name = models.CharField(max_length=240)
    is_protected = models.BooleanField(verbose_name='Protected Component', default=models.DEFAULTED_ON_CREATE)
    url = models.TextField(verbose_name='URL', blank=True, null=True)
    encoding_key = models.CharField(max_length=40, verbose_name='Link Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    link_type = models.CharField(max_length=40, verbose_name='Content Source', choices=[('url', 'URL'), ('sControl', 'Custom S-Control'), ('javascript', 'OnClick JavaScript'), ('page', 'Visualforce Page'), ('flow', 'Flow Definition')])
    open_type = models.CharField(max_length=40, verbose_name='Behavior', choices=[('newWindow', 'Display in new window'), ('sidebar', 'Display in existing window with sidebar'), ('noSidebar', 'Display in existing window without sidebar'), ('replace', 'Display in existing window without sidebar or header'), ('onClickJavaScript', 'Execute JavaScript')])
    height = models.IntegerField(verbose_name='Height (in pixels)', blank=True, null=True)
    width = models.IntegerField(verbose_name='Width (in pixels)', blank=True, null=True)
    shows_location = models.BooleanField(verbose_name='Show Address Bar', default=models.DEFAULTED_ON_CREATE)
    has_scrollbars = models.BooleanField(verbose_name='Show Scrollbars', default=models.DEFAULTED_ON_CREATE)
    has_toolbar = models.BooleanField(verbose_name='Show Toolbars', default=models.DEFAULTED_ON_CREATE)
    has_menubar = models.BooleanField(verbose_name='Show Menu Bar', default=models.DEFAULTED_ON_CREATE)
    shows_status = models.BooleanField(verbose_name='Show Status Bar', default=models.DEFAULTED_ON_CREATE)
    is_resizable = models.BooleanField(verbose_name='Resizeable', default=models.DEFAULTED_ON_CREATE)
    position = models.CharField(max_length=40, verbose_name='Window Position', choices=[('fullScreen', None), ('none', None), ('topLeft', None)], blank=True, null=True)
    scontrol = models.ForeignKey(ApexPage, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [ApexPage, Scontrol]
    master_label = models.CharField(max_length=240, verbose_name='Label', blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    display_type = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('L', 'Detail Page Link'), ('B', 'Detail Page Button'), ('M', 'List Button')])
    require_row_selection = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblink_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblink_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WebLink'
        verbose_name = 'Custom Button or Link'
        verbose_name_plural = 'Custom Buttons or Links'
        # keyPrefix = '00b'



class WorkOrder(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_order_number = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    case = models.ForeignKey(Case, models.DO_NOTHING, blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, blank=True, null=True)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    description = models.TextField(blank=True, null=True)
    start_date = models.DateTimeField(blank=True, null=True)
    end_date = models.DateTimeField(blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    root_work_order = models.ForeignKey('self', models.DO_NOTHING, related_name='workorder_rootworkorder_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('New', 'New'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('Cannot Complete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], blank=True, null=True)
    tax = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    subtotal = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    line_item_count = models.IntegerField(verbose_name='Line Items', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, blank=True, null=True)
    discount = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    grand_total = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_work_order = models.ForeignKey('self', models.DO_NOTHING, related_name='workorder_parentworkorder_set', blank=True, null=True)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    business_hours = models.ForeignKey(BusinessHours, models.DO_NOTHING, blank=True, null=True)
    duration = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    duration_type = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('Hours', 'Hours'), ('Minutes', 'Minutes')], blank=True, null=True)
    duration_in_minutes = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Duration in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_appointment_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    status_category = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='None', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('OnHold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('None', 'None'), ('CannotComplete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrder'
        verbose_name = 'Work Order'
        verbose_name_plural = 'Work Orders'
        # keyPrefix = '0WO'



class WorkOrderFeed(models.Model):
    parent = models.ForeignKey(WorkOrder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorderfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorderfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderFeed'
        verbose_name = 'Work Order Feed'
        verbose_name_plural = 'Work Order Feed'
        # keyPrefix = 'None'



class WorkOrderHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_order = models.ForeignKey(WorkOrder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('Address', 'Address'), ('Asset', 'Asset'), ('BusinessHours', 'Business Hours'), ('Case', 'Case'), ('City', 'City'), ('Contact', 'Contact'), ('Country', 'Country'), ('created', 'Created.'), ('Description', 'Description'), ('Duration', 'Duration'), ('DurationInMinutes', 'Duration in Minutes'), ('DurationType', 'Duration Type'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('IsClosed', 'Is Closed'), ('Latitude', 'Latitude'), ('LineItemAutonumberMaster', 'LineItemAutonumberMaster'), ('LineItemCount', 'Line Items'), ('Longitude', 'Longitude'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentWorkOrder', 'Parent Work Order'), ('Pricebook2', 'Price Book'), ('Priority', 'Priority'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootWorkOrder', 'Root Work Order'), ('StartDate', 'Start Date'), ('State', 'State'), ('Status', 'Status'), ('StatusCategory', 'Status Category'), ('Street', 'Street'), ('Subject', 'Subject'), ('Subtotal', 'Subtotal'), ('Tax', 'Tax'), ('TotalPrice', 'Total Price'), ('PostalCode', 'Zip')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderHistory'
        verbose_name = 'Work Order History'
        verbose_name_plural = 'Work Order History'
        # keyPrefix = 'None'



class WorkOrderLineItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    line_item_number = models.CharField(max_length=255, verbose_name='Work Order Line Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorderlineitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorderlineitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    work_order = models.ForeignKey(WorkOrder, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    parent_work_order_line_item = models.ForeignKey('self', models.DO_NOTHING, related_name='workorderlineitem_parentworkorderlineitem_set', blank=True, null=True)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, blank=True, null=True)
    order = models.ForeignKey(Order, models.DO_NOTHING, blank=True, null=True)
    root_work_order_line_item = models.ForeignKey('self', models.DO_NOTHING, related_name='workorderlineitem_rootworkorderlineitem_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    start_date = models.DateTimeField(blank=True, null=True)
    end_date = models.DateTimeField(blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('New', 'New'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('Cannot Complete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    pricebook_entry = models.ForeignKey(PricebookEntry, models.DO_NOTHING, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    discount = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtotal = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    duration = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    duration_type = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('Hours', 'Hours'), ('Minutes', 'Minutes')], blank=True, null=True)
    duration_in_minutes = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Duration in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=255, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    subject = models.CharField(max_length=255, blank=True, null=True)
    status_category = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='None', choices=[('New', 'New'), ('InProgress', 'In Progress'), ('OnHold', 'On Hold'), ('Completed', 'Completed'), ('Closed', 'Closed'), ('None', 'None'), ('CannotComplete', 'Cannot Complete'), ('Canceled', 'Canceled')], blank=True, null=True)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Critical', 'Critical')], blank=True, null=True)
    service_appointment_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItem'
        verbose_name = 'Work Order Line Item'
        verbose_name_plural = 'Work Order Line Items'
        # keyPrefix = '1WL'



class WorkOrderLineItemFeed(models.Model):
    parent = models.ForeignKey(WorkOrderLineItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorderlineitemfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workorderlineitemfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItemFeed'
        verbose_name = 'Work Order Line Item Feed'
        verbose_name_plural = 'Work Order Line Item Feed'
        # keyPrefix = 'None'



class WorkOrderLineItemHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_order_line_item = models.ForeignKey(WorkOrderLineItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('Asset', 'Asset'), ('City', 'City'), ('Country', 'Country'), ('created', 'Created.'), ('Description', 'Description'), ('Discount', 'Discount'), ('Duration', 'Duration'), ('DurationInMinutes', 'Duration in Minutes'), ('DurationType', 'Duration Type'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('IsClosed', 'Is Closed'), ('Latitude', 'Latitude'), ('Longitude', 'Longitude'), ('Order', 'Order'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ParentWorkOrderLineItem', 'Parent Work Order Line Item'), ('Priority', 'Priority'), ('PricebookEntry', 'Product'), ('Product2', 'Product'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootWorkOrderLineItem', 'Root Work Order Line Item'), ('StartDate', 'Start Date'), ('State', 'State'), ('Status', 'Status'), ('StatusCategory', 'Status Category'), ('Street', 'Street'), ('Subject', 'Subject'), ('UnitPrice', 'Unit Price'), ('WorkOrder', 'Work Order'), ('PostalCode', 'Zip')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderLineItemHistory'
        verbose_name = 'Line Item History'
        verbose_name_plural = 'Line Item History'
        # keyPrefix = 'None'



class WorkOrderShare(models.Model):
    parent = models.ForeignKey(WorkOrder, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkOrderShare'
        verbose_name = 'Work Order Share'
        verbose_name_plural = 'Work Order Share'
        # keyPrefix = 'None'

