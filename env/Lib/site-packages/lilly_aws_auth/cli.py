#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""Command line interface for Lilly AWS Auth to be used in main program."""

from __future__ import with_statement, absolute_import, print_function
from argparse import ArgumentParser, ArgumentTypeError
import logging
import sys

from pkg_resources import get_distribution, DistributionNotFound


__copyright__ = "Copyright (C) 2018-2020 Eli Lilly and Company"

try:
    # this is a module within package, need package's version so split
    # module path to get package
    __version__ = get_distribution(__name__.split(".")[0]).version
except DistributionNotFound:  # pragma: no cover
    # module is not installed as expected. Set a dummy string version to
    # prevent failure if directly executed.
    __version__ = "dev"


def command_line():
    """
    Command-line interface.
    :return: arguments via a parser.parse_args() object
    """

    class MyParser(ArgumentParser):
        """
        Override default behavior, print the whole help message for any CLI
        error.
        """
        def error(self, message):
            print('error: %s\n' % message, file=sys.stderr)
            self.print_help()
            sys.exit(2)

    parser = MyParser(
        add_help=True,
        description="Generate temporary AWS credentials for an assumed role. "
                    "This uses Lilly federation to authenticate and "
                    "generate a SAML response that is then used to retrieve "
                    "AWS credentials from the Secure Token Service (STS).",
    )
    parser.add_argument('--version', action='version',
                        version='%(prog)s '
                                '{version}'.format(version=__version__))

    subparsers = parser.add_subparsers(dest='subparser_name')
    # python 3 make consistent behavior as Python 2 argparse.
    # see https://bugs.python.org/issue9253
    subparsers.required = True
    login = subparsers.add_parser(
        'login',
        help="Login to Amazon through Lilly federation and generate "
             "temporary credentials.",
    )
    login.add_argument(
        'login_profile',
        help="Login using saved configurations in ~/.aws/lilly_config to "
             "bypass multiple interactive steps. Pass the login profile "
             "name from ~/.aws/lilly_config. This will save the credentials "
             "in ~/.aws/credentials under the same profile name unless "
             "overridden by the login_profiles `aws_profile` name "
             "or specifying a value for --aws-profile.",
        nargs='?'
    )
    login.add_argument('-v', '--verbose', help="Set logging to verbose",
                       action="store_const", dest="loglevel",
                       const=logging.DEBUG, default=logging.INFO)
    login.add_argument(
        '--debug',
        help='Enable low level debugging messages',
        action='store_true'
    )
    login.add_argument(
        '--aws-profile',
        help="The name of the section you would like these credentials "
             "saved in ~/.aws/credentials. When not using a login_profile "
             "and if not set here, it will default to `saml`. If you are "
             "using a login_profile, setting this value takes precedence. "
             "If not set, it will read the `aws_profile` field from the "
             "login_profile configuration. If that field is not present, "
             "it defaults to the login_profile name.")
    login.add_argument(
        '-s', '--switch_device',
        help="To select another device besides your default MFA device, "
             "add -s to prompt a list of available devices for MFA.",
        action='store_true'
    )
    login.add_argument(
        '--entry-url',
        help="The identity provider ('IdP') federation entry URL to use for "
             "multifactor authentication attempt; Default "
             "value: 'http://aws-admin.lilly.com'. If using a saved login "
             "profile, you can override its entry url configuration by "
             "explicitly supplying one here.")
    login.add_argument(
        '-u', '--username',
        help="The federated user's username to use for multifactor "
             "authentication invocation. If using a saved login profile, "
             "you can override its username configuration by explicitly "
             "supplying a username here."
    )
    login.add_argument(
        '-p', '--password',
        help="The federated user's password to use for multifactor "
             "authentication invocation. If none specified, "
             "will prompt for password. "
    )
    login.add_argument(
        '--aws-region',
        help="The AWS Region to use for API calls in this script, as well as "
             "to set for the resultant credentials configuration upon "
             "successfully assuming a Role. Defaults to 'us-east-2'. If "
             "using a saved login profile, you can override its region by "
             "explicitly supplying a value here."
    )
    login.add_argument(
        '--output-format',
        help="The awscli config for output format. choices are text or json. "
             "Default is json. If using a saved login profile, you can "
             "override the profile's output format configuration by "
             "explicitly passing the override value here.",
        choices=['json', 'text']
    )
    login.add_argument(
        '-d', '--duration',
        help="Number of seconds for which the credentials shall be valid. "
             "Must be a positive integer equal to or between 900 and 36000 "
             "seconds (10 hours). The default is 3600 seconds (1 hour). If "
             "using a saved login profile, you can override the profile's "
             "configured duration by explicitly supplying an override value "
             "here.",
        type=valid_duration)
    login.add_argument(
        '--filter-account',
        help='Filter the AWS accounts and roles that are returned by '
             'account name.')
    login.add_argument(
        '--filter-role',
        help='Filter the AWS accounts and roles that are returned by '
             'account role.')

    configure = subparsers.add_parser(
        'configure',
        help="Configure and save a Login Profile. If you pass all the "
             "arguments needed, it will save immediately, otherwise you "
             "will be taken through interactive prompts to fill in the "
             "information."
    )
    configure.add_argument('-v', '--verbose', help="Set logging to verbose",
                           action="store_const", dest="loglevel",
                           const=logging.DEBUG, default=logging.INFO)
    configure.add_argument(
        '--debug',
        help='Enable low level debugging messages',
        action='store_true'
    )
    configure.add_argument(
        '--entry-url',
        help="The identity provider federation entry URL to use for "
             "multifactor authentication attempt",
    )
    configure.add_argument(
        '-u', '--username',
        help="The federated user's username to use for multifactor "
             "authentication invocation"
    )
    configure.add_argument(
        '--account',
        help="The account name. This field is optional, it is used to help "
             "create a note entry in the saved login profile for reference."
    )
    configure.add_argument(
        '--account-id',
        help="AWS account ID. This field is optional, but can be paired with "
             "providing the role name for the tool to generate the require "
             "role arn. So if this is not supplied, role arn will be "
             "required."
    )
    configure.add_argument(
        '--role',
        help="The role name. This field is optional. This can be provided "
             "along with account-id for the tool to generate the required "
             "role arn. If this is not supplied along with account-id, "
             "then role_arn will be required. This is also used to help "
             "create a note entry in the saved login profile for reference."
    )
    configure.add_argument(
        '--role-arn',
        help="The Role ARN for the desired account and role. Required "
             "unless account-id and role name are supplied."
    )
    configure.add_argument(
        '--aws-region',
        help="The AWS Region to use for API calls in this script, as well as "
             "to set for the resultant credentials configuration upon "
             "successfully assuming a Role. (e.g. us-east-2)"
    )
    configure.add_argument(
        '--output-format',
        help="The awscli config for output format. choices are text or json.",
        choices=['json', 'text']
    )
    configure.add_argument(
        '--login-profile',
        help="The name of this login_profile to save in ~/.aws/lilly_config "
             "and used when invoking the lilly-aws-auth login ["
             "login_profile] command."
    )
    configure.add_argument(
        '--aws-profile',
        help="The name of the section in ~/.aws/credentials to "
             "save this profile when it is used. This parameter "
             "is optional and if not set, then a login with this "
             "login_profile will default to use the `login-profile` name as "
             "the `aws-profile`"
    )
    configure.add_argument(
        '-d', '--duration',
        help="Defines the number of seconds for which the credentials shall "
             "be valid. Must be a positive integer equal to or between 900 "
             "and 36000 seconds (10 hours). The default is 3600 seconds (1 "
             "hour)", type=valid_duration)

    list_parser = subparsers.add_parser(
        'list',
        help="List available Login Profiles."
    )
    list_parser.add_argument('-v', '--verbose', help="Set logging to verbose",
                           action="store_const", dest="loglevel",
                           const=logging.DEBUG, default=logging.INFO)
    list_parser.add_argument(
        '--debug',
        help='Enable low level debugging messages',
        action='store_true'
    )
    return parser.parse_args()


def valid_duration(seconds, min_value=900, max_value=36000):
    """
    Validate duration entered. Must be a positive integer between specified
    values.

    :param seconds: the passed in argument
    :param min_value: set by aws minimum botocore range
    :param max_value: the maximum allowed value. Set by Lilly policy.
    :returns: valid duration in seconds
    """
    error_message = "Duration must be a positive integer equal to or " \
                    "between {} and {}".format(min_value, max_value)
    if not isinstance(seconds, int):
        try:
            seconds = int(seconds)
        except ValueError:
            raise ArgumentTypeError(error_message)
    if not min_value <= seconds <= max_value:
        raise ArgumentTypeError(error_message)
    return seconds
