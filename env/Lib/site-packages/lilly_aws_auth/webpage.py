#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""Web page handling."""

from __future__ import print_function, absolute_import

from bs4 import BeautifulSoup
from requests import Session, Request
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

from . import ca_cert
# python 2 and 3 compatibility
try:
    from urlparse import urljoin
except ImportError:
    from urllib.parse import urljoin


class Client:
    """Requests client to use for a Session."""
    def __init__(self):
        self._session = Session()
        self._session.verify = ca_cert

        retry = Retry(total=5, connect=5)
        adapter = HTTPAdapter(max_retries=retry)
        self._session.mount('http://', adapter)
        self._session.mount('https://', adapter)

    @staticmethod
    def create_request(url, method='GET', data={}):
        """Send a prepared request"""
        return Request(method, url, data=data)

    def send_request(self, request):
        """
        Prepare a request using the existing session, which also handles
        using environment variables like proxies.
        """
        prepped = self._session.prepare_request(request)
        environment_settings = self._session.merge_environment_settings(prepped.url, {}, None, None, None)

        return self._session.send(prepped, **environment_settings)

    def request(self, url, method='GET', data={}):
        """
        Prepare and send a request using environment variables and
        existing session.
        """
        return self.send_request(self.create_request(url, method, data))


class Document(BeautifulSoup):
    """Webpage as a Document to can some often used methods."""
    def __init__(self, document, url):
        super(Document, self).__init__(document, "html.parser")
        self.url = url

    def has(self, css_selector):
        """Return bool if css selection is found in document."""
        return bool(self.select(css_selector))

    def extract_form(self, id=None):
        """Get the form block from the HTML."""
        form = self.select_one('form[id="{}"]'.format(id)) if id else \
            self.select_one("form")

        # TODO: Better handling if document does not contain a form

        method = form.get('method', 'GET').upper()
        url = urljoin(self.url, form.get('action', self.url))
        data = {e.get('name'): e.get('value', '') for e in form.find_all('input') if e.get('name')}

        return Form(url, method, data)


class Form:
    """HTML Form interaction with Requests."""
    def __init__(self, url, method='GET', data={}):
        self.method = method
        self.url = url
        self.data = data

    def set(self, name, value):
        """Update a form field value."""
        self.data[name] = value
        return self

    def build_request(self):
        """Prepare and return form submission request."""
        return Request(self.method, self.url, data=self.data)
