#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""Federate the user through Lilly login and return SAML token."""

from __future__ import print_function, absolute_import

from .auth_handlers import DefaultAuthHandler
from .webpage import Client, Document


class AwsRoleObject:
    """Construct AWS Role object. This is utilized primarily for landing
    zone accounts that need to return all information back without prompting
    AWS for more information for interactive choices, due to SAML token
    length limits."""
    def __init__(self, account_description, role_arn, principal_arn,
                 saml_response):
        self.account_description = account_description
        self.role_arn = role_arn
        self.principal_arn = principal_arn
        self.saml_response = saml_response
        if self.account_description is not None and self.role_arn is not None:
            self.account = self.account_description.split(" ")[0]
            self.role = self.role_arn.split("/")[-1]


class AuthContext:
    """
    Object to persist state during authentication
    """
    def __init__(self, **kwargs):
        self.client = Client()
        self.username = kwargs.get('username')
        self.password = kwargs.get('password')
        self.role_arn = kwargs.get('role_arn')

        self.account_description = kwargs.get('account_description')
        self.account_name = kwargs.get('account_name')
        self.role = kwargs.get('role')
        self.principal_arn = kwargs.get('principal_arn')

        self.switch_device = kwargs.get('switch_device', False)
        self.saml_response = kwargs.get('saml_response')

        self.filter_role = kwargs.get("filter_role")
        self.filter_account = kwargs.get("filter_account")


class LillyFederation:
    """Login to Lilly through a federated entry point to generate a SAML
    token."""

    def __init__(self, identity_provider_url, **kwargs):
        """
        :param identity_provider_url: the URL that directs to the federated
          login.
        :type identity_provider_url: str or unicode
        :return: function call to follow()
        :param kwargs: keyword arguments
        :keyword switch_device: Bool to say whether to select switch auth
          device to allow prompt of many devices instead of defaulting to
          primary.
        :keyword username: Lilly username. Optional, will prompt if not set.
        :keyword password: Password for Lilly user. Optional, will prompt if
          not set.
        :keyword filter_account: Account name to filter available options.
          Only used in the aws-login.am.lilly.com firstMile site since it
          does the account selection
          within the same page as authentication response and fetches the
          SamlResponse. The other legacy methods do them as separate steps so
          this argument is only used for the aws_accounts module directly in
          those.
        :keyword filter_role: Account name to filter available options.
          Only used in the aws-login.am.lilly.com firstMile site since it
          does the role selection
          within the same page as authentication response and fetches the
          SamlResponse. The other legacy methods do them as separate steps so
          this argument is only used for the aws_accounts module directly in
          those.
        """
        self._identity_provider_url = identity_provider_url
        self._switch_device = kwargs.get('switch_device')
        self.role_arn = kwargs.get('role_arn')
        self.username = kwargs.get('username')
        self._password = kwargs.get('password')
        # only used by aws-login site firstMile
        self.filter_account = kwargs.get("filter_account")
        self.filter_role = kwargs.get("filter_role")

    def authenticate(self):
        """
        Open the federated login page in a Session and handle downstream flow.

        :return: saml response
        """

        auth_handler = DefaultAuthHandler()
        auth_context = AuthContext(
            username=self.username,
            password=self._password,
            role_arn=self.role_arn,
            switch_device=self._switch_device,
            filter_account=self.filter_account,
            filter_role=self.filter_role
        )

        request = auth_context.client.create_request(self._identity_provider_url)

        while request and not auth_context.saml_response:
            response = auth_context.client.send_request(request)
            document = Document(response.text, response.url)
            request = auth_handler.handle_response(document, auth_context)

        # Set username so it can be used downstream
        self.username = auth_context.username

        return AwsRoleObject(
            auth_context.account_description,
            auth_context.role_arn,
            auth_context.principal_arn,
            auth_context.saml_response)
